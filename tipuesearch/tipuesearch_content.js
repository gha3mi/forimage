var tipuesearch = {"pages":[{"title":" ForImage ","text":"ForImage ForImage : A Fortran library for processing and editing PNM images and managing colors. PNM File Support Color Support fpm dependency How to run demos Using fpm Using CMake Projects Utilizing ForImage API documentation Contributing References PNM File Support ForImage offers comprehensive support for PNM files, including creation, importing, and exporting capabilities. It seamlessly handles formats such as PBM , PGM , and PPM in both ASCII and binary representations. Available features include: Original Negative Brighten Swap Channels Remove Channels Greyscale Rotate Flip Horizontal Flip Vertical Crop Resize Color Support ForImage supports different color representations like RGB, CMYK, Decimal, Hexadecimal, HSV, HSL, XYZ, and color names. Users can easily set and retrieve color values, switch between color types, and find the closest matching colors. fpm dependency If you want to use ForImage as a dependency in your own fpm project,\nyou can easily include it by adding the following line to your fpm.toml file: [dependencies] forimage = { git = \"https://github.com/gha3mi/forimage.git\" } How to run demos The demo_ppm program demonstrates various operations on PPM (Portable Pixmap) images. It generates Mandelbrot fractals, performs diverse manipulations, and exports images in the PPM format. The demo_color program showcases manipulation of color spaces and their conversions. This program sets a custom color using various methods, converts it to different color spaces, retrieves color values, finds the nearest color, and prints color details. To get started, follow these steps: Clone the repository: Clone the ForImage repository from GitHub using the following command: git clone https://github.com/gha3mi/forimage.git Navigate to the cloned directory: cd forimage Using fpm Run the demo_ppm example: fpm run --example demo_ppm Run the demo_color example: fpm run --example demo_color Using CMake cmake -B build -D BUILD_FORIMAGE_EXAMPLES = on cmake --build build Run the demo_ppm example: ./build/example/demo_ppm Run the demo_color example: ./build/example/demo_color Note: The executable must be run from the forimage directory. Projects Utilizing ForImage ForColormap : A Fortran library for colormaps If your project utilizes ForImage and you want to be added to this list, please add your project and create a pull request. API documentation The most up-to-date API documentation for the master branch is available here .\nTo generate the API documentation for ForImage using ford run the following\ncommand: ford ford.yml Contributing Contributions to ForImage are welcome!\nIf you find any issues or would like to suggest improvements, please open an issue. References https://en.wikipedia.org/wiki/Netpbm#File_formats Developer Info Seyed Ali Ghasemi","tags":"home","loc":"index.html"},{"title":"format_lut – ForImage ","text":"type, public :: format_lut Components Type Visibility Attributes Name Initial integer, public, dimension(:,:), allocatable :: colors integer, public :: dim_colors integer, public :: num_colors Type-Bound Procedures procedure, public :: allocate_colors private pure elemental subroutine allocate_colors (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this procedure, public :: export private impure subroutine export (this, file_name) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this character(len=*), intent(in) :: file_name procedure, public :: finalize => deallocate_lut private pure elemental subroutine deallocate_lut (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this procedure, public :: get_colors private pure function get_colors (this) result(colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(in) :: this Return Value integer, dimension(:,:), allocatable procedure, public :: get_dim_colors private pure elemental function get_dim_colors (this) result(dim_colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(in) :: this Return Value integer procedure, public :: get_num_colors private pure elemental function get_num_colors (this) result(num_colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(in) :: this Return Value integer procedure, public :: import private impure subroutine import (this, file_name, dim_colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this character(len=*), intent(in) :: file_name integer, intent(in) :: dim_colors procedure, public :: set private pure subroutine set (this, num_colors, dim_colors, colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this integer, intent(in) :: num_colors integer, intent(in) :: dim_colors integer, intent(in), dimension(:,:) :: colors procedure, public :: set_colors private pure subroutine set_colors (this, colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this integer, intent(in), dimension(:,:) :: colors procedure, public :: set_dim_colors private pure elemental subroutine set_dim_colors (this, dim_colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this integer, intent(in) :: dim_colors procedure, public :: set_num_colors private pure elemental subroutine set_num_colors (this, num_colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this integer, intent(in) :: num_colors Source Code type format_lut integer :: num_colors integer :: dim_colors integer , dimension (:,:), allocatable :: colors contains procedure :: allocate_colors procedure :: set procedure :: set_num_colors procedure :: get_num_colors procedure :: set_dim_colors procedure :: get_dim_colors procedure :: set_colors procedure :: get_colors procedure :: export procedure :: import procedure :: finalize => deallocate_lut end type format_lut","tags":"","loc":"type/format_lut.html"},{"title":"color – ForImage ","text":"type, public :: color Components Type Visibility Attributes Name Initial integer(kind=ik), private :: b = 0_ik rgb integer(kind=ik), private :: c = 0_ik cmyk character(len=256), private :: color_name color name integer(kind=ik), private :: decimal = 0_ik decimal integer(kind=ik), private :: g = 0_ik rgb real(kind=rk), private :: h = 0.0_rk hsv character(len=7), private :: hex = '#000000' hex real(kind=rk), private :: hl = 0.0_rk hsl integer(kind=ik), private :: k = 0_ik cmyk integer(kind=ik), private :: m = 0_ik cmyk integer(kind=ik), private :: r = 0_ik rgb real(kind=rk), private :: s = 0.0_rk hsv real(kind=rk), private :: sl = 0.0_rk hsl real(kind=rk), private :: v = 0.0_rk hsv real(kind=rk), private :: vl = 0.0_rk hsl real(kind=rk), private :: xyz_x = 0.0_rk xyz real(kind=rk), private :: xyz_y = 0.0_rk xyz real(kind=rk), private :: xyz_z = 0.0_rk xyz integer(kind=ik), private :: y = 0_ik cmyk Type-Bound Procedures generic, public :: assignment(=) => copy_color private pure elemental subroutine copy_color (this, from) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this class( color ), intent(in) :: from procedure, public :: convert private pure elemental subroutine convert (this, to) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in) :: to procedure, public :: find_nearest private pure elemental subroutine find_nearest (this, nearest_color) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this type( color ), intent(out) :: nearest_color procedure, public :: get private pure elemental subroutine get (this, name, r, g, b, c, m, y, k, decimal, hex, h, s, v, hl, sl, vl, xyz_x, xyz_y, xyz_z) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(out), optional :: name integer(kind=ik), intent(out), optional :: r integer(kind=ik), intent(out), optional :: g integer(kind=ik), intent(out), optional :: b integer(kind=ik), intent(out), optional :: c integer(kind=ik), intent(out), optional :: m integer(kind=ik), intent(out), optional :: y integer(kind=ik), intent(out), optional :: k integer(kind=ik), intent(out), optional :: decimal character(len=7), intent(out), optional :: hex real(kind=rk), intent(out), optional :: h real(kind=rk), intent(out), optional :: s real(kind=rk), intent(out), optional :: v real(kind=rk), intent(out), optional :: hl real(kind=rk), intent(out), optional :: sl real(kind=rk), intent(out), optional :: vl real(kind=rk), intent(out), optional :: xyz_x real(kind=rk), intent(out), optional :: xyz_y real(kind=rk), intent(out), optional :: xyz_z procedure, public :: print private impure elemental subroutine print (this, option) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in), optional :: option procedure, public :: print_available_colors private impure elemental subroutine print_available_colors (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this procedure, public :: save private impure elemental subroutine save (this, file_name, height, width) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in), optional :: file_name integer, intent(in), optional :: height integer, intent(in), optional :: width procedure, public :: save_available_colors private impure elemental subroutine save_available_colors (this, file_name, height, width) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in), optional :: file_name integer, intent(in), optional :: height integer, intent(in), optional :: width procedure, public :: set private pure elemental subroutine set (this, name, r, g, b, c, m, y, k, decimal, hex, h, s, v, hl, sl, vl, xyz_x, xyz_y, xyz_z, use_library) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in) :: name integer(kind=ik), intent(in), optional :: r integer(kind=ik), intent(in), optional :: g integer(kind=ik), intent(in), optional :: b integer(kind=ik), intent(in), optional :: c integer(kind=ik), intent(in), optional :: m integer(kind=ik), intent(in), optional :: y integer(kind=ik), intent(in), optional :: k integer(kind=ik), intent(in), optional :: decimal character(len=*), intent(in), optional :: hex real(kind=rk), intent(in), optional :: h real(kind=rk), intent(in), optional :: s real(kind=rk), intent(in), optional :: v real(kind=rk), intent(in), optional :: hl real(kind=rk), intent(in), optional :: sl real(kind=rk), intent(in), optional :: vl real(kind=rk), intent(in), optional :: xyz_x real(kind=rk), intent(in), optional :: xyz_y real(kind=rk), intent(in), optional :: xyz_z logical, intent(in), optional :: use_library procedure, private :: copy_color private pure elemental subroutine copy_color (this, from) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this class( color ), intent(in) :: from procedure, private :: get_cmyk private pure elemental subroutine get_cmyk (this, c, m, y, k) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this integer(kind=ik), intent(out) :: c integer(kind=ik), intent(out) :: m integer(kind=ik), intent(out) :: y integer(kind=ik), intent(out) :: k procedure, private :: get_decimal private pure elemental subroutine get_decimal (this, decimal) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this integer(kind=ik), intent(out) :: decimal procedure, private :: get_hex private pure elemental subroutine get_hex (this, hex) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this character(len=*), intent(out) :: hex procedure, private :: get_hsl private pure elemental subroutine get_hsl (this, h, s, l) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this real(kind=rk), intent(out) :: h real(kind=rk), intent(out) :: s real(kind=rk), intent(out) :: l procedure, private :: get_hsv private pure elemental subroutine get_hsv (this, h, s, v) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this real(kind=rk), intent(out) :: h real(kind=rk), intent(out) :: s real(kind=rk), intent(out) :: v procedure, private :: get_name private pure elemental subroutine get_name (this, name) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this character(len=*), intent(out) :: name procedure, private :: get_rgb private pure elemental subroutine get_rgb (this, r, g, b) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this integer(kind=ik), intent(out) :: r integer(kind=ik), intent(out) :: g integer(kind=ik), intent(out) :: b procedure, private :: get_xyz private pure elemental subroutine get_xyz (this, x, y, z) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this real(kind=rk), intent(out) :: x real(kind=rk), intent(out) :: y real(kind=rk), intent(out) :: z procedure, private :: print_cmyk private impure elemental subroutine print_cmyk (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this procedure, private :: print_decimal private impure elemental subroutine print_decimal (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this procedure, private :: print_hex private impure elemental subroutine print_hex (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this procedure, private :: print_hsl private impure elemental subroutine print_hsl (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this procedure, private :: print_hsv private impure elemental subroutine print_hsv (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this procedure, private :: print_name private impure elemental subroutine print_name (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this procedure, private :: print_rgb private impure elemental subroutine print_rgb (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this procedure, private :: print_xyz private impure elemental subroutine print_xyz (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this procedure, private :: set_by_name private pure elemental subroutine set_by_name (this, name) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in) :: name procedure, private :: set_cmyk private pure elemental subroutine set_cmyk (this, c, m, y, k) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this integer(kind=ik), intent(in) :: c integer(kind=ik), intent(in) :: m integer(kind=ik), intent(in) :: y integer(kind=ik), intent(in) :: k procedure, private :: set_decimal private pure elemental subroutine set_decimal (this, decimal) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this integer(kind=ik), intent(in) :: decimal procedure, private :: set_hex private pure elemental subroutine set_hex (this, hex) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in) :: hex procedure, private :: set_hsl private pure elemental subroutine set_hsl (this, h, s, l) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this real(kind=rk), intent(in) :: h real(kind=rk), intent(in) :: s real(kind=rk), intent(in) :: l procedure, private :: set_hsv private pure elemental subroutine set_hsv (this, h, s, v) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this real(kind=rk), intent(in) :: h real(kind=rk), intent(in) :: s real(kind=rk), intent(in) :: v procedure, private :: set_name private pure elemental subroutine set_name (this, name) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in) :: name procedure, private :: set_rgb private pure elemental subroutine set_rgb (this, r, g, b) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b procedure, private :: set_xyz private pure elemental subroutine set_xyz (this, x, y, z) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this real(kind=rk), intent(in) :: x real(kind=rk), intent(in) :: y real(kind=rk), intent(in) :: z Source Code type :: color integer ( ik ) , private :: r = 0_ik , g = 0_ik , b = 0_ik !! rgb integer ( ik ) , private :: c = 0_ik , m = 0_ik , y = 0_ik , k = 0_ik !! cmyk integer ( ik ) , private :: decimal = 0_ik !! decimal character ( len = 7 ) , private :: hex = '#000000' !! hex real ( rk ) , private :: h = 0.0_rk , s = 0.0_rk , v = 0.0_rk !! hsv real ( rk ) , private :: hl = 0.0_rk , sl = 0.0_rk , vl = 0.0_rk !! hsl real ( rk ) , private :: xyz_x = 0.0_rk , xyz_y = 0.0_rk , xyz_z = 0.0_rk !! xyz character ( len = 256 ) , private :: color_name !! color name contains procedure :: set procedure , private :: set_by_name procedure , private :: set_name procedure , private :: set_rgb procedure , private :: set_hex procedure , private :: set_decimal procedure , private :: set_cmyk procedure , private :: set_hsv procedure , private :: set_hsl procedure , private :: set_xyz procedure :: get procedure , private :: get_name procedure , private :: get_rgb procedure , private :: get_hex procedure , private :: get_decimal procedure , private :: get_cmyk procedure , private :: get_hsv procedure , private :: get_hsl procedure , private :: get_xyz procedure :: print procedure , private :: print_name procedure , private :: print_rgb procedure , private :: print_hex procedure , private :: print_decimal procedure , private :: print_cmyk procedure , private :: print_hsv procedure , private :: print_hsl procedure , private :: print_xyz procedure , private :: copy_color generic :: assignment ( = ) => copy_color procedure :: convert procedure :: find_nearest procedure :: print_available_colors procedure :: save procedure :: save_available_colors end type color","tags":"","loc":"type/color.html"},{"title":"format_pnm – ForImage ","text":"type, public :: format_pnm This type is designed to store and manipulate PNM (Portable Any Map) image files. Components Type Visibility Attributes Name Initial integer(kind=ik), public, dimension(:,:), allocatable :: pixels Pixel values of the image. character(len=:), private, allocatable :: comment Optional comment associated with the image. character(len=6), private :: encoding Encoding of the PNM image ( ascii or plain , binary or raw ). character(len=3), private :: file_format File format of the PNM image ( pbm , pgm , ppm ). integer, private :: height Height (number of rows) of the image. character(len=2), private :: magic_number Magic number representing the PNM image type ( P1 , P2 , P3 , P4 , P5 , P6 ). integer, private :: max_color Maximum color value of the image. Used for PGM and PPM images. integer, private :: width Width (number of columns) of the image. Type-Bound Procedures procedure, public :: brighten Adjust the brightness and darkness of the image. private pure elemental subroutine brighten (this, factor) Author Seyed Ali Ghasemi License BSD 3-Clause Brightens or darkens the image. Only supported for PGM and PPM images. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: factor procedure, public :: crop Crop the image to a specified region. private pure elemental subroutine crop (this, start_row, end_row, start_col, end_col) Author Seyed Ali Ghasemi License BSD 3-Clause Crops the image to a specified region. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: start_row integer, intent(in) :: end_row integer, intent(in) :: start_col integer, intent(in) :: end_col procedure, public :: export_pnm Write an image to a file. private impure subroutine export_pnm (this, file_name, encoding) Author Seyed Ali Ghasemi License BSD 3-Clause Writes the PNM image to a file. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: file_name character(len=*), intent(in), optional :: encoding procedure, public :: finalize => deallocate_pnm Clean up allocated memory for the PNM image. private pure elemental subroutine deallocate_pnm (this) Author Seyed Ali Ghasemi License BSD 3-Clause Deallocates memory for the pixels of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this procedure, public :: flip_horizontal Flip the image horizontally. private pure elemental subroutine flip_horizontal (this) Author Seyed Ali Ghasemi License BSD 3-Clause Flips the image horizontally. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this procedure, public :: flip_vertical Flip the image vertically. private pure elemental subroutine flip_vertical (this) Author Seyed Ali Ghasemi License BSD 3-Clause Flips the image vertically. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this procedure, public :: get_format Get the encoding of the PNM image. private pure function get_format (this) result(encoding) Author Seyed Ali Ghasemi License BSD 3-Clause Gets the encoding of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(in) :: this Return Value character(len=:), allocatable procedure, public :: greyscale Convert a color image to greyscale. private pure elemental subroutine greyscale (this) Author Seyed Ali Ghasemi License BSD 3-Clause Converts a color image to greyscale. Only supported for PPM images. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this procedure, public :: import_pnm Read an image from a file. private impure subroutine import_pnm (this, file_name, file_format, encoding) Author Seyed Ali Ghasemi License BSD 3-Clause Reads a PNM image from a file. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: file_name character(len=3), intent(in) :: file_format character(len=*), intent(in) :: encoding procedure, public :: negative Invert the colors of the image. private pure elemental subroutine negative (this) Author Seyed Ali Ghasemi License BSD 3-Clause Inverts the colors of the image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this procedure, public :: print_info Display information about the image (dimensions, aspect ratio, etc.). private impure elemental subroutine print_info (this) Author Seyed Ali Ghasemi License BSD 3-Clause Displays information about the image e.g. dimensions, aspect ratio, etc. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(in) :: this procedure, public :: remove_channels Remove one or more RGB channels from the image. private pure elemental subroutine remove_channels (this, remove_r, remove_g, remove_b) Author Seyed Ali Ghasemi License BSD 3-Clause Removes one or more RGB channels from the image. Only supported for PPM images. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this logical, intent(in), optional :: remove_r logical, intent(in), optional :: remove_g logical, intent(in), optional :: remove_b procedure, public :: resize Resize the image to a specified size. private pure elemental subroutine resize (this, new_height, new_width) Author Seyed Ali Ghasemi License BSD 3-Clause Resizes the image to specified dimensions. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: new_height integer, intent(in) :: new_width procedure, public :: rotate Rotate the image by a specified angle. private pure elemental subroutine rotate (this, angle) Author Seyed Ali Ghasemi License BSD 3-Clause Rotates the image by a specified angle. Supported angles are 90, 180, 270, -90, -180, -270. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: angle procedure, public :: set_format Set the encoding of the PNM image. private pure elemental subroutine set_format (this, encoding) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the encoding of the PNM image. Supported values are ascii or plain and binary or raw . Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: encoding procedure, public :: set_pnm Set the attributes of the PNM image. private pure subroutine set_pnm (this, encoding, file_format, width, height, max_color, comment, pixels) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the attributes of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: encoding character(len=3), intent(in) :: file_format integer, intent(in) :: width integer, intent(in) :: height integer, intent(in), optional :: max_color character(len=*), intent(in) :: comment integer(kind=ik), intent(in), dimension(:,:) :: pixels procedure, public :: swap_channels Swap the RGB channels of the image. private pure elemental subroutine swap_channels (this, swap) Author Seyed Ali Ghasemi License BSD 3-Clause Swaps the RGB channels of the image. Only supported for PPM images. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: swap procedure, private :: allocate_pixels Allocate memory for the pixels of the PNM image. private pure elemental subroutine allocate_pixels (this) Author Seyed Ali Ghasemi License BSD 3-Clause Allocates memory for the pixels of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this procedure, private :: check_pixel_range Check if the pixel values are within the valid range. private pure subroutine check_pixel_range (this, pixels) Author Seyed Ali Ghasemi License BSD 3-Clause Checks if the pixel values are within the valid range. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer(kind=ik), intent(in), dimension(:,:) :: pixels procedure, private :: set_comment Set a comment for the PNM image. private pure elemental subroutine set_comment (this, comment) Author Seyed Ali Ghasemi License BSD 3-Clause Sets a comment for the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: comment procedure, private :: set_file_format Set the file format of the PNM image. private pure elemental subroutine set_file_format (this, file_format) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the file format of the PNM image. Supported values are pbm , pgm , and ppm . Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=3), intent(in) :: file_format procedure, private :: set_header Set the header of the PNM image. private pure elemental subroutine set_header (this, magic_number, width, height, comment, max_color) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the header of the PNM image. The header includes the magic number, width, height, comment, and max_color. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: magic_number integer, intent(in) :: width integer, intent(in) :: height character(len=*), intent(in) :: comment integer, intent(in), optional :: max_color procedure, private :: set_height Set the height of the PNM image. private pure elemental subroutine set_height (this, height) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the height of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: height procedure, private :: set_magicnumber Set the magic number of the PNM image. private pure elemental subroutine set_magicnumber (this, magic_number) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the magic number of the PNM image. Supported values are P1 , P2 , P3 , P4 , P5 , and P6 . Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: magic_number procedure, private :: set_max_color Set the maximum color value of the PNM image. private pure elemental subroutine set_max_color (this, max_color) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the maximum color value of the PNM image. Only required for PGM and PPM images Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: max_color procedure, private :: set_pixels Set the pixel values of the PNM image. private pure subroutine set_pixels (this, pixels) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the pixel values of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer(kind=ik), intent(in), dimension(:,:) :: pixels procedure, private :: set_width Set the width of the PNM image. private pure elemental subroutine set_width (this, width) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the width of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: width Source Code type format_pnm character ( 2 ) , private :: magic_number !! Magic number representing the PNM image type (`P1`, `P2`, `P3`, `P4`, `P5`, `P6`). integer , private :: width !! Width (number of columns) of the image. integer , private :: height !! Height (number of rows) of the image. character (:), allocatable , private :: comment !! Optional comment associated with the image. integer , private :: max_color !! Maximum color value of the image. Used for PGM and PPM images. integer ( ik ), dimension (:,:), allocatable :: pixels !! Pixel values of the image. character ( 3 ) , private :: file_format !! File format of the PNM image (`pbm`, `pgm`, `ppm`). character ( 6 ) , private :: encoding !! Encoding of the PNM image (`ascii` or `plain`, `binary` or `raw`). contains ! Procedures for setting individual attributes procedure :: set_format !!> Set the encoding of the PNM image. procedure , private :: set_file_format !!> Set the file format of the PNM image. procedure , private :: set_magicnumber !!> Set the magic number of the PNM image. procedure , private :: set_width !!> Set the width of the PNM image. procedure , private :: set_height !!> Set the height of the PNM image. procedure , private :: set_comment !!> Set a comment for the PNM image. procedure , private :: set_max_color !!> Set the maximum color value of the PNM image. procedure , private :: set_header !!> Set the header of the PNM image. procedure , private :: allocate_pixels !!> Allocate memory for the pixels of the PNM image. procedure , private :: check_pixel_range !!> Check if the pixel values are within the valid range. procedure , private :: set_pixels !!> Set the pixel values of the PNM image. ! Procedures for setting individual attributes procedure :: get_format !!> Get the encoding of the PNM image. ! High-level procedures for working with PNM images procedure :: set_pnm !!> Set the attributes of the PNM image. procedure :: print_info !!> Display information about the image (dimensions, aspect ratio, etc.). procedure :: import_pnm !!> Read an image from a file. procedure :: export_pnm !!> Write an image to a file. procedure :: finalize => deallocate_pnm !!> Clean up allocated memory for the PNM image. ! Image manipulation procedures procedure :: negative !!> Invert the colors of the image. procedure :: brighten !!> Adjust the brightness and darkness of the image. procedure :: swap_channels !!> Swap the RGB channels of the image. procedure :: remove_channels !!> Remove one or more RGB channels from the image. procedure :: greyscale !!> Convert a color image to greyscale. procedure :: rotate !!> Rotate the image by a specified angle. procedure :: flip_horizontal !!> Flip the image horizontally. procedure :: flip_vertical !!> Flip the image vertically. procedure :: crop !!> Crop the image to a specified region. procedure :: resize !!> Resize the image to a specified size. end type format_pnm","tags":"","loc":"type/format_pnm.html"},{"title":"get_colors – ForImage","text":"private pure function get_colors(this) result(colors) Type Bound format_lut Arguments Type Intent Optional Attributes Name class( format_lut ), intent(in) :: this Return Value integer, dimension(:,:), allocatable Source Code pure function get_colors ( this ) result ( colors ) class ( format_lut ), intent ( in ) :: this integer , dimension (:,:), allocatable :: colors colors = this % colors end function get_colors","tags":"","loc":"proc/get_colors.html"},{"title":"get_dim_colors – ForImage","text":"private pure elemental function get_dim_colors(this) result(dim_colors) Type Bound format_lut Arguments Type Intent Optional Attributes Name class( format_lut ), intent(in) :: this Return Value integer Source Code pure elemental function get_dim_colors ( this ) result ( dim_colors ) class ( format_lut ), intent ( in ) :: this integer :: dim_colors dim_colors = this % dim_colors end function get_dim_colors","tags":"","loc":"proc/get_dim_colors.html"},{"title":"get_num_colors – ForImage","text":"private pure elemental function get_num_colors(this) result(num_colors) Type Bound format_lut Arguments Type Intent Optional Attributes Name class( format_lut ), intent(in) :: this Return Value integer Called by proc~~get_num_colors~~CalledByGraph proc~get_num_colors format_lut%get_num_colors proc~export format_lut%export proc~export->proc~get_num_colors program~test15 test15 program~test15->proc~export program~test16 test16 program~test16->proc~export Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure elemental function get_num_colors ( this ) result ( num_colors ) class ( format_lut ), intent ( in ) :: this integer :: num_colors num_colors = this % num_colors end function get_num_colors","tags":"","loc":"proc/get_num_colors.html"},{"title":"allocate_colors – ForImage","text":"private pure elemental subroutine allocate_colors(this) Type Bound format_lut Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this Called by proc~~allocate_colors~~CalledByGraph proc~allocate_colors format_lut%allocate_colors proc~import format_lut%import proc~import->proc~allocate_colors proc~set format_lut%set proc~set->proc~allocate_colors program~test15 test15 program~test15->proc~set Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure elemental subroutine allocate_colors ( this ) class ( format_lut ), intent ( inout ) :: this if ( allocated ( this % colors )) deallocate ( this % colors ) allocate ( this % colors ( this % num_colors , this % dim_colors )) end subroutine allocate_colors","tags":"","loc":"proc/allocate_colors.html"},{"title":"deallocate_lut – ForImage","text":"private pure elemental subroutine deallocate_lut(this) Type Bound format_lut Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this Called by proc~~deallocate_lut~~CalledByGraph proc~deallocate_lut format_lut%deallocate_lut program~test15 test15 program~test15->proc~deallocate_lut program~test16 test16 program~test16->proc~deallocate_lut Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure elemental subroutine deallocate_lut ( this ) class ( format_lut ), intent ( inout ) :: this if ( allocated ( this % colors )) deallocate ( this % colors ) end subroutine deallocate_lut","tags":"","loc":"proc/deallocate_lut.html"},{"title":"export – ForImage","text":"private impure subroutine export(this, file_name) Type Bound format_lut Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this character(len=*), intent(in) :: file_name Calls proc~~export~~CallsGraph proc~export format_lut%export proc~get_num_colors format_lut%get_num_colors proc~export->proc~get_num_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~export~~CalledByGraph proc~export format_lut%export program~test15 test15 program~test15->proc~export program~test16 test16 program~test16->proc~export Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine export ( this , file_name ) class ( format_lut ), intent ( inout ) :: this character ( * ), intent ( in ) :: file_name integer :: nunit , i integer , dimension ( this % dim_colors ) :: buffer integer :: iostat open ( newunit = nunit , file = file_name // '.lut' , status = 'replace' , action = 'write' , iostat = iostat ) if ( iostat /= 0 ) error stop 'Error opening the file.' do i = 1 , this % get_num_colors () buffer = this % colors ( i ,:) write ( nunit , '(*(I3,1x))' ) buffer end do close ( nunit ) end subroutine export","tags":"","loc":"proc/export.html"},{"title":"import – ForImage","text":"private impure subroutine import(this, file_name, dim_colors) Type Bound format_lut Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this character(len=*), intent(in) :: file_name integer, intent(in) :: dim_colors Calls proc~~import~~CallsGraph proc~import format_lut%import proc~allocate_colors format_lut%allocate_colors proc~import->proc~allocate_colors proc~set_dim_colors format_lut%set_dim_colors proc~import->proc~set_dim_colors proc~set_num_colors format_lut%set_num_colors proc~import->proc~set_num_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine import ( this , file_name , dim_colors ) class ( format_lut ), intent ( inout ) :: this character ( * ), intent ( in ) :: file_name integer , intent ( in ) :: dim_colors integer , dimension ( 1 , dim_colors ) :: temp integer :: nunit , iostat , num_rows , i logical :: file_exists integer , dimension ( dim_colors ) :: buffer inquire ( file = file_name // '.lut' , exist = file_exists ) if ( file_exists ) then open ( newunit = nunit , file = file_name // '.lut' , status = 'old' , action = 'read' , iostat = iostat ) if ( iostat /= 0 ) error stop 'Error opening the file.' num_rows = 0 do read ( nunit , * , iostat = iostat ) temp (:,:) if ( iostat /= 0 ) exit num_rows = num_rows + 1 end do call this % set_num_colors ( num_rows ) call this % set_dim_colors ( dim_colors ) call this % allocate_colors () rewind ( nunit ) do i = 1 , num_rows read ( nunit , * ) buffer this % colors ( i ,:) = buffer end do close ( nunit ) else error stop 'File ' // file_name // '.lut' // ' does not exist!' end if end subroutine import","tags":"","loc":"proc/import.html"},{"title":"set – ForImage","text":"private pure subroutine set(this, num_colors, dim_colors, colors) Type Bound format_lut Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this integer, intent(in) :: num_colors integer, intent(in) :: dim_colors integer, intent(in), dimension(:,:) :: colors Calls proc~~set~~CallsGraph proc~set format_lut%set proc~allocate_colors format_lut%allocate_colors proc~set->proc~allocate_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~set~~CalledByGraph proc~set format_lut%set program~test15 test15 program~test15->proc~set Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure subroutine set ( this , num_colors , dim_colors , colors ) class ( format_lut ), intent ( inout ) :: this integer , intent ( in ) :: num_colors , dim_colors integer , dimension (:,:), intent ( in ) :: colors this % num_colors = num_colors this % dim_colors = dim_colors call this % allocate_colors () this % colors = colors end subroutine set","tags":"","loc":"proc/set.html"},{"title":"set_colors – ForImage","text":"private pure subroutine set_colors(this, colors) Type Bound format_lut Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this integer, intent(in), dimension(:,:) :: colors Source Code pure subroutine set_colors ( this , colors ) class ( format_lut ), intent ( inout ) :: this integer , dimension (:,:), intent ( in ) :: colors this % colors = colors end subroutine set_colors","tags":"","loc":"proc/set_colors.html"},{"title":"set_dim_colors – ForImage","text":"private pure elemental subroutine set_dim_colors(this, dim_colors) Type Bound format_lut Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this integer, intent(in) :: dim_colors Called by proc~~set_dim_colors~~CalledByGraph proc~set_dim_colors format_lut%set_dim_colors proc~import format_lut%import proc~import->proc~set_dim_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure elemental subroutine set_dim_colors ( this , dim_colors ) class ( format_lut ), intent ( inout ) :: this integer , intent ( in ) :: dim_colors this % dim_colors = dim_colors end subroutine set_dim_colors","tags":"","loc":"proc/set_dim_colors.html"},{"title":"set_num_colors – ForImage","text":"private pure elemental subroutine set_num_colors(this, num_colors) Type Bound format_lut Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this integer, intent(in) :: num_colors Called by proc~~set_num_colors~~CalledByGraph proc~set_num_colors format_lut%set_num_colors proc~import format_lut%import proc~import->proc~set_num_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure elemental subroutine set_num_colors ( this , num_colors ) class ( format_lut ), intent ( inout ) :: this integer , intent ( in ) :: num_colors this % num_colors = num_colors end subroutine set_num_colors","tags":"","loc":"proc/set_num_colors.html"},{"title":"cmyk_to_rgb – ForImage","text":"private pure elemental subroutine cmyk_to_rgb(c, m, y, k, r, g, b) Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: c integer(kind=ik), intent(in) :: m integer(kind=ik), intent(in) :: y integer(kind=ik), intent(in) :: k integer(kind=ik), intent(out) :: r integer(kind=ik), intent(out) :: g integer(kind=ik), intent(out) :: b Called by proc~~cmyk_to_rgb~~CalledByGraph proc~cmyk_to_rgb cmyk_to_rgb proc~convert color%convert proc~convert->proc~cmyk_to_rgb proc~initialize_colors initialize_colors proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~convert proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~demo_color->proc~set~2 program~example26 example26 program~example26->proc~convert program~example26->proc~set~2 program~example27 example27 program~example27->proc~convert program~example27->proc~find_nearest program~example27->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name color%set_by_name proc~set_by_name->proc~initialize_colors proc~set~2->proc~set_by_name program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors program~example28 example28 program~example28->proc~set~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine cmyk_to_rgb ( c , m , y , k , r , g , b ) integer ( ik ), intent ( in ) :: c , m , y , k integer ( ik ), intent ( out ) :: r , g , b real ( rk ) :: cr , mg , yl cr = real ( c , kind = rk ) / 10 0.0_rk mg = real ( m , kind = rk ) / 10 0.0_rk yl = real ( y , kind = rk ) / 10 0.0_rk r = nint ( 25 5.0_rk * ( 1.0_rk - cr ) * ( 1.0_rk - real ( k , kind = rk ) / 10 0.0_rk ), kind = ik ) g = nint ( 25 5.0_rk * ( 1.0_rk - mg ) * ( 1.0_rk - real ( k , kind = rk ) / 10 0.0_rk ), kind = ik ) b = nint ( 25 5.0_rk * ( 1.0_rk - yl ) * ( 1.0_rk - real ( k , kind = rk ) / 10 0.0_rk ), kind = ik ) end subroutine cmyk_to_rgb","tags":"","loc":"proc/cmyk_to_rgb.html"},{"title":"convert – ForImage","text":"private pure elemental subroutine convert(this, to) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in) :: to Calls proc~~convert~~CallsGraph proc~convert color%convert proc~cmyk_to_rgb cmyk_to_rgb proc~convert->proc~cmyk_to_rgb proc~decimal_to_rgb decimal_to_rgb proc~convert->proc~decimal_to_rgb proc~hex_to_rgb hex_to_rgb proc~convert->proc~hex_to_rgb proc~hsl_to_rgb hsl_to_rgb proc~convert->proc~hsl_to_rgb proc~hsv_to_rgb hsv_to_rgb proc~convert->proc~hsv_to_rgb proc~rgb_to_cmyk rgb_to_cmyk proc~convert->proc~rgb_to_cmyk proc~rgb_to_decimal rgb_to_decimal proc~convert->proc~rgb_to_decimal proc~rgb_to_hex rgb_to_hex proc~convert->proc~rgb_to_hex proc~rgb_to_hsl rgb_to_hsl proc~convert->proc~rgb_to_hsl proc~rgb_to_hsv rgb_to_hsv proc~convert->proc~rgb_to_hsv proc~rgb_to_xyz rgb_to_xyz proc~convert->proc~rgb_to_xyz proc~xyz_to_rgb xyz_to_rgb proc~convert->proc~xyz_to_rgb Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~convert~~CalledByGraph proc~convert color%convert proc~initialize_colors initialize_colors proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~convert proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~demo_color->proc~set~2 program~example26 example26 program~example26->proc~convert program~example26->proc~set~2 program~example27 example27 program~example27->proc~convert program~example27->proc~find_nearest program~example27->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name color%set_by_name proc~set_by_name->proc~initialize_colors proc~set~2->proc~set_by_name program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors program~example28 example28 program~example28->proc~set~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine convert ( this , to ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: to integer ( ik ) :: r , g , b select case ( to ) case ( 'rgb2hex' ) call rgb_to_hex ( this % r , this % g , this % b , this % hex ) case ( 'rgb2decimal' ) call rgb_to_decimal ( this % r , this % g , this % b , this % decimal ) case ( 'rgb2cmyk' ) call rgb_to_cmyk ( this % r , this % g , this % b , this % c , this % m , this % y , this % k ) case ( 'rgb2hsv' ) call rgb_to_hsv ( this % r , this % g , this % b , this % h , this % s , this % v ) case ( 'rgb2hsl' ) call rgb_to_hsl ( this % r , this % g , this % b , this % hl , this % sl , this % vl ) case ( 'rgb2xyz' ) call rgb_to_xyz ( this % r , this % g , this % b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'rgb2all' ) call rgb_to_hex ( this % r , this % g , this % b , this % hex ) call rgb_to_decimal ( this % r , this % g , this % b , this % decimal ) call rgb_to_cmyk ( this % r , this % g , this % b , this % c , this % m , this % y , this % k ) call rgb_to_hsv ( this % r , this % g , this % b , this % h , this % s , this % v ) call rgb_to_hsl ( this % r , this % g , this % b , this % hl , this % sl , this % vl ) call rgb_to_xyz ( this % r , this % g , this % b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'hex2rgb' ) call hex_to_rgb ( this % hex , this % r , this % g , this % b ) case ( 'hex2decimal' ) call hex_to_rgb ( this % hex , r , g , b ) call rgb_to_decimal ( r , g , b , this % decimal ) case ( 'hex2cmyk' ) call hex_to_rgb ( this % hex , r , g , b ) call rgb_to_cmyk ( r , g , b , this % c , this % m , this % y , this % k ) case ( 'hex2hsv' ) call hex_to_rgb ( this % hex , r , g , b ) call rgb_to_hsv ( r , g , b , this % h , this % s , this % v ) case ( 'hex2hsl' ) call hex_to_rgb ( this % hex , r , g , b ) call rgb_to_hsl ( r , g , b , this % hl , this % sl , this % vl ) case ( 'hex2xyz' ) call hex_to_rgb ( this % hex , r , g , b ) call rgb_to_xyz ( r , g , b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'hex2all' ) call hex_to_rgb ( this % hex , this % r , this % g , this % b ) call rgb_to_decimal ( this % r , this % g , this % b , this % decimal ) call rgb_to_cmyk ( this % r , this % g , this % b , this % c , this % m , this % y , this % k ) call rgb_to_hsv ( this % r , this % g , this % b , this % h , this % s , this % v ) call rgb_to_hsl ( this % r , this % g , this % b , this % hl , this % sl , this % vl ) call rgb_to_xyz ( this % r , this % g , this % b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'decimal2rgb' ) call decimal_to_rgb ( this % decimal , this % r , this % g , this % b ) case ( 'decimal2hex' ) call decimal_to_rgb ( this % decimal , r , g , b ) call rgb_to_hex ( r , g , b , this % hex ) case ( 'decimal2cmyk' ) call decimal_to_rgb ( this % decimal , r , g , b ) call rgb_to_cmyk ( r , g , b , this % c , this % m , this % y , this % k ) case ( 'decimal2hsv' ) call decimal_to_rgb ( this % decimal , r , g , b ) call rgb_to_hsv ( r , g , b , this % h , this % s , this % v ) case ( 'decimal2hsl' ) call decimal_to_rgb ( this % decimal , r , g , b ) call rgb_to_hsl ( r , g , b , this % hl , this % sl , this % vl ) case ( 'decimal2xyz' ) call decimal_to_rgb ( this % decimal , r , g , b ) call rgb_to_xyz ( r , g , b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'decimal2all' ) call decimal_to_rgb ( this % decimal , this % r , this % g , this % b ) call rgb_to_hex ( this % r , this % g , this % b , this % hex ) call rgb_to_cmyk ( this % r , this % g , this % b , this % c , this % m , this % y , this % k ) call rgb_to_hsv ( this % r , this % g , this % b , this % h , this % s , this % v ) call rgb_to_hsl ( this % r , this % g , this % b , this % hl , this % sl , this % vl ) call rgb_to_xyz ( this % r , this % g , this % b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'cmyk2rgb' ) call cmyk_to_rgb ( this % c , this % m , this % y , this % k , this % r , this % g , this % b ) case ( 'cmyk2hex' ) call cmyk_to_rgb ( this % c , this % m , this % y , this % k , r , g , b ) call rgb_to_hex ( r , g , b , this % hex ) case ( 'cmyk2decimal' ) call cmyk_to_rgb ( this % c , this % m , this % y , this % k , r , g , b ) call rgb_to_decimal ( r , g , b , this % decimal ) case ( 'cmyk2hsv' ) call cmyk_to_rgb ( this % c , this % m , this % y , this % k , r , g , b ) call rgb_to_hsv ( r , g , b , this % h , this % s , this % v ) case ( 'cmyk2hsl' ) call cmyk_to_rgb ( this % c , this % m , this % y , this % k , r , g , b ) call rgb_to_hsl ( r , g , b , this % hl , this % sl , this % vl ) case ( 'cmyk2xyz' ) call cmyk_to_rgb ( this % c , this % m , this % y , this % k , r , g , b ) call rgb_to_xyz ( r , g , b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'cmyk2all' ) call cmyk_to_rgb ( this % c , this % m , this % y , this % k , this % r , this % g , this % b ) call rgb_to_hex ( this % r , this % g , this % b , this % hex ) call rgb_to_decimal ( this % r , this % g , this % b , this % decimal ) call rgb_to_hsv ( this % r , this % g , this % b , this % h , this % s , this % v ) call rgb_to_hsl ( this % r , this % g , this % b , this % hl , this % sl , this % vl ) call rgb_to_xyz ( this % r , this % g , this % b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'hsv2rgb' ) call hsv_to_rgb ( this % h , this % s , this % v , this % r , this % g , this % b ) case ( 'hsv2hex' ) call hsv_to_rgb ( this % h , this % s , this % v , r , g , b ) call rgb_to_hex ( r , g , b , this % hex ) case ( 'hsv2decimal' ) call hsv_to_rgb ( this % h , this % s , this % v , r , g , b ) call rgb_to_decimal ( r , g , b , this % decimal ) case ( 'hsv2cmyk' ) call hsv_to_rgb ( this % h , this % s , this % v , r , g , b ) call rgb_to_cmyk ( r , g , b , this % c , this % m , this % y , this % k ) case ( 'hsv2hsl' ) call hsv_to_rgb ( this % h , this % s , this % v , r , g , b ) call rgb_to_hsl ( r , g , b , this % hl , this % sl , this % vl ) case ( 'hsv2xyz' ) call hsv_to_rgb ( this % h , this % s , this % v , r , g , b ) call rgb_to_xyz ( r , g , b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'hsv2all' ) call hsv_to_rgb ( this % h , this % s , this % v , this % r , this % g , this % b ) call rgb_to_hex ( this % r , this % g , this % b , this % hex ) call rgb_to_decimal ( this % r , this % g , this % b , this % decimal ) call rgb_to_cmyk ( this % r , this % g , this % b , this % c , this % m , this % y , this % k ) call rgb_to_hsl ( this % r , this % g , this % b , this % hl , this % sl , this % vl ) call rgb_to_xyz ( this % r , this % g , this % b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'hsl2hsv' ) call hsl_to_rgb ( this % hl , this % sl , this % vl , r , g , b ) call rgb_to_hsv ( r , g , b , this % h , this % s , this % v ) case ( 'hsl2rgb' ) call hsl_to_rgb ( this % hl , this % sl , this % vl , this % r , this % g , this % b ) case ( 'hsl2hex' ) call hsl_to_rgb ( this % hl , this % sl , this % vl , r , g , b ) call rgb_to_hex ( r , g , b , this % hex ) case ( 'hsl2decimal' ) call hsl_to_rgb ( this % hl , this % sl , this % vl , r , g , b ) call rgb_to_decimal ( r , g , b , this % decimal ) case ( 'hsl2cmyk' ) call hsl_to_rgb ( this % hl , this % sl , this % vl , r , g , b ) call rgb_to_cmyk ( r , g , b , this % c , this % m , this % y , this % k ) case ( 'hsl2xyz' ) call hsl_to_rgb ( this % hl , this % sl , this % vl , r , g , b ) call rgb_to_xyz ( r , g , b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'hsl2all' ) call hsl_to_rgb ( this % hl , this % sl , this % vl , this % r , this % g , this % b ) call rgb_to_hex ( this % r , this % g , this % b , this % hex ) call rgb_to_decimal ( this % r , this % g , this % b , this % decimal ) call rgb_to_cmyk ( this % r , this % g , this % b , this % c , this % m , this % y , this % k ) call rgb_to_hsv ( this % r , this % g , this % b , this % h , this % s , this % v ) call rgb_to_xyz ( this % r , this % g , this % b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'xyz2rgb' ) call xyz_to_rgb ( this % xyz_x , this % xyz_y , this % xyz_z , this % r , this % g , this % b ) case ( 'xyz2hex' ) call xyz_to_rgb ( this % xyz_x , this % xyz_y , this % xyz_z , r , g , b ) call rgb_to_hex ( r , g , b , this % hex ) case ( 'xyz2decimal' ) call xyz_to_rgb ( this % xyz_x , this % xyz_y , this % xyz_z , r , g , b ) call rgb_to_decimal ( r , g , b , this % decimal ) case ( 'xyz2cmyk' ) call xyz_to_rgb ( this % xyz_x , this % xyz_y , this % xyz_z , r , g , b ) call rgb_to_cmyk ( r , g , b , this % c , this % m , this % y , this % k ) case ( 'xyz2hsv' ) call xyz_to_rgb ( this % xyz_x , this % xyz_y , this % xyz_z , r , g , b ) call rgb_to_hsv ( r , g , b , this % h , this % s , this % v ) case ( 'xyz2hsl' ) call xyz_to_rgb ( this % xyz_x , this % xyz_y , this % xyz_z , r , g , b ) call rgb_to_hsl ( r , g , b , this % hl , this % sl , this % vl ) case ( 'xyz2all' ) call xyz_to_rgb ( this % xyz_x , this % xyz_y , this % xyz_z , this % r , this % g , this % b ) call rgb_to_hex ( this % r , this % g , this % b , this % hex ) call rgb_to_decimal ( this % r , this % g , this % b , this % decimal ) call rgb_to_cmyk ( this % r , this % g , this % b , this % c , this % m , this % y , this % k ) call rgb_to_hsv ( this % r , this % g , this % b , this % h , this % s , this % v ) call rgb_to_hsl ( this % r , this % g , this % b , this % hl , this % sl , this % vl ) end select end subroutine convert","tags":"","loc":"proc/convert.html"},{"title":"copy_color – ForImage","text":"private pure elemental subroutine copy_color(this, from) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this class( color ), intent(in) :: from Source Code elemental pure subroutine copy_color ( this , from ) class ( color ), intent ( inout ) :: this class ( color ), intent ( in ) :: from this % r = from % r this % g = from % g this % b = from % b this % c = from % c this % m = from % m this % y = from % y this % k = from % k this % decimal = from % decimal this % hex = from % hex this % h = from % h this % s = from % s this % v = from % v this % hl = from % hl this % sl = from % sl this % vl = from % vl this % color_name = from % color_name end subroutine copy_color","tags":"","loc":"proc/copy_color.html"},{"title":"decimal_to_rgb – ForImage","text":"private pure elemental subroutine decimal_to_rgb(decimal, r, g, b) Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: decimal integer(kind=ik), intent(out) :: r integer(kind=ik), intent(out) :: g integer(kind=ik), intent(out) :: b Called by proc~~decimal_to_rgb~~CalledByGraph proc~decimal_to_rgb decimal_to_rgb proc~convert color%convert proc~convert->proc~decimal_to_rgb proc~initialize_colors initialize_colors proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~convert proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~demo_color->proc~set~2 program~example26 example26 program~example26->proc~convert program~example26->proc~set~2 program~example27 example27 program~example27->proc~convert program~example27->proc~find_nearest program~example27->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name color%set_by_name proc~set_by_name->proc~initialize_colors proc~set~2->proc~set_by_name program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors program~example28 example28 program~example28->proc~set~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine decimal_to_rgb ( decimal , r , g , b ) integer ( ik ), intent ( in ) :: decimal integer ( ik ), intent ( out ) :: r , g , b r = mod ( decimal / 65536_ik , 256_ik ) g = mod ( decimal / 256_ik , 256_ik ) b = mod ( decimal , 256_ik ) end subroutine decimal_to_rgb","tags":"","loc":"proc/decimal_to_rgb.html"},{"title":"find_nearest – ForImage","text":"private pure elemental subroutine find_nearest(this, nearest_color) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this type( color ), intent(out) :: nearest_color Calls proc~~find_nearest~~CallsGraph proc~find_nearest color%find_nearest proc~get_rgb color%get_rgb proc~find_nearest->proc~get_rgb proc~initialize_colors initialize_colors proc~find_nearest->proc~initialize_colors proc~convert color%convert proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 proc~cmyk_to_rgb cmyk_to_rgb proc~convert->proc~cmyk_to_rgb proc~decimal_to_rgb decimal_to_rgb proc~convert->proc~decimal_to_rgb proc~hex_to_rgb hex_to_rgb proc~convert->proc~hex_to_rgb proc~hsl_to_rgb hsl_to_rgb proc~convert->proc~hsl_to_rgb proc~hsv_to_rgb hsv_to_rgb proc~convert->proc~hsv_to_rgb proc~rgb_to_cmyk rgb_to_cmyk proc~convert->proc~rgb_to_cmyk proc~rgb_to_decimal rgb_to_decimal proc~convert->proc~rgb_to_decimal proc~rgb_to_hex rgb_to_hex proc~convert->proc~rgb_to_hex proc~rgb_to_hsl rgb_to_hsl proc~convert->proc~rgb_to_hsl proc~rgb_to_hsv rgb_to_hsv proc~convert->proc~rgb_to_hsv proc~rgb_to_xyz rgb_to_xyz proc~convert->proc~rgb_to_xyz proc~xyz_to_rgb xyz_to_rgb proc~convert->proc~xyz_to_rgb proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~set_cmyk color%set_cmyk proc~set~2->proc~set_cmyk proc~set_decimal color%set_decimal proc~set~2->proc~set_decimal proc~set_hex color%set_hex proc~set~2->proc~set_hex proc~set_hsl color%set_hsl proc~set~2->proc~set_hsl proc~set_hsv color%set_hsv proc~set~2->proc~set_hsv proc~set_name color%set_name proc~set~2->proc~set_name proc~set_rgb color%set_rgb proc~set~2->proc~set_rgb proc~set_xyz color%set_xyz proc~set~2->proc~set_xyz proc~set_by_name->proc~initialize_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~find_nearest~~CalledByGraph proc~find_nearest color%find_nearest program~demo_color demo_color program~demo_color->proc~find_nearest program~example27 example27 program~example27->proc~find_nearest Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine find_nearest ( this , nearest_color ) class ( color ), intent ( inout ) :: this type ( color ), intent ( out ) :: nearest_color integer ( ik ) :: i , closestColorIndex , ri , gi , bi real ( rk ) :: dist , min_dist type ( color ), dimension (:), allocatable :: colors call initialize_colors ( colors ) min_dist = huge ( min_dist ) closestColorIndex = 0 do concurrent ( i = 1 : size ( colors )) call colors ( i )% get_rgb ( ri , gi , bi ) dist = sqrt (& ( real (( ri - this % r ), kind = rk ) / 25 5.0_rk ) ** 2 & + ( real (( gi - this % g ), kind = rk ) / 25 5.0_rk ) ** 2 & + ( real (( bi - this % b ), kind = rk ) / 25 5.0_rk ) ** 2 & ) if ( dist < min_dist ) then min_dist = dist closestColorIndex = i end if end do if ( closestColorIndex == 0 ) then error stop 'error: no color found' else nearest_color = colors ( closestColorIndex ) end if end subroutine find_nearest","tags":"","loc":"proc/find_nearest.html"},{"title":"get – ForImage","text":"private pure elemental subroutine get(this, name, r, g, b, c, m, y, k, decimal, hex, h, s, v, hl, sl, vl, xyz_x, xyz_y, xyz_z) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(out), optional :: name integer(kind=ik), intent(out), optional :: r integer(kind=ik), intent(out), optional :: g integer(kind=ik), intent(out), optional :: b integer(kind=ik), intent(out), optional :: c integer(kind=ik), intent(out), optional :: m integer(kind=ik), intent(out), optional :: y integer(kind=ik), intent(out), optional :: k integer(kind=ik), intent(out), optional :: decimal character(len=7), intent(out), optional :: hex real(kind=rk), intent(out), optional :: h real(kind=rk), intent(out), optional :: s real(kind=rk), intent(out), optional :: v real(kind=rk), intent(out), optional :: hl real(kind=rk), intent(out), optional :: sl real(kind=rk), intent(out), optional :: vl real(kind=rk), intent(out), optional :: xyz_x real(kind=rk), intent(out), optional :: xyz_y real(kind=rk), intent(out), optional :: xyz_z Calls proc~~get~~CallsGraph proc~get color%get proc~get_cmyk color%get_cmyk proc~get->proc~get_cmyk proc~get_decimal color%get_decimal proc~get->proc~get_decimal proc~get_hex color%get_hex proc~get->proc~get_hex proc~get_hsl color%get_hsl proc~get->proc~get_hsl proc~get_hsv color%get_hsv proc~get->proc~get_hsv proc~get_name color%get_name proc~get->proc~get_name proc~get_rgb color%get_rgb proc~get->proc~get_rgb proc~get_xyz color%get_xyz proc~get->proc~get_xyz Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~get~~CalledByGraph proc~get color%get program~demo_color demo_color program~demo_color->proc~get program~example26 example26 program~example26->proc~get Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine get ( this , name , r , g , b , c , m , y , k , decimal , hex , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( out ), optional :: name integer ( ik ), intent ( out ), optional :: r , g , b , c , m , y , k , decimal character ( len = 7 ), intent ( out ), optional :: hex real ( rk ), intent ( out ), optional :: h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z if ( present ( name )) call this % get_name ( name ) if ( present ( r ) . and . present ( g ) . and . present ( b )) call this % get_rgb ( r , g , b ) if ( present ( c ) . and . present ( m ) . and . present ( y ) . and . present ( k )) call this % get_cmyk ( c , m , y , k ) if ( present ( decimal )) call this % get_decimal ( decimal ) if ( present ( hex )) call this % get_hex ( hex ) if ( present ( h ) . and . present ( s ) . and . present ( v )) call this % get_hsv ( h , s , v ) if ( present ( hl ) . and . present ( sl ) . and . present ( vl )) call this % get_hsl ( hl , sl , vl ) if ( present ( xyz_x ) . and . present ( xyz_y ) . and . present ( xyz_z )) call this % get_xyz ( xyz_x , xyz_y , xyz_z ) end subroutine get","tags":"","loc":"proc/get.html"},{"title":"get_cmyk – ForImage","text":"private pure elemental subroutine get_cmyk(this, c, m, y, k) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this integer(kind=ik), intent(out) :: c integer(kind=ik), intent(out) :: m integer(kind=ik), intent(out) :: y integer(kind=ik), intent(out) :: k Called by proc~~get_cmyk~~CalledByGraph proc~get_cmyk color%get_cmyk proc~get color%get proc~get->proc~get_cmyk program~demo_color demo_color program~demo_color->proc~get program~example26 example26 program~example26->proc~get Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine get_cmyk ( this , c , m , y , k ) class ( color ), intent ( in ) :: this integer ( ik ), intent ( out ) :: c , m , y , k c = this % c m = this % m y = this % y k = this % k end subroutine get_cmyk","tags":"","loc":"proc/get_cmyk.html"},{"title":"get_decimal – ForImage","text":"private pure elemental subroutine get_decimal(this, decimal) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this integer(kind=ik), intent(out) :: decimal Called by proc~~get_decimal~~CalledByGraph proc~get_decimal color%get_decimal proc~get color%get proc~get->proc~get_decimal program~demo_color demo_color program~demo_color->proc~get program~example26 example26 program~example26->proc~get Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine get_decimal ( this , decimal ) class ( color ), intent ( in ) :: this integer ( ik ), intent ( out ) :: decimal decimal = this % decimal end subroutine get_decimal","tags":"","loc":"proc/get_decimal.html"},{"title":"get_hex – ForImage","text":"private pure elemental subroutine get_hex(this, hex) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this character(len=*), intent(out) :: hex Called by proc~~get_hex~~CalledByGraph proc~get_hex color%get_hex proc~get color%get proc~get->proc~get_hex program~demo_color demo_color program~demo_color->proc~get program~example26 example26 program~example26->proc~get Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine get_hex ( this , hex ) class ( color ), intent ( in ) :: this character ( len =* ), intent ( out ) :: hex hex = this % hex end subroutine get_hex","tags":"","loc":"proc/get_hex.html"},{"title":"get_hsl – ForImage","text":"private pure elemental subroutine get_hsl(this, h, s, l) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this real(kind=rk), intent(out) :: h real(kind=rk), intent(out) :: s real(kind=rk), intent(out) :: l Called by proc~~get_hsl~~CalledByGraph proc~get_hsl color%get_hsl proc~get color%get proc~get->proc~get_hsl program~demo_color demo_color program~demo_color->proc~get program~example26 example26 program~example26->proc~get Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine get_hsl ( this , h , s , l ) class ( color ), intent ( in ) :: this real ( rk ), intent ( out ) :: h , s , l h = this % hl s = this % sl l = this % vl end subroutine get_hsl","tags":"","loc":"proc/get_hsl.html"},{"title":"get_hsv – ForImage","text":"private pure elemental subroutine get_hsv(this, h, s, v) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this real(kind=rk), intent(out) :: h real(kind=rk), intent(out) :: s real(kind=rk), intent(out) :: v Called by proc~~get_hsv~~CalledByGraph proc~get_hsv color%get_hsv proc~get color%get proc~get->proc~get_hsv program~demo_color demo_color program~demo_color->proc~get program~example26 example26 program~example26->proc~get Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine get_hsv ( this , h , s , v ) class ( color ), intent ( in ) :: this real ( rk ), intent ( out ) :: h , s , v h = this % h s = this % s v = this % v end subroutine get_hsv","tags":"","loc":"proc/get_hsv.html"},{"title":"get_name – ForImage","text":"private pure elemental subroutine get_name(this, name) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this character(len=*), intent(out) :: name Called by proc~~get_name~~CalledByGraph proc~get_name color%get_name proc~get color%get proc~get->proc~get_name program~demo_color demo_color program~demo_color->proc~get program~example26 example26 program~example26->proc~get Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine get_name ( this , name ) class ( color ), intent ( in ) :: this character ( len =* ), intent ( out ) :: name name = this % color_name end subroutine get_name","tags":"","loc":"proc/get_name.html"},{"title":"get_rgb – ForImage","text":"private pure elemental subroutine get_rgb(this, r, g, b) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this integer(kind=ik), intent(out) :: r integer(kind=ik), intent(out) :: g integer(kind=ik), intent(out) :: b Called by proc~~get_rgb~~CalledByGraph proc~get_rgb color%get_rgb proc~find_nearest color%find_nearest proc~find_nearest->proc~get_rgb proc~get color%get proc~get->proc~get_rgb program~demo_color demo_color program~demo_color->proc~find_nearest program~demo_color->proc~get program~example26 example26 program~example26->proc~get program~example27 example27 program~example27->proc~find_nearest Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine get_rgb ( this , r , g , b ) class ( color ), intent ( in ) :: this integer ( ik ), intent ( out ) :: r , g , b r = this % r g = this % g b = this % b end subroutine get_rgb","tags":"","loc":"proc/get_rgb.html"},{"title":"get_xyz – ForImage","text":"private pure elemental subroutine get_xyz(this, x, y, z) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this real(kind=rk), intent(out) :: x real(kind=rk), intent(out) :: y real(kind=rk), intent(out) :: z Called by proc~~get_xyz~~CalledByGraph proc~get_xyz color%get_xyz proc~get color%get proc~get->proc~get_xyz program~demo_color demo_color program~demo_color->proc~get program~example26 example26 program~example26->proc~get Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine get_xyz ( this , x , y , z ) class ( color ), intent ( in ) :: this real ( rk ), intent ( out ) :: x , y , z x = this % xyz_x y = this % xyz_y z = this % xyz_z end subroutine get_xyz","tags":"","loc":"proc/get_xyz.html"},{"title":"hex_to_rgb – ForImage","text":"private pure elemental subroutine hex_to_rgb(hex, r, g, b) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: hex integer(kind=ik), intent(out) :: r integer(kind=ik), intent(out) :: g integer(kind=ik), intent(out) :: b Called by proc~~hex_to_rgb~~CalledByGraph proc~hex_to_rgb hex_to_rgb proc~convert color%convert proc~convert->proc~hex_to_rgb proc~initialize_colors initialize_colors proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~convert proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~demo_color->proc~set~2 program~example26 example26 program~example26->proc~convert program~example26->proc~set~2 program~example27 example27 program~example27->proc~convert program~example27->proc~find_nearest program~example27->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name color%set_by_name proc~set_by_name->proc~initialize_colors proc~set~2->proc~set_by_name program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors program~example28 example28 program~example28->proc~set~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine hex_to_rgb ( hex , r , g , b ) character ( len =* ), intent ( in ) :: hex integer ( ik ), intent ( out ) :: r , g , b read ( hex ( 2 : 3 ), '(z2)' ) r read ( hex ( 4 : 5 ), '(z2)' ) g read ( hex ( 6 : 7 ), '(z2)' ) b end subroutine hex_to_rgb","tags":"","loc":"proc/hex_to_rgb.html"},{"title":"hsl_to_rgb – ForImage","text":"private pure elemental subroutine hsl_to_rgb(h, s, l, r, g, b) Arguments Type Intent Optional Attributes Name real(kind=rk), intent(in) :: h real(kind=rk), intent(in) :: s real(kind=rk), intent(in) :: l integer(kind=ik), intent(out) :: r integer(kind=ik), intent(out) :: g integer(kind=ik), intent(out) :: b Called by proc~~hsl_to_rgb~~CalledByGraph proc~hsl_to_rgb hsl_to_rgb proc~convert color%convert proc~convert->proc~hsl_to_rgb proc~initialize_colors initialize_colors proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~convert proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~demo_color->proc~set~2 program~example26 example26 program~example26->proc~convert program~example26->proc~set~2 program~example27 example27 program~example27->proc~convert program~example27->proc~find_nearest program~example27->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name color%set_by_name proc~set_by_name->proc~initialize_colors proc~set~2->proc~set_by_name program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors program~example28 example28 program~example28->proc~set~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine hsl_to_rgb ( h , s , l , r , g , b ) real ( rk ), intent ( in ) :: h , s , l integer ( ik ), intent ( out ) :: r , g , b real ( rk ) :: hn , sn , ln real ( rk ) :: c , h_prime , x , m real ( rk ) :: r1 , g1 , b1 hn = h sn = s / 10 0.0_rk ln = l / 10 0.0_rk c = ( 1.0_rk - abs ( 2.0_rk * ln - 1.0_rk )) * sn h_prime = mod ( hn , 36 0.0_rk ) / 6 0.0_rk x = c * ( 1.0_rk - abs ( mod ( h_prime , 2.0_rk ) - 1.0_rk )) select case ( int ( h_prime )) case ( 0 ) r1 = c g1 = x b1 = 0.0_rk case ( 1 ) r1 = x g1 = c b1 = 0.0_rk case ( 2 ) r1 = 0.0_rk g1 = c b1 = x case ( 3 ) r1 = 0.0_rk g1 = x b1 = c case ( 4 ) r1 = x g1 = 0.0_rk b1 = c case ( 5 ) r1 = c g1 = 0.0_rk b1 = x end select m = ln - c / 2.0_rk r = nint ( r1 * 25 5.0_rk + m * 25 5.0_rk , kind = ik ) g = nint ( g1 * 25 5.0_rk + m * 25 5.0_rk , kind = ik ) b = nint ( b1 * 25 5.0_rk + m * 25 5.0_rk , kind = ik ) end subroutine hsl_to_rgb","tags":"","loc":"proc/hsl_to_rgb.html"},{"title":"hsv_to_rgb – ForImage","text":"private pure elemental subroutine hsv_to_rgb(h, s, v, r, g, b) Arguments Type Intent Optional Attributes Name real(kind=rk), intent(in) :: h real(kind=rk), intent(in) :: s real(kind=rk), intent(in) :: v integer(kind=ik), intent(out) :: r integer(kind=ik), intent(out) :: g integer(kind=ik), intent(out) :: b Called by proc~~hsv_to_rgb~~CalledByGraph proc~hsv_to_rgb hsv_to_rgb proc~convert color%convert proc~convert->proc~hsv_to_rgb proc~initialize_colors initialize_colors proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~convert proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~demo_color->proc~set~2 program~example26 example26 program~example26->proc~convert program~example26->proc~set~2 program~example27 example27 program~example27->proc~convert program~example27->proc~find_nearest program~example27->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name color%set_by_name proc~set_by_name->proc~initialize_colors proc~set~2->proc~set_by_name program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors program~example28 example28 program~example28->proc~set~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine hsv_to_rgb ( h , s , v , r , g , b ) real ( rk ), intent ( in ) :: h , s , v integer ( ik ), intent ( out ) :: r , g , b real ( rk ) :: c , h_prime , x , m real ( rk ) :: h_dash , r1 , g1 , b1 c = v / 10 0.0_rk * s / 10 0.0_rk h_prime = h / 6 0.0_rk h_dash = mod ( h_prime , 6.0_rk ) x = c * ( 1.0_rk - abs ( h_dash - 2.0_rk * floor ( h_dash / 2.0_rk ) - 1.0_rk )) select case ( int ( h_dash )) case ( 0 ) r1 = c g1 = x b1 = 0.0_rk case ( 1 ) r1 = x g1 = c b1 = 0.0_rk case ( 2 ) r1 = 0.0_rk g1 = c b1 = x case ( 3 ) r1 = 0.0_rk g1 = x b1 = c case ( 4 ) r1 = x g1 = 0.0_rk b1 = c case ( 5 ) r1 = c g1 = 0.0_rk b1 = x case default r1 = 0.0_rk g1 = 0.0_rk b1 = 0.0_rk end select m = v / 10 0.0_rk - c r = nint ( 25 5.0_rk * ( r1 + m ), kind = ik ) g = nint ( 25 5.0_rk * ( g1 + m ), kind = ik ) b = nint ( 25 5.0_rk * ( b1 + m ), kind = ik ) r = max ( 0 , min ( 255 , r )) g = max ( 0 , min ( 255 , g )) b = max ( 0 , min ( 255 , b )) end subroutine hsv_to_rgb","tags":"","loc":"proc/hsv_to_rgb.html"},{"title":"initialize_colors – ForImage","text":"private pure subroutine initialize_colors(colors) Arguments Type Intent Optional Attributes Name type( color ), intent(out), dimension(:), allocatable :: colors Calls proc~~initialize_colors~~CallsGraph proc~initialize_colors initialize_colors proc~convert color%convert proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 proc~cmyk_to_rgb cmyk_to_rgb proc~convert->proc~cmyk_to_rgb proc~decimal_to_rgb decimal_to_rgb proc~convert->proc~decimal_to_rgb proc~hex_to_rgb hex_to_rgb proc~convert->proc~hex_to_rgb proc~hsl_to_rgb hsl_to_rgb proc~convert->proc~hsl_to_rgb proc~hsv_to_rgb hsv_to_rgb proc~convert->proc~hsv_to_rgb proc~rgb_to_cmyk rgb_to_cmyk proc~convert->proc~rgb_to_cmyk proc~rgb_to_decimal rgb_to_decimal proc~convert->proc~rgb_to_decimal proc~rgb_to_hex rgb_to_hex proc~convert->proc~rgb_to_hex proc~rgb_to_hsl rgb_to_hsl proc~convert->proc~rgb_to_hsl proc~rgb_to_hsv rgb_to_hsv proc~convert->proc~rgb_to_hsv proc~rgb_to_xyz rgb_to_xyz proc~convert->proc~rgb_to_xyz proc~xyz_to_rgb xyz_to_rgb proc~convert->proc~xyz_to_rgb proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~set_cmyk color%set_cmyk proc~set~2->proc~set_cmyk proc~set_decimal color%set_decimal proc~set~2->proc~set_decimal proc~set_hex color%set_hex proc~set~2->proc~set_hex proc~set_hsl color%set_hsl proc~set~2->proc~set_hsl proc~set_hsv color%set_hsv proc~set~2->proc~set_hsv proc~set_name color%set_name proc~set~2->proc~set_name proc~set_rgb color%set_rgb proc~set~2->proc~set_rgb proc~set_xyz color%set_xyz proc~set~2->proc~set_xyz proc~set_by_name->proc~initialize_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~initialize_colors~~CalledByGraph proc~initialize_colors initialize_colors proc~set~2 color%set proc~initialize_colors->proc~set~2 proc~find_nearest color%find_nearest proc~find_nearest->proc~initialize_colors proc~print_available_colors color%print_available_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors color%save_available_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name color%set_by_name proc~set_by_name->proc~initialize_colors proc~set~2->proc~set_by_name program~demo_color demo_color program~demo_color->proc~find_nearest program~demo_color->proc~print_available_colors program~demo_color->proc~save_available_colors program~demo_color->proc~set~2 program~example27 example27 program~example27->proc~find_nearest program~example27->proc~set~2 program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors program~example26 example26 program~example26->proc~set~2 program~example28 example28 program~example28->proc~set~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure subroutine initialize_colors ( colors ) type ( color ), intent ( out ), dimension (:), allocatable :: colors allocate ( colors ( 14 )) call colors ( 1 )% set ( name = 'red' , r = 255_ik , g = 0_ik , b = 0_ik ) call colors ( 2 )% set ( name = 'green' , r = 0_ik , g = 128_ik , b = 0_ik ) call colors ( 3 )% set ( name = 'blue' , r = 0_ik , g = 0_ik , b = 255_ik ) call colors ( 4 )% set ( name = 'yellow' , r = 255_ik , g = 255_ik , b = 0_ik ) call colors ( 5 )% set ( name = 'cyan' , r = 0_ik , g = 255_ik , b = 255_ik ) call colors ( 6 )% set ( name = 'magenta' , r = 255_ik , g = 0_ik , b = 255_ik ) call colors ( 7 )% set ( name = 'black' , r = 0_ik , g = 0_ik , b = 0_ik ) call colors ( 8 )% set ( name = 'white' , r = 255_ik , g = 255_ik , b = 255_ik ) call colors ( 9 )% set ( name = 'gray' , r = 128_ik , g = 128_ik , b = 128_ik ) call colors ( 10 )% set ( name = 'brown' , r = 165_ik , g = 42_ik , b = 42_ik ) call colors ( 11 )% set ( name = 'orange' , r = 255_ik , g = 165_ik , b = 0_ik ) call colors ( 12 )% set ( name = 'gold' , r = 255_ik , g = 215_ik , b = 0_ik ) call colors ( 13 )% set ( name = 'pink' , r = 255_ik , g = 192_ik , b = 203_ik ) call colors ( 14 )% set ( name = 'violet' , r = 138_ik , g = 43_ik , b = 226_ik ) call colors ( 1 : 14 )% convert ( 'rgb2all' ) end subroutine initialize_colors","tags":"","loc":"proc/initialize_colors.html"},{"title":"print – ForImage","text":"private impure elemental subroutine print(this, option) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in), optional :: option Calls proc~~print~~CallsGraph proc~print color%print proc~print_cmyk color%print_cmyk proc~print->proc~print_cmyk proc~print_decimal color%print_decimal proc~print->proc~print_decimal proc~print_hex color%print_hex proc~print->proc~print_hex proc~print_hsl color%print_hsl proc~print->proc~print_hsl proc~print_hsv color%print_hsv proc~print->proc~print_hsv proc~print_name color%print_name proc~print->proc~print_name proc~print_rgb color%print_rgb proc~print->proc~print_rgb proc~print_xyz color%print_xyz proc~print->proc~print_xyz Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental impure subroutine print ( this , option ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ), optional :: option if ( present ( option )) then select case ( trim ( option )) case ( 'rgb' ) call this % print_rgb () print * , '' case ( 'hex' ) call this % print_hex () print * , '' case ( 'decimal' ) call this % print_decimal () print * , '' case ( 'cmyk' ) call this % print_cmyk () print * , '' case ( 'hsv' ) call this % print_hsv () print * , '' case ( 'hsl' ) call this % print_hsl () print * , '' case ( 'name' ) call this % print_name () print * , '' case ( 'xyz' ) call this % print_xyz () print * , '' case default error stop 'error: unknown option' end select else call this % print_name () call this % print_rgb () call this % print_hex () call this % print_decimal () call this % print_cmyk () call this % print_hsv () call this % print_hsl () call this % print_xyz () print * , '' end if end subroutine print","tags":"","loc":"proc/print.html"},{"title":"print_available_colors – ForImage","text":"private impure elemental subroutine print_available_colors(this) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this Calls proc~~print_available_colors~~CallsGraph proc~print_available_colors color%print_available_colors proc~initialize_colors initialize_colors proc~print_available_colors->proc~initialize_colors proc~convert color%convert proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 proc~cmyk_to_rgb cmyk_to_rgb proc~convert->proc~cmyk_to_rgb proc~decimal_to_rgb decimal_to_rgb proc~convert->proc~decimal_to_rgb proc~hex_to_rgb hex_to_rgb proc~convert->proc~hex_to_rgb proc~hsl_to_rgb hsl_to_rgb proc~convert->proc~hsl_to_rgb proc~hsv_to_rgb hsv_to_rgb proc~convert->proc~hsv_to_rgb proc~rgb_to_cmyk rgb_to_cmyk proc~convert->proc~rgb_to_cmyk proc~rgb_to_decimal rgb_to_decimal proc~convert->proc~rgb_to_decimal proc~rgb_to_hex rgb_to_hex proc~convert->proc~rgb_to_hex proc~rgb_to_hsl rgb_to_hsl proc~convert->proc~rgb_to_hsl proc~rgb_to_hsv rgb_to_hsv proc~convert->proc~rgb_to_hsv proc~rgb_to_xyz rgb_to_xyz proc~convert->proc~rgb_to_xyz proc~xyz_to_rgb xyz_to_rgb proc~convert->proc~xyz_to_rgb proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~set_cmyk color%set_cmyk proc~set~2->proc~set_cmyk proc~set_decimal color%set_decimal proc~set~2->proc~set_decimal proc~set_hex color%set_hex proc~set~2->proc~set_hex proc~set_hsl color%set_hsl proc~set~2->proc~set_hsl proc~set_hsv color%set_hsv proc~set~2->proc~set_hsv proc~set_name color%set_name proc~set~2->proc~set_name proc~set_rgb color%set_rgb proc~set~2->proc~set_rgb proc~set_xyz color%set_xyz proc~set~2->proc~set_xyz proc~set_by_name->proc~initialize_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_available_colors~~CalledByGraph proc~print_available_colors color%print_available_colors program~demo_color demo_color program~demo_color->proc~print_available_colors program~example29 example29 program~example29->proc~print_available_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental impure subroutine print_available_colors ( this ) class ( color ), intent ( inout ) :: this type ( color ), dimension (:), allocatable :: colors call initialize_colors ( colors ) call colors (:)% print () end subroutine print_available_colors","tags":"","loc":"proc/print_available_colors.html"},{"title":"print_cmyk – ForImage","text":"private impure elemental subroutine print_cmyk(this) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this Called by proc~~print_cmyk~~CalledByGraph proc~print_cmyk color%print_cmyk proc~print color%print proc~print->proc~print_cmyk Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental impure subroutine print_cmyk ( this ) class ( color ), intent ( in ) :: this print '(a,g0,a,g0,a,g0,a,g0)' , 'cmyk: ' , this % c , ', ' , this % m , ', ' , this % y , ', ' , this % k end subroutine print_cmyk","tags":"","loc":"proc/print_cmyk.html"},{"title":"print_decimal – ForImage","text":"private impure elemental subroutine print_decimal(this) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this Called by proc~~print_decimal~~CalledByGraph proc~print_decimal color%print_decimal proc~print color%print proc~print->proc~print_decimal Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental impure subroutine print_decimal ( this ) class ( color ), intent ( in ) :: this print '(a,g0)' , 'decimal: ' , this % decimal end subroutine print_decimal","tags":"","loc":"proc/print_decimal.html"},{"title":"print_hex – ForImage","text":"private impure elemental subroutine print_hex(this) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this Called by proc~~print_hex~~CalledByGraph proc~print_hex color%print_hex proc~print color%print proc~print->proc~print_hex Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental impure subroutine print_hex ( this ) class ( color ), intent ( in ) :: this print '(a,a)' , 'hex: ' , this % hex end subroutine print_hex","tags":"","loc":"proc/print_hex.html"},{"title":"print_hsl – ForImage","text":"private impure elemental subroutine print_hsl(this) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this Called by proc~~print_hsl~~CalledByGraph proc~print_hsl color%print_hsl proc~print color%print proc~print->proc~print_hsl Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental impure subroutine print_hsl ( this ) class ( color ), intent ( in ) :: this print '(a, 3(f8.4, 2x))' , \"hsl: \" , this % hl , this % sl , this % vl end subroutine print_hsl","tags":"","loc":"proc/print_hsl.html"},{"title":"print_hsv – ForImage","text":"private impure elemental subroutine print_hsv(this) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this Called by proc~~print_hsv~~CalledByGraph proc~print_hsv color%print_hsv proc~print color%print proc~print->proc~print_hsv Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental impure subroutine print_hsv ( this ) class ( color ), intent ( in ) :: this print '(a, 3(f8.4, 2x))' , \"hsv: \" , this % h , this % s , this % v end subroutine print_hsv","tags":"","loc":"proc/print_hsv.html"},{"title":"print_name – ForImage","text":"private impure elemental subroutine print_name(this) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this Called by proc~~print_name~~CalledByGraph proc~print_name color%print_name proc~print color%print proc~print->proc~print_name Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental impure subroutine print_name ( this ) class ( color ), intent ( in ) :: this print '(a,a)' , 'color name: ' , trim ( this % color_name ) end subroutine print_name","tags":"","loc":"proc/print_name.html"},{"title":"print_rgb – ForImage","text":"private impure elemental subroutine print_rgb(this) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this Called by proc~~print_rgb~~CalledByGraph proc~print_rgb color%print_rgb proc~print color%print proc~print->proc~print_rgb Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental impure subroutine print_rgb ( this ) class ( color ), intent ( in ) :: this print '(a,g0,a,g0,a,g0)' , 'rgb: ' , this % r , ', ' , this % g , ', ' , this % b end subroutine print_rgb","tags":"","loc":"proc/print_rgb.html"},{"title":"print_xyz – ForImage","text":"private impure elemental subroutine print_xyz(this) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this Called by proc~~print_xyz~~CalledByGraph proc~print_xyz color%print_xyz proc~print color%print proc~print->proc~print_xyz Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental impure subroutine print_xyz ( this ) class ( color ), intent ( in ) :: this print '(a, 3(f8.4, 2x))' , \"xyz: \" , this % xyz_x , this % xyz_y , this % xyz_z end subroutine print_xyz","tags":"","loc":"proc/print_xyz.html"},{"title":"rgb_to_cmyk – ForImage","text":"private pure elemental subroutine rgb_to_cmyk(r, g, b, c, m, y, k) Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b integer(kind=ik), intent(out) :: c integer(kind=ik), intent(out) :: m integer(kind=ik), intent(out) :: y integer(kind=ik), intent(out) :: k Called by proc~~rgb_to_cmyk~~CalledByGraph proc~rgb_to_cmyk rgb_to_cmyk proc~convert color%convert proc~convert->proc~rgb_to_cmyk proc~initialize_colors initialize_colors proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~convert proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~demo_color->proc~set~2 program~example26 example26 program~example26->proc~convert program~example26->proc~set~2 program~example27 example27 program~example27->proc~convert program~example27->proc~find_nearest program~example27->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name color%set_by_name proc~set_by_name->proc~initialize_colors proc~set~2->proc~set_by_name program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors program~example28 example28 program~example28->proc~set~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine rgb_to_cmyk ( r , g , b , c , m , y , k ) integer ( ik ), intent ( in ) :: r , g , b integer ( ik ), intent ( out ) :: c , m , y , k real ( rk ) :: rn , gn , bn real ( rk ) :: cr , mr , yr , kr rn = r / 25 5.0_rk gn = g / 25 5.0_rk bn = b / 25 5.0_rk kr = 1.0_rk - max ( rn , gn , bn ) if ( abs ( kr - 1.0_rk ) < 1.0e-6_rk ) then cr = 0.0_rk mr = 0.0_rk yr = 0.0_rk else cr = ( 1.0_rk - rn - kr ) / ( 1.0_rk - kr ) mr = ( 1.0_rk - gn - kr ) / ( 1.0_rk - kr ) yr = ( 1.0_rk - bn - kr ) / ( 1.0_rk - kr ) end if c = nint ( cr * 10 0.0_rk , kind = ik ) m = nint ( mr * 10 0.0_rk , kind = ik ) y = nint ( yr * 10 0.0_rk , kind = ik ) k = nint ( kr * 10 0.0_rk , kind = ik ) end subroutine rgb_to_cmyk","tags":"","loc":"proc/rgb_to_cmyk.html"},{"title":"rgb_to_decimal – ForImage","text":"private pure elemental subroutine rgb_to_decimal(r, g, b, decimal) Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b integer(kind=ik), intent(out) :: decimal Called by proc~~rgb_to_decimal~~CalledByGraph proc~rgb_to_decimal rgb_to_decimal proc~convert color%convert proc~convert->proc~rgb_to_decimal proc~initialize_colors initialize_colors proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~convert proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~demo_color->proc~set~2 program~example26 example26 program~example26->proc~convert program~example26->proc~set~2 program~example27 example27 program~example27->proc~convert program~example27->proc~find_nearest program~example27->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name color%set_by_name proc~set_by_name->proc~initialize_colors proc~set~2->proc~set_by_name program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors program~example28 example28 program~example28->proc~set~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine rgb_to_decimal ( r , g , b , decimal ) implicit none integer ( ik ), intent ( in ) :: r , g , b integer ( ik ), intent ( out ) :: decimal decimal = r * 65536_ik + g * 256_ik + b end subroutine rgb_to_decimal","tags":"","loc":"proc/rgb_to_decimal.html"},{"title":"rgb_to_hex – ForImage","text":"private pure elemental subroutine rgb_to_hex(r, g, b, hex) Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b character(len=7), intent(out) :: hex Called by proc~~rgb_to_hex~~CalledByGraph proc~rgb_to_hex rgb_to_hex proc~convert color%convert proc~convert->proc~rgb_to_hex proc~initialize_colors initialize_colors proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~convert proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~demo_color->proc~set~2 program~example26 example26 program~example26->proc~convert program~example26->proc~set~2 program~example27 example27 program~example27->proc~convert program~example27->proc~find_nearest program~example27->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name color%set_by_name proc~set_by_name->proc~initialize_colors proc~set~2->proc~set_by_name program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors program~example28 example28 program~example28->proc~set~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine rgb_to_hex ( r , g , b , hex ) integer ( ik ), intent ( in ) :: r , g , b character ( len = 7 ), intent ( out ) :: hex write ( hex , '(\"#\",3(z2.2))' ) r , g , b end subroutine rgb_to_hex","tags":"","loc":"proc/rgb_to_hex.html"},{"title":"rgb_to_hsl – ForImage","text":"private pure elemental subroutine rgb_to_hsl(r, g, b, h, s, l) Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b real(kind=rk), intent(out) :: h real(kind=rk), intent(out) :: s real(kind=rk), intent(out) :: l Called by proc~~rgb_to_hsl~~CalledByGraph proc~rgb_to_hsl rgb_to_hsl proc~convert color%convert proc~convert->proc~rgb_to_hsl proc~initialize_colors initialize_colors proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~convert proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~demo_color->proc~set~2 program~example26 example26 program~example26->proc~convert program~example26->proc~set~2 program~example27 example27 program~example27->proc~convert program~example27->proc~find_nearest program~example27->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name color%set_by_name proc~set_by_name->proc~initialize_colors proc~set~2->proc~set_by_name program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors program~example28 example28 program~example28->proc~set~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine rgb_to_hsl ( r , g , b , h , s , l ) integer ( ik ), intent ( in ) :: r , g , b real ( rk ), intent ( out ) :: h , s , l real ( rk ) :: rn , gn , bn real ( rk ) :: cmax , cmin rn = real ( r , kind = rk ) / 25 5.0_rk gn = real ( g , kind = rk ) / 25 5.0_rk bn = real ( b , kind = rk ) / 25 5.0_rk cmax = max ( rn , max ( gn , bn )) cmin = min ( rn , min ( gn , bn )) l = ( cmax + cmin ) / 2.0_rk if ( abs ( cmax - cmin ) < 1e-6_rk ) then s = 0.0_rk else if ( l <= 0.5_rk ) then s = ( cmax - cmin ) / ( cmax + cmin ) else s = ( cmax - cmin ) / ( 2.0_rk - cmax - cmin ) end if end if if ( abs ( cmax - cmin ) < 1e-6_rk ) then h = 0.0_rk elseif ( abs ( cmax - rn ) < 1e-6_rk ) then h = 6 0.0_rk * mod (( gn - bn ) / ( cmax - cmin ), 6.0_rk ) else if ( abs ( cmax - gn ) < 1e-6_rk ) then h = 6 0.0_rk * (( bn - rn ) / ( cmax - cmin ) + 2.0_rk ) else if ( abs ( cmax - bn ) < 1e-6_rk ) then h = 6 0.0_rk * (( rn - gn ) / ( cmax - cmin ) + 4.0_rk ) end if if ( h < 0.0_rk ) then h = h + 36 0.0_rk end if s = s * 10 0.0_rk l = l * 10 0.0_rk end subroutine rgb_to_hsl","tags":"","loc":"proc/rgb_to_hsl.html"},{"title":"rgb_to_hsv – ForImage","text":"private pure elemental subroutine rgb_to_hsv(r, g, b, h, s, v) Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b real(kind=rk), intent(out) :: h real(kind=rk), intent(out) :: s real(kind=rk), intent(out) :: v Called by proc~~rgb_to_hsv~~CalledByGraph proc~rgb_to_hsv rgb_to_hsv proc~convert color%convert proc~convert->proc~rgb_to_hsv proc~initialize_colors initialize_colors proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~convert proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~demo_color->proc~set~2 program~example26 example26 program~example26->proc~convert program~example26->proc~set~2 program~example27 example27 program~example27->proc~convert program~example27->proc~find_nearest program~example27->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name color%set_by_name proc~set_by_name->proc~initialize_colors proc~set~2->proc~set_by_name program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors program~example28 example28 program~example28->proc~set~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine rgb_to_hsv ( r , g , b , h , s , v ) integer ( ik ), intent ( in ) :: r , g , b real ( rk ), intent ( out ) :: h , s , v real ( rk ) :: rn , gn , bn , cmax , cmin , delta rn = real ( r , kind = rk ) / 25 5.0_rk gn = real ( g , kind = rk ) / 25 5.0_rk bn = real ( b , kind = rk ) / 25 5.0_rk cmax = max ( rn , max ( gn , bn )) cmin = min ( rn , min ( gn , bn )) delta = cmax - cmin v = cmax if ( delta < 1e-6_rk ) then h = 0.0_rk s = 0.0_rk else if ( cmax > 0.0_rk ) then s = delta / cmax if ( abs ( cmax - rn ) < 1.0e-6_rk ) then h = 6 0.0_rk * mod ((( gn - bn ) / delta ), 6.0_rk ) elseif ( abs ( cmax - gn ) < 1.0e-6_rk ) then h = 6 0.0_rk * ((( bn - rn ) / delta ) + 2.0_rk ) else h = 6 0.0_rk * ((( rn - gn ) / delta ) + 4.0_rk ) end if end if if ( h < 0.0_rk ) h = h + 36 0.0_rk end if s = s * 10 0.0_rk v = v * 10 0.0_rk end subroutine rgb_to_hsv","tags":"","loc":"proc/rgb_to_hsv.html"},{"title":"rgb_to_xyz – ForImage","text":"private pure elemental subroutine rgb_to_xyz(r, g, b, x, y, z) Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b real(kind=rk), intent(out) :: x real(kind=rk), intent(out) :: y real(kind=rk), intent(out) :: z Called by proc~~rgb_to_xyz~~CalledByGraph proc~rgb_to_xyz rgb_to_xyz proc~convert color%convert proc~convert->proc~rgb_to_xyz proc~initialize_colors initialize_colors proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~convert proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~demo_color->proc~set~2 program~example26 example26 program~example26->proc~convert program~example26->proc~set~2 program~example27 example27 program~example27->proc~convert program~example27->proc~find_nearest program~example27->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name color%set_by_name proc~set_by_name->proc~initialize_colors proc~set~2->proc~set_by_name program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors program~example28 example28 program~example28->proc~set~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine rgb_to_xyz ( r , g , b , x , y , z ) integer ( ik ), intent ( in ) :: r , g , b real ( rk ), intent ( out ) :: x , y , z real ( rk ) :: rn , gn , bn ! Normalize RGB values to the range [0, 1] rn = real ( r , kind = rk ) / 25 5.0_rk gn = real ( g , kind = rk ) / 25 5.0_rk bn = real ( b , kind = rk ) / 25 5.0_rk ! Apply gamma correction if ( rn <= 0.04045_rk ) then rn = rn / 1 2.92_rk else rn = (( rn + 0.055_rk ) / 1.055_rk ) ** 2.4_rk end if if ( gn <= 0.04045_rk ) then gn = gn / 1 2.92_rk else gn = (( gn + 0.055_rk ) / 1.055_rk ) ** 2.4_rk end if if ( bn <= 0.04045_rk ) then bn = bn / 1 2.92_rk else bn = (( bn + 0.055_rk ) / 1.055_rk ) ** 2.4_rk end if ! Convert RGB to XYZ using defined transformation matrix x = 0.4124564_rk * rn + 0.3575761_rk * gn + 0.1804375_rk * bn y = 0.2126729_rk * rn + 0.7151522_rk * gn + 0.0721750_rk * bn z = 0.0193339_rk * rn + 0.1191920_rk * gn + 0.9503041_rk * bn x = x * 10 0.0_rk y = y * 10 0.0_rk z = z * 10 0.0_rk end subroutine rgb_to_xyz","tags":"","loc":"proc/rgb_to_xyz.html"},{"title":"save – ForImage","text":"private impure elemental subroutine save(this, file_name, height, width) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in), optional :: file_name integer, intent(in), optional :: height integer, intent(in), optional :: width Calls proc~~save~~CallsGraph proc~save color%save proc~export_pnm format_pnm%export_pnm proc~save->proc~export_pnm proc~set_pnm format_pnm%set_pnm proc~save->proc~set_pnm proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~allocate_pixels format_pnm%allocate_pixels proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pixels format_pnm%set_pixels proc~set_pnm->proc~set_pixels proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_height format_pnm%set_height proc~set_header->proc~set_height proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_width format_pnm%set_width proc~set_header->proc~set_width proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental impure subroutine save ( this , file_name , height , width ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ), optional :: file_name integer , intent ( in ), optional :: height , width type ( format_pnm ) :: image integer :: height_ , width_ integer ( ik ), dimension (:,:), allocatable :: px if ( present ( height )) then height_ = height else height_ = 50 end if if ( present ( width )) then width_ = width else width_ = 50 end if allocate ( px ( height_ , 3 * width_ )) px (:, 1 : 3 * width_ - 2 : 3 ) = this % r px (:, 2 : 3 * width_ - 1 : 3 ) = this % g px (:, 3 : 3 * width_ - 0 : 3 ) = this % b call image % set_pnm (& encoding = 'binary' , & file_format = 'ppm' , & width = width_ , & height = height_ , & max_color = 255 , & comment = trim ( this % color_name ), & pixels = px & ) if ( present ( file_name )) then call image % export_pnm ( trim ( file_name )) else call image % export_pnm ( 'pnm_files/colors/' // trim ( this % color_name )) end if end subroutine save","tags":"","loc":"proc/save.html"},{"title":"save_available_colors – ForImage","text":"private impure elemental subroutine save_available_colors(this, file_name, height, width) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in), optional :: file_name integer, intent(in), optional :: height integer, intent(in), optional :: width Calls proc~~save_available_colors~~CallsGraph proc~save_available_colors color%save_available_colors proc~initialize_colors initialize_colors proc~save_available_colors->proc~initialize_colors proc~convert color%convert proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 proc~cmyk_to_rgb cmyk_to_rgb proc~convert->proc~cmyk_to_rgb proc~decimal_to_rgb decimal_to_rgb proc~convert->proc~decimal_to_rgb proc~hex_to_rgb hex_to_rgb proc~convert->proc~hex_to_rgb proc~hsl_to_rgb hsl_to_rgb proc~convert->proc~hsl_to_rgb proc~hsv_to_rgb hsv_to_rgb proc~convert->proc~hsv_to_rgb proc~rgb_to_cmyk rgb_to_cmyk proc~convert->proc~rgb_to_cmyk proc~rgb_to_decimal rgb_to_decimal proc~convert->proc~rgb_to_decimal proc~rgb_to_hex rgb_to_hex proc~convert->proc~rgb_to_hex proc~rgb_to_hsl rgb_to_hsl proc~convert->proc~rgb_to_hsl proc~rgb_to_hsv rgb_to_hsv proc~convert->proc~rgb_to_hsv proc~rgb_to_xyz rgb_to_xyz proc~convert->proc~rgb_to_xyz proc~xyz_to_rgb xyz_to_rgb proc~convert->proc~xyz_to_rgb proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~set_cmyk color%set_cmyk proc~set~2->proc~set_cmyk proc~set_decimal color%set_decimal proc~set~2->proc~set_decimal proc~set_hex color%set_hex proc~set~2->proc~set_hex proc~set_hsl color%set_hsl proc~set~2->proc~set_hsl proc~set_hsv color%set_hsv proc~set~2->proc~set_hsv proc~set_name color%set_name proc~set~2->proc~set_name proc~set_rgb color%set_rgb proc~set~2->proc~set_rgb proc~set_xyz color%set_xyz proc~set~2->proc~set_xyz proc~set_by_name->proc~initialize_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~save_available_colors~~CalledByGraph proc~save_available_colors color%save_available_colors program~demo_color demo_color program~demo_color->proc~save_available_colors program~example29 example29 program~example29->proc~save_available_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental impure subroutine save_available_colors ( this , file_name , height , width ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ), optional :: file_name integer , intent ( in ), optional :: height , width type ( color ), dimension (:), allocatable :: colors call initialize_colors ( colors ) call colors (:)% save ( file_name , height , width ) end subroutine save_available_colors","tags":"","loc":"proc/save_available_colors.html"},{"title":"set – ForImage","text":"private pure elemental subroutine set(this, name, r, g, b, c, m, y, k, decimal, hex, h, s, v, hl, sl, vl, xyz_x, xyz_y, xyz_z, use_library) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in) :: name integer(kind=ik), intent(in), optional :: r integer(kind=ik), intent(in), optional :: g integer(kind=ik), intent(in), optional :: b integer(kind=ik), intent(in), optional :: c integer(kind=ik), intent(in), optional :: m integer(kind=ik), intent(in), optional :: y integer(kind=ik), intent(in), optional :: k integer(kind=ik), intent(in), optional :: decimal character(len=*), intent(in), optional :: hex real(kind=rk), intent(in), optional :: h real(kind=rk), intent(in), optional :: s real(kind=rk), intent(in), optional :: v real(kind=rk), intent(in), optional :: hl real(kind=rk), intent(in), optional :: sl real(kind=rk), intent(in), optional :: vl real(kind=rk), intent(in), optional :: xyz_x real(kind=rk), intent(in), optional :: xyz_y real(kind=rk), intent(in), optional :: xyz_z logical, intent(in), optional :: use_library Calls proc~~set~2~~CallsGraph proc~set~2 color%set proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~set_cmyk color%set_cmyk proc~set~2->proc~set_cmyk proc~set_decimal color%set_decimal proc~set~2->proc~set_decimal proc~set_hex color%set_hex proc~set~2->proc~set_hex proc~set_hsl color%set_hsl proc~set~2->proc~set_hsl proc~set_hsv color%set_hsv proc~set~2->proc~set_hsv proc~set_name color%set_name proc~set~2->proc~set_name proc~set_rgb color%set_rgb proc~set~2->proc~set_rgb proc~set_xyz color%set_xyz proc~set~2->proc~set_xyz proc~initialize_colors initialize_colors proc~set_by_name->proc~initialize_colors proc~initialize_colors->proc~set~2 proc~convert color%convert proc~initialize_colors->proc~convert proc~cmyk_to_rgb cmyk_to_rgb proc~convert->proc~cmyk_to_rgb proc~decimal_to_rgb decimal_to_rgb proc~convert->proc~decimal_to_rgb proc~hex_to_rgb hex_to_rgb proc~convert->proc~hex_to_rgb proc~hsl_to_rgb hsl_to_rgb proc~convert->proc~hsl_to_rgb proc~hsv_to_rgb hsv_to_rgb proc~convert->proc~hsv_to_rgb proc~rgb_to_cmyk rgb_to_cmyk proc~convert->proc~rgb_to_cmyk proc~rgb_to_decimal rgb_to_decimal proc~convert->proc~rgb_to_decimal proc~rgb_to_hex rgb_to_hex proc~convert->proc~rgb_to_hex proc~rgb_to_hsl rgb_to_hsl proc~convert->proc~rgb_to_hsl proc~rgb_to_hsv rgb_to_hsv proc~convert->proc~rgb_to_hsv proc~rgb_to_xyz rgb_to_xyz proc~convert->proc~rgb_to_xyz proc~xyz_to_rgb xyz_to_rgb proc~convert->proc~xyz_to_rgb Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~set~2~~CalledByGraph proc~set~2 color%set proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~initialize_colors initialize_colors proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~set~2 proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~example26 example26 program~example26->proc~set~2 program~example27 example27 program~example27->proc~set~2 program~example27->proc~find_nearest program~example28 example28 program~example28->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name->proc~initialize_colors program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set ( this , name , r , g , b , c , m , y , k , decimal , hex , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z , use_library ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: name integer ( ik ), intent ( in ), optional :: r , g , b , c , m , y , k , decimal character ( len =* ), intent ( in ), optional :: hex real ( rk ), intent ( in ), optional :: h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z logical , intent ( in ), optional :: use_library logical :: use_library_ if ( present ( use_library )) then use_library_ = use_library else use_library_ = . false . end if if ( use_library_ ) then call this % set_by_name ( name ) else call this % set_name ( name ) if ( present ( r ) . and . present ( g ) . and . present ( b )) call this % set_rgb ( r , g , b ) if ( present ( c ) . and . present ( m ) . and . present ( y ) . and . present ( k )) call this % set_cmyk ( c , m , y , k ) if ( present ( decimal )) call this % set_decimal ( decimal ) if ( present ( hex )) call this % set_hex ( hex ) if ( present ( h ) . and . present ( s ) . and . present ( v )) call this % set_hsv ( h , s , v ) if ( present ( hl ) . and . present ( sl ) . and . present ( vl )) call this % set_hsl ( hl , sl , vl ) if ( present ( xyz_x ) . and . present ( xyz_y ) . and . present ( xyz_z )) call this % set_xyz ( xyz_x , xyz_y , xyz_z ) end if end subroutine set","tags":"","loc":"proc/set~2.html"},{"title":"set_by_name – ForImage","text":"private pure elemental subroutine set_by_name(this, name) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in) :: name Calls proc~~set_by_name~~CallsGraph proc~set_by_name color%set_by_name proc~initialize_colors initialize_colors proc~set_by_name->proc~initialize_colors proc~convert color%convert proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 proc~cmyk_to_rgb cmyk_to_rgb proc~convert->proc~cmyk_to_rgb proc~decimal_to_rgb decimal_to_rgb proc~convert->proc~decimal_to_rgb proc~hex_to_rgb hex_to_rgb proc~convert->proc~hex_to_rgb proc~hsl_to_rgb hsl_to_rgb proc~convert->proc~hsl_to_rgb proc~hsv_to_rgb hsv_to_rgb proc~convert->proc~hsv_to_rgb proc~rgb_to_cmyk rgb_to_cmyk proc~convert->proc~rgb_to_cmyk proc~rgb_to_decimal rgb_to_decimal proc~convert->proc~rgb_to_decimal proc~rgb_to_hex rgb_to_hex proc~convert->proc~rgb_to_hex proc~rgb_to_hsl rgb_to_hsl proc~convert->proc~rgb_to_hsl proc~rgb_to_hsv rgb_to_hsv proc~convert->proc~rgb_to_hsv proc~rgb_to_xyz rgb_to_xyz proc~convert->proc~rgb_to_xyz proc~xyz_to_rgb xyz_to_rgb proc~convert->proc~xyz_to_rgb proc~set~2->proc~set_by_name proc~set_cmyk color%set_cmyk proc~set~2->proc~set_cmyk proc~set_decimal color%set_decimal proc~set~2->proc~set_decimal proc~set_hex color%set_hex proc~set~2->proc~set_hex proc~set_hsl color%set_hsl proc~set~2->proc~set_hsl proc~set_hsv color%set_hsv proc~set~2->proc~set_hsv proc~set_name color%set_name proc~set~2->proc~set_name proc~set_rgb color%set_rgb proc~set~2->proc~set_rgb proc~set_xyz color%set_xyz proc~set~2->proc~set_xyz Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~set_by_name~~CalledByGraph proc~set_by_name color%set_by_name proc~initialize_colors initialize_colors proc~set_by_name->proc~initialize_colors proc~set~2 color%set proc~set~2->proc~set_by_name proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~set~2 proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~example26 example26 program~example26->proc~set~2 program~example27 example27 program~example27->proc~set~2 program~example27->proc~find_nearest program~example28 example28 program~example28->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_by_name ( this , name ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: name type ( color ), dimension (:), allocatable :: colors integer :: i call initialize_colors ( colors ) do concurrent ( i = 1 : size ( colors )) if ( trim ( colors ( i )% color_name ) == trim ( name )) then this = colors ( i ) end if end do end subroutine set_by_name","tags":"","loc":"proc/set_by_name.html"},{"title":"set_cmyk – ForImage","text":"private pure elemental subroutine set_cmyk(this, c, m, y, k) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this integer(kind=ik), intent(in) :: c integer(kind=ik), intent(in) :: m integer(kind=ik), intent(in) :: y integer(kind=ik), intent(in) :: k Called by proc~~set_cmyk~~CalledByGraph proc~set_cmyk color%set_cmyk proc~set~2 color%set proc~set~2->proc~set_cmyk proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~initialize_colors initialize_colors proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~set~2 proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~example26 example26 program~example26->proc~set~2 program~example27 example27 program~example27->proc~set~2 program~example27->proc~find_nearest program~example28 example28 program~example28->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name->proc~initialize_colors program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_cmyk ( this , c , m , y , k ) class ( color ), intent ( inout ) :: this integer ( ik ), intent ( in ) :: c , m , y , k this % c = c this % m = m this % y = y this % k = k end subroutine set_cmyk","tags":"","loc":"proc/set_cmyk.html"},{"title":"set_decimal – ForImage","text":"private pure elemental subroutine set_decimal(this, decimal) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this integer(kind=ik), intent(in) :: decimal Called by proc~~set_decimal~~CalledByGraph proc~set_decimal color%set_decimal proc~set~2 color%set proc~set~2->proc~set_decimal proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~initialize_colors initialize_colors proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~set~2 proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~example26 example26 program~example26->proc~set~2 program~example27 example27 program~example27->proc~set~2 program~example27->proc~find_nearest program~example28 example28 program~example28->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name->proc~initialize_colors program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_decimal ( this , decimal ) class ( color ), intent ( inout ) :: this integer ( ik ), intent ( in ) :: decimal this % decimal = decimal end subroutine set_decimal","tags":"","loc":"proc/set_decimal.html"},{"title":"set_hex – ForImage","text":"private pure elemental subroutine set_hex(this, hex) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in) :: hex Called by proc~~set_hex~~CalledByGraph proc~set_hex color%set_hex proc~set~2 color%set proc~set~2->proc~set_hex proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~initialize_colors initialize_colors proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~set~2 proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~example26 example26 program~example26->proc~set~2 program~example27 example27 program~example27->proc~set~2 program~example27->proc~find_nearest program~example28 example28 program~example28->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name->proc~initialize_colors program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_hex ( this , hex ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: hex this % hex = hex end subroutine set_hex","tags":"","loc":"proc/set_hex.html"},{"title":"set_hsl – ForImage","text":"private pure elemental subroutine set_hsl(this, h, s, l) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this real(kind=rk), intent(in) :: h real(kind=rk), intent(in) :: s real(kind=rk), intent(in) :: l Called by proc~~set_hsl~~CalledByGraph proc~set_hsl color%set_hsl proc~set~2 color%set proc~set~2->proc~set_hsl proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~initialize_colors initialize_colors proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~set~2 proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~example26 example26 program~example26->proc~set~2 program~example27 example27 program~example27->proc~set~2 program~example27->proc~find_nearest program~example28 example28 program~example28->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name->proc~initialize_colors program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_hsl ( this , h , s , l ) class ( color ), intent ( inout ) :: this real ( rk ), intent ( in ) :: h , s , l this % hl = h this % sl = s this % vl = l end subroutine set_hsl","tags":"","loc":"proc/set_hsl.html"},{"title":"set_hsv – ForImage","text":"private pure elemental subroutine set_hsv(this, h, s, v) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this real(kind=rk), intent(in) :: h real(kind=rk), intent(in) :: s real(kind=rk), intent(in) :: v Called by proc~~set_hsv~~CalledByGraph proc~set_hsv color%set_hsv proc~set~2 color%set proc~set~2->proc~set_hsv proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~initialize_colors initialize_colors proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~set~2 proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~example26 example26 program~example26->proc~set~2 program~example27 example27 program~example27->proc~set~2 program~example27->proc~find_nearest program~example28 example28 program~example28->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name->proc~initialize_colors program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_hsv ( this , h , s , v ) class ( color ), intent ( inout ) :: this real ( rk ), intent ( in ) :: h , s , v this % h = h this % s = s this % v = v end subroutine set_hsv","tags":"","loc":"proc/set_hsv.html"},{"title":"set_name – ForImage","text":"private pure elemental subroutine set_name(this, name) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in) :: name Called by proc~~set_name~~CalledByGraph proc~set_name color%set_name proc~set~2 color%set proc~set~2->proc~set_name proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~initialize_colors initialize_colors proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~set~2 proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~example26 example26 program~example26->proc~set~2 program~example27 example27 program~example27->proc~set~2 program~example27->proc~find_nearest program~example28 example28 program~example28->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name->proc~initialize_colors program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_name ( this , name ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: name this % color_name = trim ( name ) end subroutine set_name","tags":"","loc":"proc/set_name.html"},{"title":"set_rgb – ForImage","text":"private pure elemental subroutine set_rgb(this, r, g, b) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b Called by proc~~set_rgb~~CalledByGraph proc~set_rgb color%set_rgb proc~set~2 color%set proc~set~2->proc~set_rgb proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~initialize_colors initialize_colors proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~set~2 proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~example26 example26 program~example26->proc~set~2 program~example27 example27 program~example27->proc~set~2 program~example27->proc~find_nearest program~example28 example28 program~example28->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name->proc~initialize_colors program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_rgb ( this , r , g , b ) class ( color ), intent ( inout ) :: this integer ( ik ), intent ( in ) :: r , g , b this % r = r this % g = g this % b = b end subroutine set_rgb","tags":"","loc":"proc/set_rgb.html"},{"title":"set_xyz – ForImage","text":"private pure elemental subroutine set_xyz(this, x, y, z) Type Bound color Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this real(kind=rk), intent(in) :: x real(kind=rk), intent(in) :: y real(kind=rk), intent(in) :: z Called by proc~~set_xyz~~CalledByGraph proc~set_xyz color%set_xyz proc~set~2 color%set proc~set~2->proc~set_xyz proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~initialize_colors initialize_colors proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~set~2 proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~example26 example26 program~example26->proc~set~2 program~example27 example27 program~example27->proc~set~2 program~example27->proc~find_nearest program~example28 example28 program~example28->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name->proc~initialize_colors program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_xyz ( this , x , y , z ) class ( color ), intent ( inout ) :: this real ( rk ), intent ( in ) :: x , y , z this % xyz_x = x this % xyz_y = y this % xyz_z = z end subroutine set_xyz","tags":"","loc":"proc/set_xyz.html"},{"title":"xyz_to_rgb – ForImage","text":"private pure elemental subroutine xyz_to_rgb(x, y, z, r, g, b) Arguments Type Intent Optional Attributes Name real(kind=rk), intent(in) :: x real(kind=rk), intent(in) :: y real(kind=rk), intent(in) :: z integer(kind=ik), intent(out) :: r integer(kind=ik), intent(out) :: g integer(kind=ik), intent(out) :: b Called by proc~~xyz_to_rgb~~CalledByGraph proc~xyz_to_rgb xyz_to_rgb proc~convert color%convert proc~convert->proc~xyz_to_rgb proc~initialize_colors initialize_colors proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 program~demo_color demo_color program~demo_color->proc~convert proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors program~demo_color->proc~set~2 program~example26 example26 program~example26->proc~convert program~example26->proc~set~2 program~example27 example27 program~example27->proc~convert program~example27->proc~find_nearest program~example27->proc~set~2 proc~find_nearest->proc~initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name color%set_by_name proc~set_by_name->proc~initialize_colors proc~set~2->proc~set_by_name program~example29 example29 program~example29->proc~print_available_colors program~example29->proc~save_available_colors program~example28 example28 program~example28->proc~set~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine xyz_to_rgb ( x , y , z , r , g , b ) real ( rk ), intent ( in ) :: x , y , z integer ( ik ), intent ( out ) :: r , g , b real ( rk ) :: rn , gn , bn real ( rk ) :: x1 , y1 , z1 x1 = x / 10 0.0_rk y1 = y / 10 0.0_rk z1 = z / 10 0.0_rk ! Convert XYZ to linear RGB rn = 3.2404542_rk * x1 - 1.5371385_rk * y1 - 0.4985314_rk * z1 gn = - 0.9692660_rk * x1 + 1.8760108_rk * y1 + 0.0415560_rk * z1 bn = 0.0556434_rk * x1 - 0.2040259_rk * y1 + 1.0572252_rk * z1 ! Apply gamma correction if ( rn <= 0.0031308_rk ) then rn = 1 2.92_rk * rn else rn = 1.055_rk * ( rn ** ( 1.0_rk / 2.4_rk )) - 0.055_rk end if if ( gn <= 0.0031308_rk ) then gn = 1 2.92_rk * gn else gn = 1.055_rk * ( gn ** ( 1.0_rk / 2.4_rk )) - 0.055_rk end if if ( bn <= 0.0031308_rk ) then bn = 1 2.92_rk * bn else bn = 1.055_rk * ( bn ** ( 1.0_rk / 2.4_rk )) - 0.055_rk end if ! Scale and convert to integer RGB values r = nint ( rn * 25 5.0_rk , kind = ik ) g = nint ( gn * 25 5.0_rk , kind = ik ) b = nint ( bn * 25 5.0_rk , kind = ik ) end subroutine xyz_to_rgb","tags":"","loc":"proc/xyz_to_rgb.html"},{"title":"get_format – ForImage","text":"private pure function get_format(this) result(encoding) Gets the encoding of the PNM image. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(in) :: this Return Value character(len=:), allocatable Source Code pure function get_format ( this ) result ( encoding ) class ( format_pnm ), intent ( in ) :: this character (:), allocatable :: encoding encoding = trim ( this % encoding ) end function get_format","tags":"","loc":"proc/get_format.html"},{"title":"allocate_pixels – ForImage","text":"private pure elemental subroutine allocate_pixels(this) Allocates memory for the pixels of the PNM image. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this Called by proc~~allocate_pixels~~CalledByGraph proc~allocate_pixels format_pnm%allocate_pixels proc~crop format_pnm%crop proc~crop->proc~allocate_pixels proc~import_pnm format_pnm%import_pnm proc~import_pnm->proc~allocate_pixels proc~resize format_pnm%resize proc~resize->proc~allocate_pixels proc~rotate format_pnm%rotate proc~rotate->proc~allocate_pixels proc~set_pnm format_pnm%set_pnm proc~set_pnm->proc~allocate_pixels proc~save color%save proc~save->proc~set_pnm program~demo_ppm demo_ppm program~demo_ppm->proc~crop program~demo_ppm->proc~import_pnm program~demo_ppm->proc~resize program~demo_ppm->proc~rotate program~demo_ppm->proc~set_pnm program~test test program~test->proc~set_pnm program~test1 test1 program~test1->proc~set_pnm program~test10 test10 program~test10->proc~import_pnm program~test11 test11 program~test11->proc~import_pnm program~test12 test12 program~test12->proc~import_pnm program~test13 test13 program~test13->proc~import_pnm program~test14 test14 program~test14->proc~import_pnm program~test17 test17 program~test17->proc~set_pnm program~test18 test18 program~test18->proc~set_pnm program~test19 test19 program~test19->proc~set_pnm program~test2 test2 program~test2->proc~set_pnm program~test20 test20 program~test20->proc~set_pnm program~test21 test21 program~test21->proc~set_pnm program~test22 test22 program~test22->proc~rotate program~test22->proc~set_pnm program~test23 test23 program~test23->proc~set_pnm program~test24 test24 program~test24->proc~crop program~test24->proc~set_pnm program~test25 test25 program~test25->proc~resize program~test25->proc~set_pnm program~test3 test3 program~test3->proc~set_pnm program~test4 test4 program~test4->proc~set_pnm program~test6 test6 program~test6->proc~set_pnm program~test7 test7 program~test7->proc~import_pnm program~test8 test8 program~test8->proc~import_pnm program~test9 test9 program~test9->proc~import_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine allocate_pixels ( this ) class ( format_pnm ), intent ( inout ) :: this select case ( this % magic_number ) case ( 'P1' ) if (. not . allocated ( this % pixels )) allocate ( this % pixels ( this % height , this % width )) case ( 'P2' ) if (. not . allocated ( this % pixels )) allocate ( this % pixels ( this % height , this % width )) case ( 'P3' ) if (. not . allocated ( this % pixels )) allocate ( this % pixels ( this % height , 3 * this % width )) case ( 'P4' ) if (. not . allocated ( this % pixels )) allocate ( this % pixels ( this % height , this % width )) case ( 'P5' ) if (. not . allocated ( this % pixels )) allocate ( this % pixels ( this % height , this % width )) case ( 'P6' ) if (. not . allocated ( this % pixels )) allocate ( this % pixels ( this % height , 3 * this % width )) end select end subroutine allocate_pixels","tags":"","loc":"proc/allocate_pixels.html"},{"title":"aspect_ratio – ForImage","text":"private pure elemental subroutine aspect_ratio(this, ratio) Calculates the aspect ratio of the image. Required for print_info method. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(in) :: this real(kind=rk), intent(out) :: ratio Called by proc~~aspect_ratio~~CalledByGraph proc~aspect_ratio aspect_ratio proc~print_info format_pnm%print_info proc~print_info->proc~aspect_ratio program~demo_ppm demo_ppm program~demo_ppm->proc~print_info program~test test program~test->proc~print_info program~test1 test1 program~test1->proc~print_info program~test10 test10 program~test10->proc~print_info program~test11 test11 program~test11->proc~print_info program~test12 test12 program~test12->proc~print_info program~test13 test13 program~test13->proc~print_info program~test14 test14 program~test14->proc~print_info program~test17 test17 program~test17->proc~print_info program~test18 test18 program~test18->proc~print_info program~test19 test19 program~test19->proc~print_info program~test2 test2 program~test2->proc~print_info program~test20 test20 program~test20->proc~print_info program~test21 test21 program~test21->proc~print_info program~test22 test22 program~test22->proc~print_info program~test23 test23 program~test23->proc~print_info program~test24 test24 program~test24->proc~print_info program~test25 test25 program~test25->proc~print_info program~test3 test3 program~test3->proc~print_info program~test4 test4 program~test4->proc~print_info program~test6 test6 program~test6->proc~print_info program~test7 test7 program~test7->proc~print_info program~test8 test8 program~test8->proc~print_info program~test9 test9 program~test9->proc~print_info Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine aspect_ratio ( this , ratio ) class ( format_pnm ), intent ( in ) :: this real ( rk ), intent ( out ) :: ratio ratio = real ( this % width , kind = rk ) / real ( this % height , kind = rk ) end subroutine aspect_ratio","tags":"","loc":"proc/aspect_ratio.html"},{"title":"average_colors – ForImage","text":"private pure elemental subroutine average_colors(this, avg, avg_red, avg_green, avg_blue) Calculates the average color values of the image. Required for print_info method. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(in) :: this real(kind=rk), intent(out), optional :: avg real(kind=rk), intent(out), optional :: avg_red real(kind=rk), intent(out), optional :: avg_green real(kind=rk), intent(out), optional :: avg_blue Called by proc~~average_colors~~CalledByGraph proc~average_colors average_colors proc~print_info format_pnm%print_info proc~print_info->proc~average_colors program~demo_ppm demo_ppm program~demo_ppm->proc~print_info program~test test program~test->proc~print_info program~test1 test1 program~test1->proc~print_info program~test10 test10 program~test10->proc~print_info program~test11 test11 program~test11->proc~print_info program~test12 test12 program~test12->proc~print_info program~test13 test13 program~test13->proc~print_info program~test14 test14 program~test14->proc~print_info program~test17 test17 program~test17->proc~print_info program~test18 test18 program~test18->proc~print_info program~test19 test19 program~test19->proc~print_info program~test2 test2 program~test2->proc~print_info program~test20 test20 program~test20->proc~print_info program~test21 test21 program~test21->proc~print_info program~test22 test22 program~test22->proc~print_info program~test23 test23 program~test23->proc~print_info program~test24 test24 program~test24->proc~print_info program~test25 test25 program~test25->proc~print_info program~test3 test3 program~test3->proc~print_info program~test4 test4 program~test4->proc~print_info program~test6 test6 program~test6->proc~print_info program~test7 test7 program~test7->proc~print_info program~test8 test8 program~test8->proc~print_info program~test9 test9 program~test9->proc~print_info Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine average_colors ( this , avg , avg_red , avg_green , avg_blue ) class ( format_pnm ), intent ( in ) :: this real ( rk ), intent ( out ), optional :: avg_red , avg_green , avg_blue , avg select case ( this % file_format ) case ( 'pbm' , 'pgm' ) avg = sum ( this % pixels ) / real ( this % width * this % height , kind = rk ) case ( 'ppm' ) avg_red = sum ( this % pixels (:, 1 : this % width : 3 )) / real ( this % width * this % height , kind = rk ) avg_green = sum ( this % pixels (:, 2 : this % width : 3 )) / real ( this % width * this % height , kind = rk ) avg_blue = sum ( this % pixels (:, 3 : this % width : 3 )) / real ( this % width * this % height , kind = rk ) end select end subroutine average_colors","tags":"","loc":"proc/average_colors.html"},{"title":"brighten – ForImage","text":"private pure elemental subroutine brighten(this, factor) Brightens or darkens the image. Only supported for PGM and PPM images. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: factor Calls proc~~brighten~~CallsGraph proc~brighten format_pnm%brighten proc~set_pixels format_pnm%set_pixels proc~brighten->proc~set_pixels proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~brighten~~CalledByGraph proc~brighten format_pnm%brighten program~demo_ppm demo_ppm program~demo_ppm->proc~brighten program~test18 test18 program~test18->proc~brighten Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine brighten ( this , factor ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: factor select case ( this % file_format ) case ( 'pbm' ) error stop 'brighten: This function is not supported for pbm files.' case ( 'pgm' , 'ppm' ) call this % set_pixels ( min ( this % max_color , max ( 0 , this % pixels + factor ))) end select end subroutine brighten","tags":"","loc":"proc/brighten.html"},{"title":"check_pixel_range – ForImage","text":"private pure subroutine check_pixel_range(this, pixels) Checks if the pixel values are within the valid range. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer(kind=ik), intent(in), dimension(:,:) :: pixels Called by proc~~check_pixel_range~~CalledByGraph proc~check_pixel_range format_pnm%check_pixel_range proc~flip_horizontal format_pnm%flip_horizontal proc~flip_horizontal->proc~check_pixel_range proc~flip_vertical format_pnm%flip_vertical proc~flip_vertical->proc~check_pixel_range proc~greyscale format_pnm%greyscale proc~greyscale->proc~check_pixel_range proc~import_pnm format_pnm%import_pnm proc~import_pnm->proc~check_pixel_range proc~remove_channels format_pnm%remove_channels proc~remove_channels->proc~check_pixel_range proc~set_pixels format_pnm%set_pixels proc~set_pixels->proc~check_pixel_range proc~swap_channels format_pnm%swap_channels proc~swap_channels->proc~check_pixel_range proc~brighten format_pnm%brighten proc~brighten->proc~set_pixels proc~crop format_pnm%crop proc~crop->proc~set_pixels proc~negative format_pnm%negative proc~negative->proc~set_pixels proc~resize format_pnm%resize proc~resize->proc~set_pixels proc~rotate format_pnm%rotate proc~rotate->proc~set_pixels proc~set_pnm format_pnm%set_pnm proc~set_pnm->proc~set_pixels program~demo_ppm demo_ppm program~demo_ppm->proc~flip_horizontal program~demo_ppm->proc~flip_vertical program~demo_ppm->proc~greyscale program~demo_ppm->proc~import_pnm program~demo_ppm->proc~remove_channels program~demo_ppm->proc~swap_channels program~demo_ppm->proc~brighten program~demo_ppm->proc~crop program~demo_ppm->proc~negative program~demo_ppm->proc~resize program~demo_ppm->proc~rotate program~demo_ppm->proc~set_pnm program~test10 test10 program~test10->proc~import_pnm program~test11 test11 program~test11->proc~import_pnm program~test12 test12 program~test12->proc~import_pnm program~test13 test13 program~test13->proc~import_pnm program~test14 test14 program~test14->proc~import_pnm program~test19 test19 program~test19->proc~swap_channels program~test19->proc~set_pnm program~test20 test20 program~test20->proc~remove_channels program~test20->proc~set_pnm program~test21 test21 program~test21->proc~greyscale program~test21->proc~set_pnm program~test23 test23 program~test23->proc~flip_horizontal program~test23->proc~flip_vertical program~test23->proc~set_pnm program~test7 test7 program~test7->proc~import_pnm program~test8 test8 program~test8->proc~import_pnm program~test9 test9 program~test9->proc~import_pnm proc~save color%save proc~save->proc~set_pnm program~test test program~test->proc~set_pnm program~test1 test1 program~test1->proc~set_pnm program~test17 test17 program~test17->proc~negative program~test17->proc~set_pnm program~test18 test18 program~test18->proc~brighten program~test18->proc~set_pnm program~test2 test2 program~test2->proc~set_pnm program~test22 test22 program~test22->proc~rotate program~test22->proc~set_pnm program~test24 test24 program~test24->proc~crop program~test24->proc~set_pnm program~test25 test25 program~test25->proc~resize program~test25->proc~set_pnm program~test3 test3 program~test3->proc~set_pnm program~test4 test4 program~test4->proc~set_pnm program~test6 test6 program~test6->proc~set_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure subroutine check_pixel_range ( this , pixels ) class ( format_pnm ), intent ( inout ) :: this integer ( ik ), dimension (:,:), intent ( in ) :: pixels ! Check if the pixel values are within the valid range select case ( this % file_format ) case ( 'pbm' ) if ( maxval ( pixels ) > 1 . or . minval ( pixels ) < 0 )& error stop 'set_pixels: Invalid pixel values. Valid values are 0 and 1.' case ( 'pgm' ) if ( maxval ( pixels ) > this % max_color . or . minval ( pixels ) < 0 )& error stop 'set_pixels: Invalid pixel values. Valid values are between 0 and max_color.' case ( 'ppm' ) if ( maxval ( pixels ) > this % max_color . or . minval ( pixels ) < 0 )& error stop 'set_pixels: Invalid pixel values. Valid values are between 0 and max_color.' end select end subroutine check_pixel_range","tags":"","loc":"proc/check_pixel_range.html"},{"title":"crop – ForImage","text":"private pure elemental subroutine crop(this, start_row, end_row, start_col, end_col) Crops the image to a specified region. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: start_row integer, intent(in) :: end_row integer, intent(in) :: start_col integer, intent(in) :: end_col Calls proc~~crop~~CallsGraph proc~crop format_pnm%crop proc~allocate_pixels format_pnm%allocate_pixels proc~crop->proc~allocate_pixels proc~set_height format_pnm%set_height proc~crop->proc~set_height proc~set_pixels format_pnm%set_pixels proc~crop->proc~set_pixels proc~set_width format_pnm%set_width proc~crop->proc~set_width proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~crop~~CalledByGraph proc~crop format_pnm%crop program~demo_ppm demo_ppm program~demo_ppm->proc~crop program~test24 test24 program~test24->proc~crop Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine crop ( this , start_row , end_row , start_col , end_col ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: start_row , end_row , start_col , end_col integer :: cropped_start_row , cropped_end_row , cropped_start_col , cropped_end_col integer ( ik ), dimension (:,:), allocatable :: cropped_pixels integer :: i , j , cropped_height , cropped_width ! Check if the cropping coordinates are within the image boundaries cropped_start_row = max ( 1 , start_row ) cropped_end_row = min ( this % height , end_row ) cropped_start_col = max ( 1 , start_col ) cropped_end_col = min ( this % width , end_col ) ! Calculate the dimensions of the cropped image cropped_height = cropped_end_row - cropped_start_row + 1 cropped_width = cropped_end_col - cropped_start_col + 1 select case ( this % file_format ) case ( 'pbm' , 'pgm' ) ! Allocate memory for cropped image pixels allocate ( cropped_pixels ( cropped_height , cropped_width )) ! Copy the cropped pixels to the new array do i = 1 , cropped_height do j = 1 , cropped_width cropped_pixels ( i , j ) = this % pixels ( cropped_start_row - 1 + i , ( cropped_start_col - 1 ) + j ) end do end do case ( 'ppm' ) ! Allocate memory for cropped image pixels allocate ( cropped_pixels ( cropped_height , 3 * cropped_width )) ! Copy the cropped pixels to the new array do i = 1 , cropped_height do j = 1 , 3 * cropped_width cropped_pixels ( i , j ) = this % pixels ( cropped_start_row - 1 + i , ( cropped_start_col - 1 ) * 3 + j ) end do end do end select ! Update image dimensions and pixels call this % set_height ( cropped_height ) call this % set_width ( cropped_width ) deallocate ( this % pixels ) call this % allocate_pixels () call this % set_pixels ( cropped_pixels ) ! Deallocate temporary array deallocate ( cropped_pixels ) end subroutine crop","tags":"","loc":"proc/crop.html"},{"title":"deallocate_pnm – ForImage","text":"private pure elemental subroutine deallocate_pnm(this) Deallocates memory for the pixels of the PNM image. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this Called by proc~~deallocate_pnm~~CalledByGraph proc~deallocate_pnm format_pnm%deallocate_pnm program~demo_ppm demo_ppm program~demo_ppm->proc~deallocate_pnm program~test test program~test->proc~deallocate_pnm program~test1 test1 program~test1->proc~deallocate_pnm program~test10 test10 program~test10->proc~deallocate_pnm program~test11 test11 program~test11->proc~deallocate_pnm program~test12 test12 program~test12->proc~deallocate_pnm program~test13 test13 program~test13->proc~deallocate_pnm program~test14 test14 program~test14->proc~deallocate_pnm program~test17 test17 program~test17->proc~deallocate_pnm program~test18 test18 program~test18->proc~deallocate_pnm program~test19 test19 program~test19->proc~deallocate_pnm program~test2 test2 program~test2->proc~deallocate_pnm program~test20 test20 program~test20->proc~deallocate_pnm program~test21 test21 program~test21->proc~deallocate_pnm program~test22 test22 program~test22->proc~deallocate_pnm program~test23 test23 program~test23->proc~deallocate_pnm program~test24 test24 program~test24->proc~deallocate_pnm program~test25 test25 program~test25->proc~deallocate_pnm program~test3 test3 program~test3->proc~deallocate_pnm program~test4 test4 program~test4->proc~deallocate_pnm program~test6 test6 program~test6->proc~deallocate_pnm program~test7 test7 program~test7->proc~deallocate_pnm program~test8 test8 program~test8->proc~deallocate_pnm program~test9 test9 program~test9->proc~deallocate_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine deallocate_pnm ( this ) class ( format_pnm ), intent ( inout ) :: this if ( allocated ( this % pixels )) deallocate ( this % pixels ) end subroutine deallocate_pnm","tags":"","loc":"proc/deallocate_pnm.html"},{"title":"export_pnm – ForImage","text":"private impure subroutine export_pnm(this, file_name, encoding) Writes the PNM image to a file. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: file_name character(len=*), intent(in), optional :: encoding Calls proc~~export_pnm~~CallsGraph proc~export_pnm format_pnm%export_pnm proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~export_pnm~~CalledByGraph proc~export_pnm format_pnm%export_pnm proc~save color%save proc~save->proc~export_pnm program~demo_ppm demo_ppm program~demo_ppm->proc~export_pnm program~test test program~test->proc~export_pnm program~test1 test1 program~test1->proc~export_pnm program~test10 test10 program~test10->proc~export_pnm program~test11 test11 program~test11->proc~export_pnm program~test12 test12 program~test12->proc~export_pnm program~test13 test13 program~test13->proc~export_pnm program~test14 test14 program~test14->proc~export_pnm program~test17 test17 program~test17->proc~export_pnm program~test18 test18 program~test18->proc~export_pnm program~test19 test19 program~test19->proc~export_pnm program~test2 test2 program~test2->proc~export_pnm program~test20 test20 program~test20->proc~export_pnm program~test21 test21 program~test21->proc~export_pnm program~test22 test22 program~test22->proc~export_pnm program~test23 test23 program~test23->proc~export_pnm program~test24 test24 program~test24->proc~export_pnm program~test25 test25 program~test25->proc~export_pnm program~test3 test3 program~test3->proc~export_pnm program~test4 test4 program~test4->proc~export_pnm program~test6 test6 program~test6->proc~export_pnm program~test7 test7 program~test7->proc~export_pnm program~test8 test8 program~test8->proc~export_pnm program~test9 test9 program~test9->proc~export_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine export_pnm ( this , file_name , encoding ) class ( format_pnm ), intent ( inout ) :: this character ( * ), intent ( in ) :: file_name character ( * ), intent ( in ), optional :: encoding integer :: nunit integer :: iostat if ( present ( encoding )) then call this % set_format ( encoding ) select case ( this % encoding ) case ( 'ascii' , 'plain' ) select case ( this % file_format ) case ( 'pbm' ) this % magic_number = 'P1' case ( 'pgm' ) this % magic_number = 'P2' case ( 'ppm' ) this % magic_number = 'P3' end select case ( 'binary' , 'raw' ) select case ( this % file_format ) case ( 'pbm' ) this % magic_number = 'P4' case ( 'pgm' ) this % magic_number = 'P5' case ( 'ppm' ) this % magic_number = 'P6' end select end select end if select case ( this % magic_number ) case ( 'P1' , 'P2' , 'P3' ) open ( newunit = nunit , file = file_name // '.' // this % file_format ,& status = 'replace' , iostat = iostat , form = 'formatted' , action = 'write' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call write_header ( this , nunit ) close ( nunit ) open ( newunit = nunit , file = file_name // '.' // this % file_format ,& status = 'old' , iostat = iostat , form = 'formatted' , action = 'write' , position = 'append' ) if ( iostat /= 0 ) error stop 'Error opening the file.' write ( nunit , '(*(g0,1x))' , advance = 'no' ) transpose ( this % pixels ) close ( nunit ) case ( 'P4' , 'P5' , 'P6' ) open ( newunit = nunit , file = file_name // '.' // this % file_format ,& status = 'replace' , iostat = iostat , form = 'formatted' , action = 'write' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call write_header ( this , nunit ) close ( nunit ) open ( newunit = nunit , file = file_name // '.' // this % file_format ,& status = 'old' , iostat = iostat , access = 'stream' , form = 'unformatted' , action = 'write' , position = 'append' ) if ( iostat /= 0 ) error stop 'Error opening the file.' write ( nunit ) transpose ( achar ( this % pixels )) close ( nunit ) end select end subroutine export_pnm","tags":"","loc":"proc/export_pnm.html"},{"title":"flip_horizontal – ForImage","text":"private pure elemental subroutine flip_horizontal(this) Flips the image horizontally. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this Calls proc~~flip_horizontal~~CallsGraph proc~flip_horizontal format_pnm%flip_horizontal proc~check_pixel_range format_pnm%check_pixel_range proc~flip_horizontal->proc~check_pixel_range proc~set_height format_pnm%set_height proc~flip_horizontal->proc~set_height proc~set_width format_pnm%set_width proc~flip_horizontal->proc~set_width Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~flip_horizontal~~CalledByGraph proc~flip_horizontal format_pnm%flip_horizontal program~demo_ppm demo_ppm program~demo_ppm->proc~flip_horizontal program~test23 test23 program~test23->proc~flip_horizontal Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine flip_horizontal ( this ) class ( format_pnm ), intent ( inout ) :: this select case ( this % file_format ) case ( 'pbm' , 'pgm' ) this % pixels (:,:) = this % pixels (:, this % width : 1 : - 1 ) call this % check_pixel_range ( this % pixels ) case ( 'ppm' ) this % pixels (:, 1 : size ( this % pixels , 2 ): 3 ) = this % pixels (:, size ( this % pixels , 2 ) - 2 : 1 : - 3 ) this % pixels (:, 2 : size ( this % pixels , 2 ): 3 ) = this % pixels (:, size ( this % pixels , 2 ) - 1 : 2 : - 3 ) this % pixels (:, 3 : size ( this % pixels , 2 ): 3 ) = this % pixels (:, size ( this % pixels , 2 ) : 3 : - 3 ) call this % check_pixel_range ( this % pixels ) end select call this % set_height ( size ( this % pixels , 1 )) select case ( this % file_format ) case ( 'pbm' , 'pgm' ) call this % set_width ( size ( this % pixels , 2 )) case ( 'ppm' ) call this % set_width ( size ( this % pixels , 2 ) / 3 ) end select end subroutine flip_horizontal","tags":"","loc":"proc/flip_horizontal.html"},{"title":"flip_vertical – ForImage","text":"private pure elemental subroutine flip_vertical(this) Flips the image vertically. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this Calls proc~~flip_vertical~~CallsGraph proc~flip_vertical format_pnm%flip_vertical proc~check_pixel_range format_pnm%check_pixel_range proc~flip_vertical->proc~check_pixel_range proc~set_height format_pnm%set_height proc~flip_vertical->proc~set_height proc~set_width format_pnm%set_width proc~flip_vertical->proc~set_width Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~flip_vertical~~CalledByGraph proc~flip_vertical format_pnm%flip_vertical program~demo_ppm demo_ppm program~demo_ppm->proc~flip_vertical program~test23 test23 program~test23->proc~flip_vertical Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine flip_vertical ( this ) class ( format_pnm ), intent ( inout ) :: this this % pixels (:,:) = this % pixels ( size ( this % pixels , 1 ): 1 : - 1 , :) call this % check_pixel_range ( this % pixels ) call this % set_height ( size ( this % pixels , 1 )) select case ( this % file_format ) case ( 'pbm' , 'pgm' ) call this % set_width ( size ( this % pixels , 2 )) case ( 'ppm' ) call this % set_width ( size ( this % pixels , 2 ) / 3 ) end select end subroutine flip_vertical","tags":"","loc":"proc/flip_vertical.html"},{"title":"greyscale – ForImage","text":"private pure elemental subroutine greyscale(this) Converts a color image to greyscale. Only supported for PPM images. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this Calls proc~~greyscale~~CallsGraph proc~greyscale format_pnm%greyscale proc~check_pixel_range format_pnm%check_pixel_range proc~greyscale->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~greyscale~~CalledByGraph proc~greyscale format_pnm%greyscale program~demo_ppm demo_ppm program~demo_ppm->proc~greyscale program~test21 test21 program~test21->proc~greyscale Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine greyscale ( this ) class ( format_pnm ), intent ( inout ) :: this integer :: i , j ! Check if the file is ppm if ( this % file_format /= 'ppm' ) error stop 'greyscale: This function is only for ppm files.' do i = 1 , this % height do j = 1 , this % width ! Calculate the ITU Rec.709 weighted average of RGB channels to derive a greyscale value and assign it as an integer to all RGB channels. this % pixels ( i , 3 * j - 2 : 3 * j ) = int ( 0.2126_rk * real ( this % pixels ( i , 3 * j - 2 ), kind = rk ) + & 0.7152_rk * real ( this % pixels ( i , 3 * j - 1 ), kind = rk ) + & 0.0722_rk * real ( this % pixels ( i , 3 * j - 0 ), kind = rk ), kind = ik ) end do end do call this % check_pixel_range ( this % pixels ) end subroutine greyscale","tags":"","loc":"proc/greyscale.html"},{"title":"import_pnm – ForImage","text":"private impure subroutine import_pnm(this, file_name, file_format, encoding) Reads a PNM image from a file. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: file_name character(len=3), intent(in) :: file_format character(len=*), intent(in) :: encoding Calls proc~~import_pnm~~CallsGraph proc~import_pnm format_pnm%import_pnm proc~allocate_pixels format_pnm%allocate_pixels proc~import_pnm->proc~allocate_pixels proc~check_pixel_range format_pnm%check_pixel_range proc~import_pnm->proc~check_pixel_range proc~read_header read_header proc~import_pnm->proc~read_header proc~set_file_format format_pnm%set_file_format proc~import_pnm->proc~set_file_format proc~set_format format_pnm%set_format proc~import_pnm->proc~set_format Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~import_pnm~~CalledByGraph proc~import_pnm format_pnm%import_pnm program~demo_ppm demo_ppm program~demo_ppm->proc~import_pnm program~test10 test10 program~test10->proc~import_pnm program~test11 test11 program~test11->proc~import_pnm program~test12 test12 program~test12->proc~import_pnm program~test13 test13 program~test13->proc~import_pnm program~test14 test14 program~test14->proc~import_pnm program~test7 test7 program~test7->proc~import_pnm program~test8 test8 program~test8->proc~import_pnm program~test9 test9 program~test9->proc~import_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine import_pnm ( this , file_name , file_format , encoding ) class ( format_pnm ), intent ( inout ) :: this character ( * ), intent ( in ) :: file_name , encoding character ( 3 ), intent ( in ) :: file_format integer :: nunit , iostat character , dimension (:), allocatable :: buffer_ch integer ( ik ), dimension (:), allocatable :: buffer_int logical :: file_exists integer :: pos inquire ( file = file_name // '.' // file_format , exist = file_exists ) if ( file_exists ) then call this % set_file_format ( file_format ) call this % set_format ( encoding ) select case ( this % encoding ) case ( 'binary' , 'raw' ) select case ( file_format ) case ( 'pbm' ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , form = 'formatted' , access = 'stream' , action = 'read' , status = 'old' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call read_header ( this , nunit , pos ) close ( nunit ) allocate ( buffer_ch ( this % height * this % width )) buffer_ch = achar ( 0_ik ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , access = 'stream' , form = 'unformatted' , action = 'read' , status = 'old' , position = 'append' ) if ( iostat /= 0 ) error stop 'Error opening the file.' read ( nunit , iostat = iostat , pos = pos ) buffer_ch if ( iostat /= 0 ) error stop 'Error reading the file.' call this % allocate_pixels () this % pixels = iachar ( transpose ( reshape ( buffer_ch , [ this % width , this % height ])), kind = ik ) close ( nunit ) case ( 'pgm' ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , form = 'formatted' , access = 'stream' , action = 'read' , status = 'old' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call read_header ( this , nunit , pos ) close ( nunit ) allocate ( buffer_ch ( this % height * this % width )) buffer_ch = achar ( 0_ik ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , access = 'stream' , form = 'unformatted' , action = 'read' , status = 'old' , position = 'append' ) if ( iostat /= 0 ) error stop 'Error opening the file.' read ( nunit , iostat = iostat , pos = pos ) buffer_ch if ( iostat /= 0 ) error stop 'Error reading the file.' call this % allocate_pixels () this % pixels = iachar ( transpose ( reshape ( buffer_ch , [ this % width , this % height ])), kind = ik ) close ( nunit ) case ( 'ppm' ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , form = 'formatted' , access = 'stream' , action = 'read' , status = 'old' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call read_header ( this , nunit , pos ) close ( nunit ) allocate ( buffer_ch ( this % height * 3 * this % width )) buffer_ch = achar ( 0_ik ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , access = 'stream' , form = 'unformatted' , action = 'read' , status = 'old' , position = 'append' ) if ( iostat /= 0 ) error stop 'Error opening the file.' read ( nunit , iostat = iostat , pos = pos ) buffer_ch call this % allocate_pixels () this % pixels = iachar ( transpose ( reshape ( buffer_ch , [ this % width * 3 , this % height ])), kind = ik ) close ( nunit ) end select case ( 'ascii' , 'plain' ) select case ( file_format ) case ( 'pbm' ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , access = 'stream' , form = 'formatted' , action = 'read' , status = 'old' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call read_header ( this , nunit , pos ) allocate ( buffer_int ( this % height * this % width )) buffer_int = 0_ik read ( nunit , * ) buffer_int call this % allocate_pixels () this % pixels = transpose ( reshape ( buffer_int , [ this % width , this % height ])) close ( nunit ) call this % check_pixel_range ( this % pixels ) case ( 'pgm' ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , access = 'stream' , form = 'formatted' , action = 'read' , status = 'old' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call read_header ( this , nunit , pos ) allocate ( buffer_int ( this % height * this % width )) buffer_int = 0_ik read ( nunit , * ) buffer_int call this % allocate_pixels () this % pixels = transpose ( reshape ( buffer_int , [ this % width , this % height ])) call this % check_pixel_range ( this % pixels ) close ( nunit ) case ( 'ppm' ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , access = 'stream' , form = 'formatted' , action = 'read' , status = 'old' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call read_header ( this , nunit , pos ) allocate ( buffer_int ( this % height * 3 * this % width )) buffer_int = 0_ik read ( nunit , * ) buffer_int call this % allocate_pixels () this % pixels = transpose ( reshape ( buffer_int , [ this % width * 3 , this % height ])) call this % check_pixel_range ( this % pixels ) close ( nunit ) end select end select else error stop 'Error: File does not exist.' end if end subroutine import_pnm","tags":"","loc":"proc/import_pnm.html"},{"title":"negative – ForImage","text":"private pure elemental subroutine negative(this) Inverts the colors of the image. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this Calls proc~~negative~~CallsGraph proc~negative format_pnm%negative proc~set_pixels format_pnm%set_pixels proc~negative->proc~set_pixels proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~negative~~CalledByGraph proc~negative format_pnm%negative program~demo_ppm demo_ppm program~demo_ppm->proc~negative program~test17 test17 program~test17->proc~negative Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine negative ( this ) class ( format_pnm ), intent ( inout ) :: this call this % set_pixels ( this % max_color - this % pixels ) end subroutine negative","tags":"","loc":"proc/negative.html"},{"title":"pixel_size – ForImage","text":"private pure elemental subroutine pixel_size(this, pixel_size_kb, pixel_size_mb) Calculates imgae size in KB and MB. Required for print_info method. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(in) :: this real(kind=rk), intent(out) :: pixel_size_kb real(kind=rk), intent(out) :: pixel_size_mb Called by proc~~pixel_size~~CalledByGraph proc~pixel_size pixel_size proc~print_info format_pnm%print_info proc~print_info->proc~pixel_size program~demo_ppm demo_ppm program~demo_ppm->proc~print_info program~test test program~test->proc~print_info program~test1 test1 program~test1->proc~print_info program~test10 test10 program~test10->proc~print_info program~test11 test11 program~test11->proc~print_info program~test12 test12 program~test12->proc~print_info program~test13 test13 program~test13->proc~print_info program~test14 test14 program~test14->proc~print_info program~test17 test17 program~test17->proc~print_info program~test18 test18 program~test18->proc~print_info program~test19 test19 program~test19->proc~print_info program~test2 test2 program~test2->proc~print_info program~test20 test20 program~test20->proc~print_info program~test21 test21 program~test21->proc~print_info program~test22 test22 program~test22->proc~print_info program~test23 test23 program~test23->proc~print_info program~test24 test24 program~test24->proc~print_info program~test25 test25 program~test25->proc~print_info program~test3 test3 program~test3->proc~print_info program~test4 test4 program~test4->proc~print_info program~test6 test6 program~test6->proc~print_info program~test7 test7 program~test7->proc~print_info program~test8 test8 program~test8->proc~print_info program~test9 test9 program~test9->proc~print_info Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine pixel_size ( this , pixel_size_kb , pixel_size_mb ) class ( format_pnm ), intent ( in ) :: this real ( rk ), intent ( out ) :: pixel_size_kb , pixel_size_mb integer :: bits_per_channel , bytes_per_pixel bits_per_channel = 8 select case ( this % file_format ) case ( 'pbm' , 'pgm' ) bytes_per_pixel = bits_per_channel case ( 'ppm' ) bytes_per_pixel = bits_per_channel * 3 end select pixel_size_kb = real ( this % width * this % height * bytes_per_pixel , kind = rk ) / 102 4.0_rk pixel_size_mb = pixel_size_kb / 102 4.0_rk end subroutine pixel_size","tags":"","loc":"proc/pixel_size.html"},{"title":"print_info – ForImage","text":"private impure elemental subroutine print_info(this) Displays information about the image e.g. dimensions, aspect ratio, etc. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(in) :: this Calls proc~~print_info~~CallsGraph proc~print_info format_pnm%print_info proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_info~~CalledByGraph proc~print_info format_pnm%print_info program~demo_ppm demo_ppm program~demo_ppm->proc~print_info program~test test program~test->proc~print_info program~test1 test1 program~test1->proc~print_info program~test10 test10 program~test10->proc~print_info program~test11 test11 program~test11->proc~print_info program~test12 test12 program~test12->proc~print_info program~test13 test13 program~test13->proc~print_info program~test14 test14 program~test14->proc~print_info program~test17 test17 program~test17->proc~print_info program~test18 test18 program~test18->proc~print_info program~test19 test19 program~test19->proc~print_info program~test2 test2 program~test2->proc~print_info program~test20 test20 program~test20->proc~print_info program~test21 test21 program~test21->proc~print_info program~test22 test22 program~test22->proc~print_info program~test23 test23 program~test23->proc~print_info program~test24 test24 program~test24->proc~print_info program~test25 test25 program~test25->proc~print_info program~test3 test3 program~test3->proc~print_info program~test4 test4 program~test4->proc~print_info program~test6 test6 program~test6->proc~print_info program~test7 test7 program~test7->proc~print_info program~test8 test8 program~test8->proc~print_info program~test9 test9 program~test9->proc~print_info Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental impure subroutine print_info ( this ) class ( format_pnm ), intent ( in ) :: this real ( rk ) :: avg , avg_red , avg_green , avg_blue real ( rk ) :: asp_ratio real ( rk ) :: pixel_size_kb , pixel_size_mb select case ( this % file_format ) case ( 'pbm' , 'pgm' ) call average_colors ( this , avg ) case ( 'ppm' ) call average_colors ( this , avg , avg_red , avg_green , avg_blue ) end select call aspect_ratio ( this , asp_ratio ) call pixel_size ( this , pixel_size_kb , pixel_size_mb ) print '(a)' , 'Image Information:' print '(a)' , '-------------------------------------------' print '(a, g0)' , 'Magic Number: ' , this % magic_number print '(a, a)' , 'File Format : ' , this % file_format print '(a, a)' , 'Encoding    : ' , this % encoding print '(a, a)' , 'Comment     : ' , trim ( this % comment ) print '(a, a, g0, a, g0)' , 'Dimensions  : ' , 'Height: ' , this % height , ' Width: ' , this % width print '(a, g0)' , 'Total Pixels: ' , this % width * this % height print '(a, f6.2)' , 'Aspect Ratio: ' , asp_ratio print '(a, f8.2, a, f8.2, a)' , 'Pixel Size  : ' , pixel_size_kb , ' KB ' , pixel_size_mb , ' MB' select case ( this % file_format ) case ( 'pbm' , 'pgm' ) print '(a, g0)' , 'Average     : ' , avg case ( 'ppm' ) print '(a, g0)' , 'Max Color   : ' , this % max_color print '(a, a, f6.2, a, f6.2, a, f6.2)' , 'Average RGB : ' , 'R:' , avg_red , ' G:' , avg_green , ' B:' , avg_blue end select print '(a)' , '-------------------------------------------' end subroutine print_info","tags":"","loc":"proc/print_info.html"},{"title":"read_header – ForImage","text":"private  subroutine read_header(this, nunit, pos) Reads the header of the PNM image from a file. Required before reading the pixels from the file. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: nunit integer, intent(out) :: pos Called by proc~~read_header~~CalledByGraph proc~read_header read_header proc~import_pnm format_pnm%import_pnm proc~import_pnm->proc~read_header program~demo_ppm demo_ppm program~demo_ppm->proc~import_pnm program~test10 test10 program~test10->proc~import_pnm program~test11 test11 program~test11->proc~import_pnm program~test12 test12 program~test12->proc~import_pnm program~test13 test13 program~test13->proc~import_pnm program~test14 test14 program~test14->proc~import_pnm program~test7 test7 program~test7->proc~import_pnm program~test8 test8 program~test8->proc~import_pnm program~test9 test9 program~test9->proc~import_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine read_header ( this , nunit , pos ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: nunit integer , intent ( out ) :: pos character ( len = 70 ) :: comment character :: temp integer :: i , k read ( nunit , * ) k = 0 do read ( nunit , '(a)' ) temp if ( temp /= '#' ) exit k = k + 1 end do inquire ( nunit , pos = pos ) rewind ( nunit ) read ( nunit , * ) this % magic_number this % comment = '' do i = 1 , k read ( nunit , '(a,a,a)' ) temp , temp , comment this % comment = this % comment // comment end do read ( nunit , * ) this % width , this % height inquire ( nunit , pos = pos ) if ( this % file_format == 'pgm' . or . this % file_format == 'ppm' ) then read ( nunit , * ) this % max_color inquire ( nunit , pos = pos ) end if end subroutine read_header","tags":"","loc":"proc/read_header.html"},{"title":"remove_channels – ForImage","text":"private pure elemental subroutine remove_channels(this, remove_r, remove_g, remove_b) Removes one or more RGB channels from the image. Only supported for PPM images. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this logical, intent(in), optional :: remove_r logical, intent(in), optional :: remove_g logical, intent(in), optional :: remove_b Calls proc~~remove_channels~~CallsGraph proc~remove_channels format_pnm%remove_channels proc~check_pixel_range format_pnm%check_pixel_range proc~remove_channels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~remove_channels~~CalledByGraph proc~remove_channels format_pnm%remove_channels program~demo_ppm demo_ppm program~demo_ppm->proc~remove_channels program~test20 test20 program~test20->proc~remove_channels Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine remove_channels ( this , remove_r , remove_g , remove_b ) class ( format_pnm ), intent ( inout ) :: this logical , optional , intent ( in ) :: remove_r , remove_g , remove_b ! Check if the file is ppm if ( this % file_format /= 'ppm' ) error stop 'remove_channels: This function is only for ppm files.' ! Remove R channel if ( present ( remove_r )) then if ( remove_r ) then this % pixels (:, 1 : size ( this % pixels , 2 ): 3 ) = 0_ik end if end if ! Remove G channel if ( present ( remove_g )) then if ( remove_g ) then this % pixels (:, 2 : size ( this % pixels , 2 ): 3 ) = 0_ik end if end if ! Remove B channel if ( present ( remove_b )) then if ( remove_b ) then this % pixels (:, 3 : size ( this % pixels , 2 ): 3 ) = 0_ik end if end if call this % check_pixel_range ( this % pixels ) end subroutine remove_channels","tags":"","loc":"proc/remove_channels.html"},{"title":"resize – ForImage","text":"private pure elemental subroutine resize(this, new_height, new_width) Resizes the image to specified dimensions. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: new_height integer, intent(in) :: new_width Calls proc~~resize~~CallsGraph proc~resize format_pnm%resize proc~allocate_pixels format_pnm%allocate_pixels proc~resize->proc~allocate_pixels proc~set_height format_pnm%set_height proc~resize->proc~set_height proc~set_pixels format_pnm%set_pixels proc~resize->proc~set_pixels proc~set_width format_pnm%set_width proc~resize->proc~set_width proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~resize~~CalledByGraph proc~resize format_pnm%resize program~demo_ppm demo_ppm program~demo_ppm->proc~resize program~test25 test25 program~test25->proc~resize Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine resize ( this , new_height , new_width ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: new_width , new_height integer ( ik ), dimension (:,:), allocatable :: resized_pixels integer :: i_out , j_out , i_in , j_in , channel real ( rk ) :: width_scale , height_scale select case ( this % file_format ) case ( 'pbm' , 'pgm' ) allocate ( resized_pixels ( new_height , new_width )) width_scale = real ( this % width , kind = rk ) / real ( new_width , kind = rk ) height_scale = real ( this % height , kind = rk ) / real ( new_height , kind = rk ) do i_out = 1 , new_height do j_out = 1 , new_width i_in = min ( this % height , max ( 1 , int (( real ( i_out , kind = rk ) - 0.5_rk ) * height_scale ) + 1 )) j_in = min ( this % width , max ( 1 , int (( real ( j_out , kind = rk ) - 0.5_rk ) * width_scale ) + 1 )) resized_pixels ( i_out , j_out ) = this % pixels ( i_in , j_in ) end do end do case ( 'ppm' ) allocate ( resized_pixels ( new_height , 3 * new_width )) width_scale = real ( this % width , kind = rk ) / real ( new_width , kind = rk ) height_scale = real ( this % height , kind = rk ) / real ( new_height , kind = rk ) do i_out = 1 , new_height do j_out = 1 , new_width i_in = min ( this % height , max ( 1 , int (( real ( i_out , kind = rk ) - 0.5_rk ) * height_scale ) + 1 )) j_in = min ( 3 * this % width , max ( 1 , int (( real ( j_out , kind = rk ) - 0.5_rk ) * width_scale ) + 1 )) do channel = 1 , 3 resized_pixels ( i_out , 3 * ( j_out - 1 ) + channel ) = this % pixels ( i_in , 3 * ( j_in - 1 ) + channel ) end do end do end do end select call this % set_height ( new_height ) call this % set_width ( new_width ) deallocate ( this % pixels ) call this % allocate_pixels () call this % set_pixels ( resized_pixels ) deallocate ( resized_pixels ) end subroutine resize","tags":"","loc":"proc/resize.html"},{"title":"rotate – ForImage","text":"private pure elemental subroutine rotate(this, angle) Rotates the image by a specified angle. Supported angles are 90, 180, 270, -90, -180, -270. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: angle Calls proc~~rotate~~CallsGraph proc~rotate format_pnm%rotate proc~allocate_pixels format_pnm%allocate_pixels proc~rotate->proc~allocate_pixels proc~set_height format_pnm%set_height proc~rotate->proc~set_height proc~set_pixels format_pnm%set_pixels proc~rotate->proc~set_pixels proc~set_width format_pnm%set_width proc~rotate->proc~set_width proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~rotate~~CalledByGraph proc~rotate format_pnm%rotate program~demo_ppm demo_ppm program~demo_ppm->proc~rotate program~test22 test22 program~test22->proc~rotate Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine rotate ( this , angle ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: angle integer ( ik ), dimension (:,:), allocatable :: rotated_pixels integer :: target_height , target_width integer :: i , j ! Determine the target height and width based on the rotation angle select case ( angle ) case ( 90 , - 90 , 270 , - 270 ) target_height = this % width target_width = this % height case ( 180 , - 180 ) target_height = this % height target_width = this % width case default error stop \"Invalid rotation angle. Valid angles are 90, 180, 270, -90, -180, -270.\" end select select case ( this % file_format ) case ( 'pbm' , 'pgm' ) ! Allocate memory for rotated_pixels array allocate ( rotated_pixels ( target_height , target_width )) ! Rotate pixels based on the specified angle select case ( angle ) case ( 90 , - 270 ) do i = 1 , this % height do j = 1 , this % width rotated_pixels ( j , this % height - i + 1 ) = this % pixels ( i , j ) end do end do case ( 180 , - 180 ) do i = 1 , this % height do j = 1 , this % width rotated_pixels ( this % height - i + 1 , this % width - j + 1 ) = this % pixels ( i , j ) end do end do case ( 270 , - 90 ) do i = 1 , this % height do j = 1 , this % width rotated_pixels ( this % width - j + 1 , i ) = this % pixels ( i , j ) end do end do end select case ( 'ppm' ) ! Allocate memory for rotated_pixels array allocate ( rotated_pixels ( target_height , 3 * target_width )) ! Rotate pixels based on the specified angle select case ( angle ) case ( 90 , - 270 ) do i = 1 , this % height do j = 1 , this % width rotated_pixels ( j , 3 * ( this % height - i + 1 ) - 2 : 3 * ( this % height - i + 1 )) = this % pixels ( i , 3 * j - 2 : 3 * j ) end do end do case ( 180 , - 180 ) do i = 1 , this % height do j = 1 , this % width rotated_pixels ( this % height - i + 1 , 3 * ( this % width - j + 1 ) - 2 : 3 * ( this % width - j + 1 )) = this % pixels ( i , 3 * j - 2 : 3 * j ) end do end do case ( 270 , - 90 ) do i = 1 , this % height do j = 1 , this % width rotated_pixels ( this % width - j + 1 , 3 * i - 2 : 3 * i ) = this % pixels ( i , 3 * j - 2 : 3 * j ) end do end do end select end select ! Update height and width of the image call this % set_height ( target_height ) call this % set_width ( target_width ) deallocate ( this % pixels ) call this % allocate_pixels () ! Update the original pixels with rotated pixels call this % set_pixels ( rotated_pixels ) ! Deallocate rotated_pixels array deallocate ( rotated_pixels ) end subroutine rotate","tags":"","loc":"proc/rotate.html"},{"title":"set_comment – ForImage","text":"private pure elemental subroutine set_comment(this, comment) Sets a comment for the PNM image. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: comment Called by proc~~set_comment~~CalledByGraph proc~set_comment format_pnm%set_comment proc~set_header format_pnm%set_header proc~set_header->proc~set_comment proc~set_pnm format_pnm%set_pnm proc~set_pnm->proc~set_header proc~save color%save proc~save->proc~set_pnm program~demo_ppm demo_ppm program~demo_ppm->proc~set_pnm program~test test program~test->proc~set_pnm program~test1 test1 program~test1->proc~set_pnm program~test17 test17 program~test17->proc~set_pnm program~test18 test18 program~test18->proc~set_pnm program~test19 test19 program~test19->proc~set_pnm program~test2 test2 program~test2->proc~set_pnm program~test20 test20 program~test20->proc~set_pnm program~test21 test21 program~test21->proc~set_pnm program~test22 test22 program~test22->proc~set_pnm program~test23 test23 program~test23->proc~set_pnm program~test24 test24 program~test24->proc~set_pnm program~test25 test25 program~test25->proc~set_pnm program~test3 test3 program~test3->proc~set_pnm program~test4 test4 program~test4->proc~set_pnm program~test6 test6 program~test6->proc~set_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_comment ( this , comment ) class ( format_pnm ), intent ( inout ) :: this character ( * ), intent ( in ) :: comment this % comment = comment end subroutine set_comment","tags":"","loc":"proc/set_comment.html"},{"title":"set_file_format – ForImage","text":"private pure elemental subroutine set_file_format(this, file_format) Sets the file format of the PNM image. Supported values are pbm , pgm , and ppm . Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=3), intent(in) :: file_format Called by proc~~set_file_format~~CalledByGraph proc~set_file_format format_pnm%set_file_format proc~import_pnm format_pnm%import_pnm proc~import_pnm->proc~set_file_format proc~set_pnm format_pnm%set_pnm proc~set_pnm->proc~set_file_format proc~save color%save proc~save->proc~set_pnm program~demo_ppm demo_ppm program~demo_ppm->proc~import_pnm program~demo_ppm->proc~set_pnm program~test test program~test->proc~set_pnm program~test1 test1 program~test1->proc~set_pnm program~test10 test10 program~test10->proc~import_pnm program~test11 test11 program~test11->proc~import_pnm program~test12 test12 program~test12->proc~import_pnm program~test13 test13 program~test13->proc~import_pnm program~test14 test14 program~test14->proc~import_pnm program~test17 test17 program~test17->proc~set_pnm program~test18 test18 program~test18->proc~set_pnm program~test19 test19 program~test19->proc~set_pnm program~test2 test2 program~test2->proc~set_pnm program~test20 test20 program~test20->proc~set_pnm program~test21 test21 program~test21->proc~set_pnm program~test22 test22 program~test22->proc~set_pnm program~test23 test23 program~test23->proc~set_pnm program~test24 test24 program~test24->proc~set_pnm program~test25 test25 program~test25->proc~set_pnm program~test3 test3 program~test3->proc~set_pnm program~test4 test4 program~test4->proc~set_pnm program~test6 test6 program~test6->proc~set_pnm program~test7 test7 program~test7->proc~import_pnm program~test8 test8 program~test8->proc~import_pnm program~test9 test9 program~test9->proc~import_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_file_format ( this , file_format ) class ( format_pnm ), intent ( inout ) :: this character ( 3 ), intent ( in ) :: file_format this % file_format = file_format end subroutine set_file_format","tags":"","loc":"proc/set_file_format.html"},{"title":"set_format – ForImage","text":"private pure elemental subroutine set_format(this, encoding) Sets the encoding of the PNM image. Supported values are ascii or plain and binary or raw . Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: encoding Called by proc~~set_format~~CalledByGraph proc~set_format format_pnm%set_format proc~export_pnm format_pnm%export_pnm proc~export_pnm->proc~set_format proc~import_pnm format_pnm%import_pnm proc~import_pnm->proc~set_format proc~set_pnm format_pnm%set_pnm proc~set_pnm->proc~set_format proc~save color%save proc~save->proc~export_pnm proc~save->proc~set_pnm program~demo_ppm demo_ppm program~demo_ppm->proc~export_pnm program~demo_ppm->proc~import_pnm program~demo_ppm->proc~set_pnm program~test test program~test->proc~export_pnm program~test->proc~set_pnm program~test1 test1 program~test1->proc~export_pnm program~test1->proc~set_pnm program~test10 test10 program~test10->proc~export_pnm program~test10->proc~import_pnm program~test11 test11 program~test11->proc~export_pnm program~test11->proc~import_pnm program~test12 test12 program~test12->proc~export_pnm program~test12->proc~import_pnm program~test13 test13 program~test13->proc~export_pnm program~test13->proc~import_pnm program~test14 test14 program~test14->proc~export_pnm program~test14->proc~import_pnm program~test17 test17 program~test17->proc~export_pnm program~test17->proc~set_pnm program~test18 test18 program~test18->proc~export_pnm program~test18->proc~set_pnm program~test19 test19 program~test19->proc~export_pnm program~test19->proc~set_pnm program~test2 test2 program~test2->proc~export_pnm program~test2->proc~set_pnm program~test20 test20 program~test20->proc~export_pnm program~test20->proc~set_pnm program~test21 test21 program~test21->proc~export_pnm program~test21->proc~set_pnm program~test22 test22 program~test22->proc~export_pnm program~test22->proc~set_pnm program~test23 test23 program~test23->proc~export_pnm program~test23->proc~set_pnm program~test24 test24 program~test24->proc~export_pnm program~test24->proc~set_pnm program~test25 test25 program~test25->proc~export_pnm program~test25->proc~set_pnm program~test3 test3 program~test3->proc~export_pnm program~test3->proc~set_pnm program~test4 test4 program~test4->proc~export_pnm program~test4->proc~set_pnm program~test6 test6 program~test6->proc~export_pnm program~test6->proc~set_pnm program~test7 test7 program~test7->proc~export_pnm program~test7->proc~import_pnm program~test8 test8 program~test8->proc~export_pnm program~test8->proc~import_pnm program~test9 test9 program~test9->proc~export_pnm program~test9->proc~import_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_format ( this , encoding ) class ( format_pnm ), intent ( inout ) :: this character ( * ), intent ( in ) :: encoding this % encoding = trim ( encoding ) end subroutine set_format","tags":"","loc":"proc/set_format.html"},{"title":"set_header – ForImage","text":"private pure elemental subroutine set_header(this, magic_number, width, height, comment, max_color) Sets the header of the PNM image. The header includes the magic number, width, height, comment, and max_color. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: magic_number integer, intent(in) :: width integer, intent(in) :: height character(len=*), intent(in) :: comment integer, intent(in), optional :: max_color Calls proc~~set_header~~CallsGraph proc~set_header format_pnm%set_header proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_height format_pnm%set_height proc~set_header->proc~set_height proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_width format_pnm%set_width proc~set_header->proc~set_width Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~set_header~~CalledByGraph proc~set_header format_pnm%set_header proc~set_pnm format_pnm%set_pnm proc~set_pnm->proc~set_header proc~save color%save proc~save->proc~set_pnm program~demo_ppm demo_ppm program~demo_ppm->proc~set_pnm program~test test program~test->proc~set_pnm program~test1 test1 program~test1->proc~set_pnm program~test17 test17 program~test17->proc~set_pnm program~test18 test18 program~test18->proc~set_pnm program~test19 test19 program~test19->proc~set_pnm program~test2 test2 program~test2->proc~set_pnm program~test20 test20 program~test20->proc~set_pnm program~test21 test21 program~test21->proc~set_pnm program~test22 test22 program~test22->proc~set_pnm program~test23 test23 program~test23->proc~set_pnm program~test24 test24 program~test24->proc~set_pnm program~test25 test25 program~test25->proc~set_pnm program~test3 test3 program~test3->proc~set_pnm program~test4 test4 program~test4->proc~set_pnm program~test6 test6 program~test6->proc~set_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_header ( this , magic_number , width , height , comment , max_color ) class ( format_pnm ), intent ( inout ) :: this character ( * ), intent ( in ) :: magic_number integer , intent ( in ) :: width integer , intent ( in ) :: height character ( * ), intent ( in ) :: comment integer , optional , intent ( in ) :: max_color call this % set_magicnumber ( magic_number ) call this % set_width ( width ) call this % set_height ( height ) call this % set_comment ( comment ) if ( this % file_format /= 'pbm' ) call this % set_max_color ( max_color ) end subroutine set_header","tags":"","loc":"proc/set_header.html"},{"title":"set_height – ForImage","text":"private pure elemental subroutine set_height(this, height) Sets the height of the PNM image. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: height Called by proc~~set_height~~CalledByGraph proc~set_height format_pnm%set_height proc~crop format_pnm%crop proc~crop->proc~set_height proc~flip_horizontal format_pnm%flip_horizontal proc~flip_horizontal->proc~set_height proc~flip_vertical format_pnm%flip_vertical proc~flip_vertical->proc~set_height proc~resize format_pnm%resize proc~resize->proc~set_height proc~rotate format_pnm%rotate proc~rotate->proc~set_height proc~set_header format_pnm%set_header proc~set_header->proc~set_height proc~set_pnm format_pnm%set_pnm proc~set_pnm->proc~set_header program~demo_ppm demo_ppm program~demo_ppm->proc~crop program~demo_ppm->proc~flip_horizontal program~demo_ppm->proc~flip_vertical program~demo_ppm->proc~resize program~demo_ppm->proc~rotate program~demo_ppm->proc~set_pnm program~test22 test22 program~test22->proc~rotate program~test22->proc~set_pnm program~test23 test23 program~test23->proc~flip_horizontal program~test23->proc~flip_vertical program~test23->proc~set_pnm program~test24 test24 program~test24->proc~crop program~test24->proc~set_pnm program~test25 test25 program~test25->proc~resize program~test25->proc~set_pnm proc~save color%save proc~save->proc~set_pnm program~test test program~test->proc~set_pnm program~test1 test1 program~test1->proc~set_pnm program~test17 test17 program~test17->proc~set_pnm program~test18 test18 program~test18->proc~set_pnm program~test19 test19 program~test19->proc~set_pnm program~test2 test2 program~test2->proc~set_pnm program~test20 test20 program~test20->proc~set_pnm program~test21 test21 program~test21->proc~set_pnm program~test3 test3 program~test3->proc~set_pnm program~test4 test4 program~test4->proc~set_pnm program~test6 test6 program~test6->proc~set_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_height ( this , height ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: height this % height = height end subroutine set_height","tags":"","loc":"proc/set_height.html"},{"title":"set_magicnumber – ForImage","text":"private pure elemental subroutine set_magicnumber(this, magic_number) Sets the magic number of the PNM image. Supported values are P1 , P2 , P3 , P4 , P5 , and P6 . Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: magic_number Called by proc~~set_magicnumber~~CalledByGraph proc~set_magicnumber format_pnm%set_magicnumber proc~set_header format_pnm%set_header proc~set_header->proc~set_magicnumber proc~set_pnm format_pnm%set_pnm proc~set_pnm->proc~set_header proc~save color%save proc~save->proc~set_pnm program~demo_ppm demo_ppm program~demo_ppm->proc~set_pnm program~test test program~test->proc~set_pnm program~test1 test1 program~test1->proc~set_pnm program~test17 test17 program~test17->proc~set_pnm program~test18 test18 program~test18->proc~set_pnm program~test19 test19 program~test19->proc~set_pnm program~test2 test2 program~test2->proc~set_pnm program~test20 test20 program~test20->proc~set_pnm program~test21 test21 program~test21->proc~set_pnm program~test22 test22 program~test22->proc~set_pnm program~test23 test23 program~test23->proc~set_pnm program~test24 test24 program~test24->proc~set_pnm program~test25 test25 program~test25->proc~set_pnm program~test3 test3 program~test3->proc~set_pnm program~test4 test4 program~test4->proc~set_pnm program~test6 test6 program~test6->proc~set_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_magicnumber ( this , magic_number ) class ( format_pnm ), intent ( inout ) :: this character ( * ), intent ( in ) :: magic_number this % magic_number = magic_number end subroutine set_magicnumber","tags":"","loc":"proc/set_magicnumber.html"},{"title":"set_max_color – ForImage","text":"private pure elemental subroutine set_max_color(this, max_color) Sets the maximum color value of the PNM image. Only required for PGM and PPM images Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: max_color Called by proc~~set_max_color~~CalledByGraph proc~set_max_color format_pnm%set_max_color proc~set_header format_pnm%set_header proc~set_header->proc~set_max_color proc~set_pnm format_pnm%set_pnm proc~set_pnm->proc~set_header proc~save color%save proc~save->proc~set_pnm program~demo_ppm demo_ppm program~demo_ppm->proc~set_pnm program~test test program~test->proc~set_pnm program~test1 test1 program~test1->proc~set_pnm program~test17 test17 program~test17->proc~set_pnm program~test18 test18 program~test18->proc~set_pnm program~test19 test19 program~test19->proc~set_pnm program~test2 test2 program~test2->proc~set_pnm program~test20 test20 program~test20->proc~set_pnm program~test21 test21 program~test21->proc~set_pnm program~test22 test22 program~test22->proc~set_pnm program~test23 test23 program~test23->proc~set_pnm program~test24 test24 program~test24->proc~set_pnm program~test25 test25 program~test25->proc~set_pnm program~test3 test3 program~test3->proc~set_pnm program~test4 test4 program~test4->proc~set_pnm program~test6 test6 program~test6->proc~set_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_max_color ( this , max_color ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: max_color this % max_color = max_color end subroutine set_max_color","tags":"","loc":"proc/set_max_color.html"},{"title":"set_pixel – ForImage","text":"private pure elemental subroutine set_pixel(this, grey, r, g, b, i, j) Sets the pixel values of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in), optional :: grey integer, intent(in), optional :: r integer, intent(in), optional :: g integer, intent(in), optional :: b integer, intent(in) :: i integer, intent(in) :: j Source Code elemental pure subroutine set_pixel ( this , grey , r , g , b , i , j ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ), optional :: grey integer , intent ( in ), optional :: r , g , b integer , intent ( in ) :: i , j select case ( this % magic_number ) case ( 'P1' ) this % pixels ( i , j ) = grey case ( 'P2' ) this % pixels ( i , j ) = grey case ( 'P3' ) this % pixels ( i , 3 * j - 2 ) = r this % pixels ( i , 3 * j - 1 ) = g this % pixels ( i , 3 * j - 0 ) = b end select end subroutine set_pixel","tags":"","loc":"proc/set_pixel.html"},{"title":"set_pixels – ForImage","text":"private pure subroutine set_pixels(this, pixels) Sets the pixel values of the PNM image. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer(kind=ik), intent(in), dimension(:,:) :: pixels Calls proc~~set_pixels~~CallsGraph proc~set_pixels format_pnm%set_pixels proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~set_pixels~~CalledByGraph proc~set_pixels format_pnm%set_pixels proc~brighten format_pnm%brighten proc~brighten->proc~set_pixels proc~crop format_pnm%crop proc~crop->proc~set_pixels proc~negative format_pnm%negative proc~negative->proc~set_pixels proc~resize format_pnm%resize proc~resize->proc~set_pixels proc~rotate format_pnm%rotate proc~rotate->proc~set_pixels proc~set_pnm format_pnm%set_pnm proc~set_pnm->proc~set_pixels proc~save color%save proc~save->proc~set_pnm program~demo_ppm demo_ppm program~demo_ppm->proc~brighten program~demo_ppm->proc~crop program~demo_ppm->proc~negative program~demo_ppm->proc~resize program~demo_ppm->proc~rotate program~demo_ppm->proc~set_pnm program~test test program~test->proc~set_pnm program~test1 test1 program~test1->proc~set_pnm program~test17 test17 program~test17->proc~negative program~test17->proc~set_pnm program~test18 test18 program~test18->proc~brighten program~test18->proc~set_pnm program~test19 test19 program~test19->proc~set_pnm program~test2 test2 program~test2->proc~set_pnm program~test20 test20 program~test20->proc~set_pnm program~test21 test21 program~test21->proc~set_pnm program~test22 test22 program~test22->proc~rotate program~test22->proc~set_pnm program~test23 test23 program~test23->proc~set_pnm program~test24 test24 program~test24->proc~crop program~test24->proc~set_pnm program~test25 test25 program~test25->proc~resize program~test25->proc~set_pnm program~test3 test3 program~test3->proc~set_pnm program~test4 test4 program~test4->proc~set_pnm program~test6 test6 program~test6->proc~set_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure subroutine set_pixels ( this , pixels ) class ( format_pnm ), intent ( inout ) :: this integer ( ik ), dimension (:,:), intent ( in ) :: pixels call this % check_pixel_range ( pixels ) this % pixels = pixels end subroutine set_pixels","tags":"","loc":"proc/set_pixels.html"},{"title":"set_pnm – ForImage","text":"private pure subroutine set_pnm(this, encoding, file_format, width, height, max_color, comment, pixels) Sets the attributes of the PNM image. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: encoding character(len=3), intent(in) :: file_format integer, intent(in) :: width integer, intent(in) :: height integer, intent(in), optional :: max_color character(len=*), intent(in) :: comment integer(kind=ik), intent(in), dimension(:,:) :: pixels Calls proc~~set_pnm~~CallsGraph proc~set_pnm format_pnm%set_pnm proc~allocate_pixels format_pnm%allocate_pixels proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_format format_pnm%set_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pixels format_pnm%set_pixels proc~set_pnm->proc~set_pixels proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_height format_pnm%set_height proc~set_header->proc~set_height proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_width format_pnm%set_width proc~set_header->proc~set_width proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~set_pnm~~CalledByGraph proc~set_pnm format_pnm%set_pnm proc~save color%save proc~save->proc~set_pnm program~demo_ppm demo_ppm program~demo_ppm->proc~set_pnm program~test test program~test->proc~set_pnm program~test1 test1 program~test1->proc~set_pnm program~test17 test17 program~test17->proc~set_pnm program~test18 test18 program~test18->proc~set_pnm program~test19 test19 program~test19->proc~set_pnm program~test2 test2 program~test2->proc~set_pnm program~test20 test20 program~test20->proc~set_pnm program~test21 test21 program~test21->proc~set_pnm program~test22 test22 program~test22->proc~set_pnm program~test23 test23 program~test23->proc~set_pnm program~test24 test24 program~test24->proc~set_pnm program~test25 test25 program~test25->proc~set_pnm program~test3 test3 program~test3->proc~set_pnm program~test4 test4 program~test4->proc~set_pnm program~test6 test6 program~test6->proc~set_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure subroutine set_pnm ( this , encoding , file_format , width , height , max_color , comment , pixels ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: width integer , intent ( in ) :: height character ( * ), intent ( in ) :: comment integer , optional , intent ( in ) :: max_color integer ( ik ), dimension (:,:), intent ( in ) :: pixels character ( * ), intent ( in ) :: encoding character ( 3 ), intent ( in ) :: file_format character ( 2 ) :: magic_number call this % set_format ( encoding ) call this % set_file_format ( file_format ) select case ( this % encoding ) case ( 'ascii' , 'plain' ) select case ( this % file_format ) case ( 'pbm' ) magic_number = 'P1' case ( 'pgm' ) magic_number = 'P2' case ( 'ppm' ) magic_number = 'P3' end select case ( 'binary' , 'raw' ) select case ( this % file_format ) case ( 'pbm' ) magic_number = 'P4' case ( 'pgm' ) magic_number = 'P5' case ( 'ppm' ) magic_number = 'P6' end select end select call this % set_header ( magic_number , width , height , comment , max_color ) call this % allocate_pixels () call this % set_pixels ( pixels ) end subroutine set_pnm","tags":"","loc":"proc/set_pnm.html"},{"title":"set_width – ForImage","text":"private pure elemental subroutine set_width(this, width) Sets the width of the PNM image. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: width Called by proc~~set_width~~CalledByGraph proc~set_width format_pnm%set_width proc~crop format_pnm%crop proc~crop->proc~set_width proc~flip_horizontal format_pnm%flip_horizontal proc~flip_horizontal->proc~set_width proc~flip_vertical format_pnm%flip_vertical proc~flip_vertical->proc~set_width proc~resize format_pnm%resize proc~resize->proc~set_width proc~rotate format_pnm%rotate proc~rotate->proc~set_width proc~set_header format_pnm%set_header proc~set_header->proc~set_width proc~set_pnm format_pnm%set_pnm proc~set_pnm->proc~set_header program~demo_ppm demo_ppm program~demo_ppm->proc~crop program~demo_ppm->proc~flip_horizontal program~demo_ppm->proc~flip_vertical program~demo_ppm->proc~resize program~demo_ppm->proc~rotate program~demo_ppm->proc~set_pnm program~test22 test22 program~test22->proc~rotate program~test22->proc~set_pnm program~test23 test23 program~test23->proc~flip_horizontal program~test23->proc~flip_vertical program~test23->proc~set_pnm program~test24 test24 program~test24->proc~crop program~test24->proc~set_pnm program~test25 test25 program~test25->proc~resize program~test25->proc~set_pnm proc~save color%save proc~save->proc~set_pnm program~test test program~test->proc~set_pnm program~test1 test1 program~test1->proc~set_pnm program~test17 test17 program~test17->proc~set_pnm program~test18 test18 program~test18->proc~set_pnm program~test19 test19 program~test19->proc~set_pnm program~test2 test2 program~test2->proc~set_pnm program~test20 test20 program~test20->proc~set_pnm program~test21 test21 program~test21->proc~set_pnm program~test3 test3 program~test3->proc~set_pnm program~test4 test4 program~test4->proc~set_pnm program~test6 test6 program~test6->proc~set_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine set_width ( this , width ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: width this % width = width end subroutine set_width","tags":"","loc":"proc/set_width.html"},{"title":"swap_channels – ForImage","text":"private pure elemental subroutine swap_channels(this, swap) Swaps the RGB channels of the image. Only supported for PPM images. Type Bound format_pnm Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: swap Calls proc~~swap_channels~~CallsGraph proc~swap_channels format_pnm%swap_channels proc~check_pixel_range format_pnm%check_pixel_range proc~swap_channels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~swap_channels~~CalledByGraph proc~swap_channels format_pnm%swap_channels program~demo_ppm demo_ppm program~demo_ppm->proc~swap_channels program~test19 test19 program~test19->proc~swap_channels Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental pure subroutine swap_channels ( this , swap ) class ( format_pnm ), intent ( inout ) :: this character ( * ), intent ( in ) :: swap integer ( ik ) :: temp integer :: i , j ! Check if the file is ppm if ( this % file_format /= 'ppm' ) error stop 'swap_channels: This function is only for ppm files.' ! Swap R and G channels if ( swap == 'rg' . or . swap == 'gr' . or . swap == 'RG' . or . swap == 'GR' ) then do i = 1 , this % height do j = 1 , this % width temp = this % pixels ( i , 3 * j - 2 ) this % pixels ( i , 3 * j - 2 ) = this % pixels ( i , 3 * j - 1 ) this % pixels ( i , 3 * j - 1 ) = temp end do end do end if ! Swap G and B channels if ( swap == 'gb' . or . swap == 'bg' . or . swap == 'GB' . or . swap == 'BG' ) then do i = 1 , this % height do j = 1 , this % width temp = this % pixels ( i , 3 * j - 1 ) this % pixels ( i , 3 * j - 1 ) = this % pixels ( i , 3 * j - 0 ) this % pixels ( i , 3 * j - 0 ) = temp end do end do end if ! Swap R and B channels if ( swap == 'rb' . or . swap == 'br' . or . swap == 'RB' . or . swap == 'BR' ) then do i = 1 , this % height do j = 1 , this % width temp = this % pixels ( i , 3 * j - 2 ) this % pixels ( i , 3 * j - 2 ) = this % pixels ( i , 3 * j - 0 ) this % pixels ( i , 3 * j - 0 ) = temp end do end do end if call this % check_pixel_range ( this % pixels ) end subroutine swap_channels","tags":"","loc":"proc/swap_channels.html"},{"title":"write_header – ForImage","text":"private  subroutine write_header(this, nunit) Writes the header of the PNM image to a file. Required before writing the pixels to the file. Arguments Type Intent Optional Attributes Name type( format_pnm ), intent(in) :: this integer, intent(in) :: nunit Called by proc~~write_header~~CalledByGraph proc~write_header write_header proc~export_pnm format_pnm%export_pnm proc~export_pnm->proc~write_header proc~save color%save proc~save->proc~export_pnm program~demo_ppm demo_ppm program~demo_ppm->proc~export_pnm program~test test program~test->proc~export_pnm program~test1 test1 program~test1->proc~export_pnm program~test10 test10 program~test10->proc~export_pnm program~test11 test11 program~test11->proc~export_pnm program~test12 test12 program~test12->proc~export_pnm program~test13 test13 program~test13->proc~export_pnm program~test14 test14 program~test14->proc~export_pnm program~test17 test17 program~test17->proc~export_pnm program~test18 test18 program~test18->proc~export_pnm program~test19 test19 program~test19->proc~export_pnm program~test2 test2 program~test2->proc~export_pnm program~test20 test20 program~test20->proc~export_pnm program~test21 test21 program~test21->proc~export_pnm program~test22 test22 program~test22->proc~export_pnm program~test23 test23 program~test23->proc~export_pnm program~test24 test24 program~test24->proc~export_pnm program~test25 test25 program~test25->proc~export_pnm program~test3 test3 program~test3->proc~export_pnm program~test4 test4 program~test4->proc~export_pnm program~test6 test6 program~test6->proc~export_pnm program~test7 test7 program~test7->proc~export_pnm program~test8 test8 program~test8->proc~export_pnm program~test9 test9 program~test9->proc~export_pnm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine write_header ( this , nunit ) type ( format_pnm ), intent ( in ) :: this integer , intent ( in ) :: nunit integer :: i , k ! Write magic number write ( nunit , '(a)' ) this % magic_number ! Write comments k = ceiling ( real ( len ( adjustl ( this % comment ))) / 7 0.0 ) if ( len ( adjustl ( this % comment )) /= 0 . and . len ( adjustl ( this % comment )) <= 70 ) then write ( nunit , '(a,a)' ) '# ' , trim ( adjustl ( this % comment )) else if ( len ( adjustl ( this % comment )) /= 0 . and . len ( adjustl ( this % comment )) > 70 ) then do i = 1 , k - 1 write ( nunit , '(a,a)' ) '# ' , adjustl ( this % comment ( 70 * ( i - 1 ) + 1 : 70 * ( i - 1 ) + 70 )) end do write ( nunit , '(a,a)' ) '# ' , trim ( adjustl ( this % comment ( 70 * ( k - 1 ) + 1 :))) end if ! Write width, height and max_color write ( nunit , '(g0,1x,g0)' ) this % width , this % height if ( this % file_format /= 'pbm' ) write ( nunit , '(g0)' ) this % max_color end subroutine write_header","tags":"","loc":"proc/write_header.html"},{"title":"mandelbrot – ForImage","text":"pure function mandelbrot(h, w) result(pixels) Arguments Type Intent Optional Attributes Name integer, intent(in) :: h integer, intent(in) :: w Return Value integer(kind=ik), (h,3*w) Called by proc~~mandelbrot~~CalledByGraph proc~mandelbrot mandelbrot program~demo_ppm demo_ppm program~demo_ppm->proc~mandelbrot Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/mandelbrot.html"},{"title":"check – ForImage","text":"subroutine check(tol, name, r, g, b, hex, decimal, c, m, y, k, h, s, v, hl, sl, vl, xyz_x, xyz_y, xyz_z) Arguments Type Intent Optional Attributes Name real(kind=rk), intent(in) :: tol character(len=*), intent(in) :: name integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b character(len=*), intent(in) :: hex integer(kind=ik), intent(in) :: decimal integer(kind=ik), intent(in) :: c integer(kind=ik), intent(in) :: m integer(kind=ik), intent(in) :: y integer(kind=ik), intent(in) :: k real(kind=rk), intent(in) :: h real(kind=rk), intent(in) :: s real(kind=rk), intent(in) :: v real(kind=rk), intent(in) :: hl real(kind=rk), intent(in) :: sl real(kind=rk), intent(in) :: vl real(kind=rk), intent(in) :: xyz_x real(kind=rk), intent(in) :: xyz_y real(kind=rk), intent(in) :: xyz_z Called by proc~~check~~CalledByGraph proc~check check program~example26 example26 program~example26->proc~check Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) character ( len =* ), intent ( in ) :: name integer ( ik ), intent ( in ) :: r , g , b character ( len =* ), intent ( in ) :: hex integer ( ik ), intent ( in ) :: decimal integer ( ik ), intent ( in ) :: c , m , y , k real ( rk ), intent ( in ) :: h , s , v real ( rk ), intent ( in ) :: hl , sl , vl real ( rk ), intent ( in ) :: xyz_x , xyz_y , xyz_z real ( rk ), intent ( in ) :: tol ! check output: if ( name /= 'custom_color' ) print * , 'ERROR: name /= ''custom_color''' if ( r /= 245_ik ) print * , 'ERROR: r /= 245' if ( g /= 127_ik ) print * , 'ERROR: g /= 127' if ( b /= 64_ik ) print * , 'ERROR: b /= 64' if ( hex /= '#F57F40' ) print * , 'ERROR: hex /= ''#F57F40''' if ( decimal /= 16088896_ik ) print * , 'ERROR: decimal /= 16088896' if ( c /= 0_ik ) print * , 'ERROR: c /= 0' if ( m /= 48_ik ) print * , 'ERROR: m /= 48' if ( y /= 74_ik ) print * , 'ERROR: y /= 74' if ( k /= 4_ik ) print * , 'ERROR: k /= 4' if ( abs ( h - 2 0.883977900552487_rk ) > tol ) print * , 'ERROR: h /= 20.8840' if ( abs ( s - 7 3.877551020408163_rk ) > tol ) print * , 'ERROR: s /= 73.8776' if ( abs ( v - 9 6.078431372549019_rk ) > tol ) print * , 'ERROR: v /= 96.0784' if ( abs ( hl - 2 0.883977900552487_rk ) > tol ) print * , 'ERROR: hl /= 20.8840' if ( abs ( sl - 9 0.049751243781117_rk ) > tol ) print * , 'ERROR: sl /= 90.0498' if ( abs ( vl - 6 0.588235294117652_rk ) > tol ) print * , 'ERROR: vl /= 60.5882' if ( abs ( xyz_x - 4 6.175296219509761_rk ) > tol ) print * , 'ERROR: xyz_x /= 46.1753' if ( abs ( xyz_y - 3 4.966900449347115_rk ) > tol ) print * , 'ERROR: xyz_y /= 34.9669' if ( abs ( xyz_z - 9.1671542959237478_rk ) > tol ) print * , 'ERROR: xyz_z /= 9.1672' end subroutine check","tags":"","loc":"proc/check.html"},{"title":"lut – ForImage","text":"Used by module~~lut~~UsedByGraph module~lut lut module~forimage forimage module~forimage->module~lut program~demo_color demo_color program~demo_color->module~forimage program~demo_ppm demo_ppm program~demo_ppm->module~forimage program~example26 example26 program~example26->module~forimage program~example27 example27 program~example27->module~forimage program~example28 example28 program~example28->module~forimage program~example29 example29 program~example29->module~forimage program~test test program~test->module~forimage program~test1 test1 program~test1->module~forimage program~test10 test10 program~test10->module~forimage program~test11 test11 program~test11->module~forimage program~test12 test12 program~test12->module~forimage program~test13 test13 program~test13->module~forimage program~test14 test14 program~test14->module~forimage program~test15 test15 program~test15->module~forimage program~test16 test16 program~test16->module~forimage program~test17 test17 program~test17->module~forimage program~test18 test18 program~test18->module~forimage program~test19 test19 program~test19->module~forimage program~test2 test2 program~test2->module~forimage program~test20 test20 program~test20->module~forimage program~test21 test21 program~test21->module~forimage program~test22 test22 program~test22->module~forimage program~test23 test23 program~test23->module~forimage program~test24 test24 program~test24->module~forimage program~test25 test25 program~test25->module~forimage program~test3 test3 program~test3->module~forimage program~test4 test4 program~test4->module~forimage program~test6 test6 program~test6->module~forimage program~test7 test7 program~test7->module~forimage program~test8 test8 program~test8->module~forimage program~test9 test9 program~test9->module~forimage Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Derived Types type, public :: format_lut Components Type Visibility Attributes Name Initial integer, public, dimension(:,:), allocatable :: colors integer, public :: dim_colors integer, public :: num_colors Type-Bound Procedures procedure, public :: allocate_colors procedure, public :: export procedure, public :: finalize => deallocate_lut procedure, public :: get_colors procedure, public :: get_dim_colors procedure, public :: get_num_colors procedure, public :: import procedure, public :: set procedure, public :: set_colors procedure, public :: set_dim_colors procedure, public :: set_num_colors Functions private pure function get_colors (this) result(colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(in) :: this Return Value integer, dimension(:,:), allocatable private pure elemental function get_dim_colors (this) result(dim_colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(in) :: this Return Value integer private pure elemental function get_num_colors (this) result(num_colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(in) :: this Return Value integer Subroutines private pure elemental subroutine allocate_colors (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this private pure elemental subroutine deallocate_lut (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this private impure subroutine export (this, file_name) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this character(len=*), intent(in) :: file_name private impure subroutine import (this, file_name, dim_colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this character(len=*), intent(in) :: file_name integer, intent(in) :: dim_colors private pure subroutine set (this, num_colors, dim_colors, colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this integer, intent(in) :: num_colors integer, intent(in) :: dim_colors integer, intent(in), dimension(:,:) :: colors private pure subroutine set_colors (this, colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this integer, intent(in), dimension(:,:) :: colors private pure elemental subroutine set_dim_colors (this, dim_colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this integer, intent(in) :: dim_colors private pure elemental subroutine set_num_colors (this, num_colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( format_lut ), intent(inout) :: this integer, intent(in) :: num_colors","tags":"","loc":"module/lut.html"},{"title":"forcolor – ForImage","text":"Uses pnm forimage_parameters module~~forcolor~~UsesGraph module~forcolor forcolor module~forimage_parameters forimage_parameters module~forcolor->module~forimage_parameters module~pnm pnm module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~forcolor~~UsedByGraph module~forcolor forcolor module~forimage forimage module~forimage->module~forcolor program~demo_color demo_color program~demo_color->module~forimage program~demo_ppm demo_ppm program~demo_ppm->module~forimage program~example26 example26 program~example26->module~forimage program~example27 example27 program~example27->module~forimage program~example28 example28 program~example28->module~forimage program~example29 example29 program~example29->module~forimage program~test test program~test->module~forimage program~test1 test1 program~test1->module~forimage program~test10 test10 program~test10->module~forimage program~test11 test11 program~test11->module~forimage program~test12 test12 program~test12->module~forimage program~test13 test13 program~test13->module~forimage program~test14 test14 program~test14->module~forimage program~test15 test15 program~test15->module~forimage program~test16 test16 program~test16->module~forimage program~test17 test17 program~test17->module~forimage program~test18 test18 program~test18->module~forimage program~test19 test19 program~test19->module~forimage program~test2 test2 program~test2->module~forimage program~test20 test20 program~test20->module~forimage program~test21 test21 program~test21->module~forimage program~test22 test22 program~test22->module~forimage program~test23 test23 program~test23->module~forimage program~test24 test24 program~test24->module~forimage program~test25 test25 program~test25->module~forimage program~test3 test3 program~test3->module~forimage program~test4 test4 program~test4->module~forimage program~test6 test6 program~test6->module~forimage program~test7 test7 program~test7->module~forimage program~test8 test8 program~test8->module~forimage program~test9 test9 program~test9->module~forimage Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Derived Types type, public :: color Components Type Visibility Attributes Name Initial integer(kind=ik), private :: b = 0_ik rgb integer(kind=ik), private :: c = 0_ik cmyk character(len=256), private :: color_name color name integer(kind=ik), private :: decimal = 0_ik decimal integer(kind=ik), private :: g = 0_ik rgb real(kind=rk), private :: h = 0.0_rk hsv character(len=7), private :: hex = '#000000' hex real(kind=rk), private :: hl = 0.0_rk hsl integer(kind=ik), private :: k = 0_ik cmyk integer(kind=ik), private :: m = 0_ik cmyk integer(kind=ik), private :: r = 0_ik rgb real(kind=rk), private :: s = 0.0_rk hsv real(kind=rk), private :: sl = 0.0_rk hsl real(kind=rk), private :: v = 0.0_rk hsv real(kind=rk), private :: vl = 0.0_rk hsl real(kind=rk), private :: xyz_x = 0.0_rk xyz real(kind=rk), private :: xyz_y = 0.0_rk xyz real(kind=rk), private :: xyz_z = 0.0_rk xyz integer(kind=ik), private :: y = 0_ik cmyk Type-Bound Procedures generic, public :: assignment(=) => copy_color procedure, public :: convert procedure, public :: find_nearest procedure, public :: get procedure, public :: print procedure, public :: print_available_colors procedure, public :: save procedure, public :: save_available_colors procedure, public :: set procedure, private :: copy_color procedure, private :: get_cmyk procedure, private :: get_decimal procedure, private :: get_hex procedure, private :: get_hsl procedure, private :: get_hsv procedure, private :: get_name procedure, private :: get_rgb procedure, private :: get_xyz procedure, private :: print_cmyk procedure, private :: print_decimal procedure, private :: print_hex procedure, private :: print_hsl procedure, private :: print_hsv procedure, private :: print_name procedure, private :: print_rgb procedure, private :: print_xyz procedure, private :: set_by_name procedure, private :: set_cmyk procedure, private :: set_decimal procedure, private :: set_hex procedure, private :: set_hsl procedure, private :: set_hsv procedure, private :: set_name procedure, private :: set_rgb procedure, private :: set_xyz Subroutines private pure elemental subroutine cmyk_to_rgb (c, m, y, k, r, g, b) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: c integer(kind=ik), intent(in) :: m integer(kind=ik), intent(in) :: y integer(kind=ik), intent(in) :: k integer(kind=ik), intent(out) :: r integer(kind=ik), intent(out) :: g integer(kind=ik), intent(out) :: b private pure elemental subroutine convert (this, to) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in) :: to private pure elemental subroutine copy_color (this, from) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this class( color ), intent(in) :: from private pure elemental subroutine decimal_to_rgb (decimal, r, g, b) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: decimal integer(kind=ik), intent(out) :: r integer(kind=ik), intent(out) :: g integer(kind=ik), intent(out) :: b private pure elemental subroutine find_nearest (this, nearest_color) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this type( color ), intent(out) :: nearest_color private pure elemental subroutine get (this, name, r, g, b, c, m, y, k, decimal, hex, h, s, v, hl, sl, vl, xyz_x, xyz_y, xyz_z) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(out), optional :: name integer(kind=ik), intent(out), optional :: r integer(kind=ik), intent(out), optional :: g integer(kind=ik), intent(out), optional :: b integer(kind=ik), intent(out), optional :: c integer(kind=ik), intent(out), optional :: m integer(kind=ik), intent(out), optional :: y integer(kind=ik), intent(out), optional :: k integer(kind=ik), intent(out), optional :: decimal character(len=7), intent(out), optional :: hex real(kind=rk), intent(out), optional :: h real(kind=rk), intent(out), optional :: s real(kind=rk), intent(out), optional :: v real(kind=rk), intent(out), optional :: hl real(kind=rk), intent(out), optional :: sl real(kind=rk), intent(out), optional :: vl real(kind=rk), intent(out), optional :: xyz_x real(kind=rk), intent(out), optional :: xyz_y real(kind=rk), intent(out), optional :: xyz_z private pure elemental subroutine get_cmyk (this, c, m, y, k) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this integer(kind=ik), intent(out) :: c integer(kind=ik), intent(out) :: m integer(kind=ik), intent(out) :: y integer(kind=ik), intent(out) :: k private pure elemental subroutine get_decimal (this, decimal) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this integer(kind=ik), intent(out) :: decimal private pure elemental subroutine get_hex (this, hex) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this character(len=*), intent(out) :: hex private pure elemental subroutine get_hsl (this, h, s, l) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this real(kind=rk), intent(out) :: h real(kind=rk), intent(out) :: s real(kind=rk), intent(out) :: l private pure elemental subroutine get_hsv (this, h, s, v) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this real(kind=rk), intent(out) :: h real(kind=rk), intent(out) :: s real(kind=rk), intent(out) :: v private pure elemental subroutine get_name (this, name) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this character(len=*), intent(out) :: name private pure elemental subroutine get_rgb (this, r, g, b) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this integer(kind=ik), intent(out) :: r integer(kind=ik), intent(out) :: g integer(kind=ik), intent(out) :: b private pure elemental subroutine get_xyz (this, x, y, z) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this real(kind=rk), intent(out) :: x real(kind=rk), intent(out) :: y real(kind=rk), intent(out) :: z private pure elemental subroutine hex_to_rgb (hex, r, g, b) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: hex integer(kind=ik), intent(out) :: r integer(kind=ik), intent(out) :: g integer(kind=ik), intent(out) :: b private pure elemental subroutine hsl_to_rgb (h, s, l, r, g, b) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name real(kind=rk), intent(in) :: h real(kind=rk), intent(in) :: s real(kind=rk), intent(in) :: l integer(kind=ik), intent(out) :: r integer(kind=ik), intent(out) :: g integer(kind=ik), intent(out) :: b private pure elemental subroutine hsv_to_rgb (h, s, v, r, g, b) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name real(kind=rk), intent(in) :: h real(kind=rk), intent(in) :: s real(kind=rk), intent(in) :: v integer(kind=ik), intent(out) :: r integer(kind=ik), intent(out) :: g integer(kind=ik), intent(out) :: b private pure subroutine initialize_colors (colors) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name type( color ), intent(out), dimension(:), allocatable :: colors private impure elemental subroutine print (this, option) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in), optional :: option private impure elemental subroutine print_available_colors (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this private impure elemental subroutine print_cmyk (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this private impure elemental subroutine print_decimal (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this private impure elemental subroutine print_hex (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this private impure elemental subroutine print_hsl (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this private impure elemental subroutine print_hsv (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this private impure elemental subroutine print_name (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this private impure elemental subroutine print_rgb (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this private impure elemental subroutine print_xyz (this) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(in) :: this private pure elemental subroutine rgb_to_cmyk (r, g, b, c, m, y, k) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b integer(kind=ik), intent(out) :: c integer(kind=ik), intent(out) :: m integer(kind=ik), intent(out) :: y integer(kind=ik), intent(out) :: k private pure elemental subroutine rgb_to_decimal (r, g, b, decimal) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b integer(kind=ik), intent(out) :: decimal private pure elemental subroutine rgb_to_hex (r, g, b, hex) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b character(len=7), intent(out) :: hex private pure elemental subroutine rgb_to_hsl (r, g, b, h, s, l) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b real(kind=rk), intent(out) :: h real(kind=rk), intent(out) :: s real(kind=rk), intent(out) :: l private pure elemental subroutine rgb_to_hsv (r, g, b, h, s, v) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b real(kind=rk), intent(out) :: h real(kind=rk), intent(out) :: s real(kind=rk), intent(out) :: v private pure elemental subroutine rgb_to_xyz (r, g, b, x, y, z) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b real(kind=rk), intent(out) :: x real(kind=rk), intent(out) :: y real(kind=rk), intent(out) :: z private impure elemental subroutine save (this, file_name, height, width) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in), optional :: file_name integer, intent(in), optional :: height integer, intent(in), optional :: width private impure elemental subroutine save_available_colors (this, file_name, height, width) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in), optional :: file_name integer, intent(in), optional :: height integer, intent(in), optional :: width private pure elemental subroutine set (this, name, r, g, b, c, m, y, k, decimal, hex, h, s, v, hl, sl, vl, xyz_x, xyz_y, xyz_z, use_library) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in) :: name integer(kind=ik), intent(in), optional :: r integer(kind=ik), intent(in), optional :: g integer(kind=ik), intent(in), optional :: b integer(kind=ik), intent(in), optional :: c integer(kind=ik), intent(in), optional :: m integer(kind=ik), intent(in), optional :: y integer(kind=ik), intent(in), optional :: k integer(kind=ik), intent(in), optional :: decimal character(len=*), intent(in), optional :: hex real(kind=rk), intent(in), optional :: h real(kind=rk), intent(in), optional :: s real(kind=rk), intent(in), optional :: v real(kind=rk), intent(in), optional :: hl real(kind=rk), intent(in), optional :: sl real(kind=rk), intent(in), optional :: vl real(kind=rk), intent(in), optional :: xyz_x real(kind=rk), intent(in), optional :: xyz_y real(kind=rk), intent(in), optional :: xyz_z logical, intent(in), optional :: use_library private pure elemental subroutine set_by_name (this, name) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in) :: name private pure elemental subroutine set_cmyk (this, c, m, y, k) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this integer(kind=ik), intent(in) :: c integer(kind=ik), intent(in) :: m integer(kind=ik), intent(in) :: y integer(kind=ik), intent(in) :: k private pure elemental subroutine set_decimal (this, decimal) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this integer(kind=ik), intent(in) :: decimal private pure elemental subroutine set_hex (this, hex) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in) :: hex private pure elemental subroutine set_hsl (this, h, s, l) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this real(kind=rk), intent(in) :: h real(kind=rk), intent(in) :: s real(kind=rk), intent(in) :: l private pure elemental subroutine set_hsv (this, h, s, v) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this real(kind=rk), intent(in) :: h real(kind=rk), intent(in) :: s real(kind=rk), intent(in) :: v private pure elemental subroutine set_name (this, name) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this character(len=*), intent(in) :: name private pure elemental subroutine set_rgb (this, r, g, b) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b private pure elemental subroutine set_xyz (this, x, y, z) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name class( color ), intent(inout) :: this real(kind=rk), intent(in) :: x real(kind=rk), intent(in) :: y real(kind=rk), intent(in) :: z private pure elemental subroutine xyz_to_rgb (x, y, z, r, g, b) Author Seyed Ali Ghasemi License BSD 3-Clause Arguments Type Intent Optional Attributes Name real(kind=rk), intent(in) :: x real(kind=rk), intent(in) :: y real(kind=rk), intent(in) :: z integer(kind=ik), intent(out) :: r integer(kind=ik), intent(out) :: g integer(kind=ik), intent(out) :: b","tags":"","loc":"module/forcolor.html"},{"title":"forimage_parameters – ForImage","text":"Uses iso_fortran_env module~~forimage_parameters~~UsesGraph module~forimage_parameters forimage_parameters iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~forimage_parameters~~UsedByGraph module~forimage_parameters forimage_parameters module~forcolor forcolor module~forcolor->module~forimage_parameters module~pnm pnm module~forcolor->module~pnm module~forimage forimage module~forimage->module~forimage_parameters module~forimage->module~forcolor module~forimage->module~pnm module~pnm->module~forimage_parameters program~demo_color demo_color program~demo_color->module~forimage program~demo_ppm demo_ppm program~demo_ppm->module~forimage program~example26 example26 program~example26->module~forimage program~example27 example27 program~example27->module~forimage program~example28 example28 program~example28->module~forimage program~example29 example29 program~example29->module~forimage program~test test program~test->module~forimage program~test1 test1 program~test1->module~forimage program~test10 test10 program~test10->module~forimage program~test11 test11 program~test11->module~forimage program~test12 test12 program~test12->module~forimage program~test13 test13 program~test13->module~forimage program~test14 test14 program~test14->module~forimage program~test15 test15 program~test15->module~forimage program~test16 test16 program~test16->module~forimage program~test17 test17 program~test17->module~forimage program~test18 test18 program~test18->module~forimage program~test19 test19 program~test19->module~forimage program~test2 test2 program~test2->module~forimage program~test20 test20 program~test20->module~forimage program~test21 test21 program~test21->module~forimage program~test22 test22 program~test22->module~forimage program~test23 test23 program~test23->module~forimage program~test24 test24 program~test24->module~forimage program~test25 test25 program~test25->module~forimage program~test3 test3 program~test3->module~forimage program~test4 test4 program~test4->module~forimage program~test6 test6 program~test6->module~forimage program~test7 test7 program~test7->module~forimage program~test8 test8 program~test8->module~forimage program~test9 test9 program~test9->module~forimage Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial real(kind=rk), public, parameter :: pi = 4.0_rk*atan(1.0_rk)","tags":"","loc":"module/forimage_parameters.html"},{"title":"forimage – ForImage","text":"Uses lut pnm forimage_parameters forcolor module~~forimage~~UsesGraph module~forimage forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~forimage~~UsedByGraph module~forimage forimage program~demo_color demo_color program~demo_color->module~forimage program~demo_ppm demo_ppm program~demo_ppm->module~forimage program~example26 example26 program~example26->module~forimage program~example27 example27 program~example27->module~forimage program~example28 example28 program~example28->module~forimage program~example29 example29 program~example29->module~forimage program~test test program~test->module~forimage program~test1 test1 program~test1->module~forimage program~test10 test10 program~test10->module~forimage program~test11 test11 program~test11->module~forimage program~test12 test12 program~test12->module~forimage program~test13 test13 program~test13->module~forimage program~test14 test14 program~test14->module~forimage program~test15 test15 program~test15->module~forimage program~test16 test16 program~test16->module~forimage program~test17 test17 program~test17->module~forimage program~test18 test18 program~test18->module~forimage program~test19 test19 program~test19->module~forimage program~test2 test2 program~test2->module~forimage program~test20 test20 program~test20->module~forimage program~test21 test21 program~test21->module~forimage program~test22 test22 program~test22->module~forimage program~test23 test23 program~test23->module~forimage program~test24 test24 program~test24->module~forimage program~test25 test25 program~test25->module~forimage program~test3 test3 program~test3->module~forimage program~test4 test4 program~test4->module~forimage program~test6 test6 program~test6->module~forimage program~test7 test7 program~test7->module~forimage program~test8 test8 program~test8->module~forimage program~test9 test9 program~test9->module~forimage Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"module/forimage.html"},{"title":"pnm – ForImage","text":"This module defines the format_pnm type for handling PNM (Portable Any Map) image files.\nPNM files include both ASCII and binary representations for various image types, such as PBM, PGM, and PPM.\nThe module offers functionalities to manipulate, import, and export PNM images, along with image processing. Uses forimage_parameters module~~pnm~~UsesGraph module~pnm pnm module~forimage_parameters forimage_parameters module~pnm->module~forimage_parameters iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~pnm~~UsedByGraph module~pnm pnm module~forcolor forcolor module~forcolor->module~pnm module~forimage forimage module~forimage->module~pnm module~forimage->module~forcolor program~demo_color demo_color program~demo_color->module~forimage program~demo_ppm demo_ppm program~demo_ppm->module~forimage program~example26 example26 program~example26->module~forimage program~example27 example27 program~example27->module~forimage program~example28 example28 program~example28->module~forimage program~example29 example29 program~example29->module~forimage program~test test program~test->module~forimage program~test1 test1 program~test1->module~forimage program~test10 test10 program~test10->module~forimage program~test11 test11 program~test11->module~forimage program~test12 test12 program~test12->module~forimage program~test13 test13 program~test13->module~forimage program~test14 test14 program~test14->module~forimage program~test15 test15 program~test15->module~forimage program~test16 test16 program~test16->module~forimage program~test17 test17 program~test17->module~forimage program~test18 test18 program~test18->module~forimage program~test19 test19 program~test19->module~forimage program~test2 test2 program~test2->module~forimage program~test20 test20 program~test20->module~forimage program~test21 test21 program~test21->module~forimage program~test22 test22 program~test22->module~forimage program~test23 test23 program~test23->module~forimage program~test24 test24 program~test24->module~forimage program~test25 test25 program~test25->module~forimage program~test3 test3 program~test3->module~forimage program~test4 test4 program~test4->module~forimage program~test6 test6 program~test6->module~forimage program~test7 test7 program~test7->module~forimage program~test8 test8 program~test8->module~forimage program~test9 test9 program~test9->module~forimage Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Derived Types type, public :: format_pnm This type is designed to store and manipulate PNM (Portable Any Map) image files. Components Type Visibility Attributes Name Initial integer(kind=ik), public, dimension(:,:), allocatable :: pixels Pixel values of the image. character(len=:), private, allocatable :: comment Optional comment associated with the image. character(len=6), private :: encoding Encoding of the PNM image ( ascii or plain , binary or raw ). character(len=3), private :: file_format File format of the PNM image ( pbm , pgm , ppm ). integer, private :: height Height (number of rows) of the image. character(len=2), private :: magic_number Magic number representing the PNM image type ( P1 , P2 , P3 , P4 , P5 , P6 ). integer, private :: max_color Maximum color value of the image. Used for PGM and PPM images. integer, private :: width Width (number of columns) of the image. Type-Bound Procedures procedure, public :: brighten Adjust the brightness and darkness of the image. Read more… procedure, public :: crop Crop the image to a specified region. Read more… procedure, public :: export_pnm Write an image to a file. Read more… procedure, public :: finalize => deallocate_pnm Clean up allocated memory for the PNM image. Read more… procedure, public :: flip_horizontal Flip the image horizontally. Read more… procedure, public :: flip_vertical Flip the image vertically. Read more… procedure, public :: get_format Get the encoding of the PNM image. Read more… procedure, public :: greyscale Convert a color image to greyscale. Read more… procedure, public :: import_pnm Read an image from a file. Read more… procedure, public :: negative Invert the colors of the image. Read more… procedure, public :: print_info Display information about the image (dimensions, aspect ratio, etc.). Read more… procedure, public :: remove_channels Remove one or more RGB channels from the image. Read more… procedure, public :: resize Resize the image to a specified size. Read more… procedure, public :: rotate Rotate the image by a specified angle. Read more… procedure, public :: set_format Set the encoding of the PNM image. Read more… procedure, public :: set_pnm Set the attributes of the PNM image. Read more… procedure, public :: swap_channels Swap the RGB channels of the image. Read more… procedure, private :: allocate_pixels Allocate memory for the pixels of the PNM image. Read more… procedure, private :: check_pixel_range Check if the pixel values are within the valid range. Read more… procedure, private :: set_comment Set a comment for the PNM image. Read more… procedure, private :: set_file_format Set the file format of the PNM image. Read more… procedure, private :: set_header Set the header of the PNM image. Read more… procedure, private :: set_height Set the height of the PNM image. Read more… procedure, private :: set_magicnumber Set the magic number of the PNM image. Read more… procedure, private :: set_max_color Set the maximum color value of the PNM image. Read more… procedure, private :: set_pixels Set the pixel values of the PNM image. Read more… procedure, private :: set_width Set the width of the PNM image. Read more… Functions private pure function get_format (this) result(encoding) Author Seyed Ali Ghasemi License BSD 3-Clause Gets the encoding of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(in) :: this Return Value character(len=:), allocatable Subroutines private pure elemental subroutine allocate_pixels (this) Author Seyed Ali Ghasemi License BSD 3-Clause Allocates memory for the pixels of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this private pure elemental subroutine aspect_ratio (this, ratio) Author Seyed Ali Ghasemi License BSD 3-Clause Calculates the aspect ratio of the image. Required for print_info method. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(in) :: this real(kind=rk), intent(out) :: ratio private pure elemental subroutine average_colors (this, avg, avg_red, avg_green, avg_blue) Author Seyed Ali Ghasemi License BSD 3-Clause Calculates the average color values of the image. Required for print_info method. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(in) :: this real(kind=rk), intent(out), optional :: avg real(kind=rk), intent(out), optional :: avg_red real(kind=rk), intent(out), optional :: avg_green real(kind=rk), intent(out), optional :: avg_blue private pure elemental subroutine brighten (this, factor) Author Seyed Ali Ghasemi License BSD 3-Clause Brightens or darkens the image. Only supported for PGM and PPM images. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: factor private pure subroutine check_pixel_range (this, pixels) Author Seyed Ali Ghasemi License BSD 3-Clause Checks if the pixel values are within the valid range. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer(kind=ik), intent(in), dimension(:,:) :: pixels private pure elemental subroutine crop (this, start_row, end_row, start_col, end_col) Author Seyed Ali Ghasemi License BSD 3-Clause Crops the image to a specified region. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: start_row integer, intent(in) :: end_row integer, intent(in) :: start_col integer, intent(in) :: end_col private pure elemental subroutine deallocate_pnm (this) Author Seyed Ali Ghasemi License BSD 3-Clause Deallocates memory for the pixels of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this private impure subroutine export_pnm (this, file_name, encoding) Author Seyed Ali Ghasemi License BSD 3-Clause Writes the PNM image to a file. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: file_name character(len=*), intent(in), optional :: encoding private pure elemental subroutine flip_horizontal (this) Author Seyed Ali Ghasemi License BSD 3-Clause Flips the image horizontally. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this private pure elemental subroutine flip_vertical (this) Author Seyed Ali Ghasemi License BSD 3-Clause Flips the image vertically. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this private pure elemental subroutine greyscale (this) Author Seyed Ali Ghasemi License BSD 3-Clause Converts a color image to greyscale. Only supported for PPM images. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this private impure subroutine import_pnm (this, file_name, file_format, encoding) Author Seyed Ali Ghasemi License BSD 3-Clause Reads a PNM image from a file. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: file_name character(len=3), intent(in) :: file_format character(len=*), intent(in) :: encoding private pure elemental subroutine negative (this) Author Seyed Ali Ghasemi License BSD 3-Clause Inverts the colors of the image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this private pure elemental subroutine pixel_size (this, pixel_size_kb, pixel_size_mb) Author Seyed Ali Ghasemi License BSD 3-Clause Calculates imgae size in KB and MB. Required for print_info method. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(in) :: this real(kind=rk), intent(out) :: pixel_size_kb real(kind=rk), intent(out) :: pixel_size_mb private impure elemental subroutine print_info (this) Author Seyed Ali Ghasemi License BSD 3-Clause Displays information about the image e.g. dimensions, aspect ratio, etc. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(in) :: this private  subroutine read_header (this, nunit, pos) Author Seyed Ali Ghasemi License BSD 3-Clause Reads the header of the PNM image from a file. Required before reading the pixels from the file. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: nunit integer, intent(out) :: pos private pure elemental subroutine remove_channels (this, remove_r, remove_g, remove_b) Author Seyed Ali Ghasemi License BSD 3-Clause Removes one or more RGB channels from the image. Only supported for PPM images. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this logical, intent(in), optional :: remove_r logical, intent(in), optional :: remove_g logical, intent(in), optional :: remove_b private pure elemental subroutine resize (this, new_height, new_width) Author Seyed Ali Ghasemi License BSD 3-Clause Resizes the image to specified dimensions. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: new_height integer, intent(in) :: new_width private pure elemental subroutine rotate (this, angle) Author Seyed Ali Ghasemi License BSD 3-Clause Rotates the image by a specified angle. Supported angles are 90, 180, 270, -90, -180, -270. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: angle private pure elemental subroutine set_comment (this, comment) Author Seyed Ali Ghasemi License BSD 3-Clause Sets a comment for the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: comment private pure elemental subroutine set_file_format (this, file_format) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the file format of the PNM image. Supported values are pbm , pgm , and ppm . Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=3), intent(in) :: file_format private pure elemental subroutine set_format (this, encoding) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the encoding of the PNM image. Supported values are ascii or plain and binary or raw . Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: encoding private pure elemental subroutine set_header (this, magic_number, width, height, comment, max_color) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the header of the PNM image. The header includes the magic number, width, height, comment, and max_color. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: magic_number integer, intent(in) :: width integer, intent(in) :: height character(len=*), intent(in) :: comment integer, intent(in), optional :: max_color private pure elemental subroutine set_height (this, height) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the height of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: height private pure elemental subroutine set_magicnumber (this, magic_number) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the magic number of the PNM image. Supported values are P1 , P2 , P3 , P4 , P5 , and P6 . Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: magic_number private pure elemental subroutine set_max_color (this, max_color) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the maximum color value of the PNM image. Only required for PGM and PPM images Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: max_color private pure elemental subroutine set_pixel (this, grey, r, g, b, i, j) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the pixel values of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in), optional :: grey integer, intent(in), optional :: r integer, intent(in), optional :: g integer, intent(in), optional :: b integer, intent(in) :: i integer, intent(in) :: j private pure subroutine set_pixels (this, pixels) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the pixel values of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer(kind=ik), intent(in), dimension(:,:) :: pixels private pure subroutine set_pnm (this, encoding, file_format, width, height, max_color, comment, pixels) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the attributes of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: encoding character(len=3), intent(in) :: file_format integer, intent(in) :: width integer, intent(in) :: height integer, intent(in), optional :: max_color character(len=*), intent(in) :: comment integer(kind=ik), intent(in), dimension(:,:) :: pixels private pure elemental subroutine set_width (this, width) Author Seyed Ali Ghasemi License BSD 3-Clause Sets the width of the PNM image. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this integer, intent(in) :: width private pure elemental subroutine swap_channels (this, swap) Author Seyed Ali Ghasemi License BSD 3-Clause Swaps the RGB channels of the image. Only supported for PPM images. Arguments Type Intent Optional Attributes Name class( format_pnm ), intent(inout) :: this character(len=*), intent(in) :: swap private  subroutine write_header (this, nunit) Author Seyed Ali Ghasemi License BSD 3-Clause Writes the header of the PNM image to a file. Required before writing the pixels to the file. Arguments Type Intent Optional Attributes Name type( format_pnm ), intent(in) :: this integer, intent(in) :: nunit","tags":"","loc":"module/pnm.html"},{"title":"example28 – ForImage","text":"Uses forimage program~~example28~~UsesGraph program~example28 example28 module~forimage forimage program~example28->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~example28~~CallsGraph program~example28 example28 proc~set~2 color%set program~example28->proc~set~2 proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~set_cmyk color%set_cmyk proc~set~2->proc~set_cmyk proc~set_decimal color%set_decimal proc~set~2->proc~set_decimal proc~set_hex color%set_hex proc~set~2->proc~set_hex proc~set_hsl color%set_hsl proc~set~2->proc~set_hsl proc~set_hsv color%set_hsv proc~set~2->proc~set_hsv proc~set_name color%set_name proc~set~2->proc~set_name proc~set_rgb color%set_rgb proc~set~2->proc~set_rgb proc~set_xyz color%set_xyz proc~set~2->proc~set_xyz proc~initialize_colors initialize_colors proc~set_by_name->proc~initialize_colors proc~initialize_colors->proc~set~2 proc~convert color%convert proc~initialize_colors->proc~convert proc~cmyk_to_rgb cmyk_to_rgb proc~convert->proc~cmyk_to_rgb proc~decimal_to_rgb decimal_to_rgb proc~convert->proc~decimal_to_rgb proc~hex_to_rgb hex_to_rgb proc~convert->proc~hex_to_rgb proc~hsl_to_rgb hsl_to_rgb proc~convert->proc~hsl_to_rgb proc~hsv_to_rgb hsv_to_rgb proc~convert->proc~hsv_to_rgb proc~rgb_to_cmyk rgb_to_cmyk proc~convert->proc~rgb_to_cmyk proc~rgb_to_decimal rgb_to_decimal proc~convert->proc~rgb_to_decimal proc~rgb_to_hex rgb_to_hex proc~convert->proc~rgb_to_hex proc~rgb_to_hsl rgb_to_hsl proc~convert->proc~rgb_to_hsl proc~rgb_to_hsv rgb_to_hsv proc~convert->proc~rgb_to_hsv proc~rgb_to_xyz rgb_to_xyz proc~convert->proc~rgb_to_xyz proc~xyz_to_rgb xyz_to_rgb proc~convert->proc~xyz_to_rgb Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( color ) :: c Source Code program example28 use forimage , only : color implicit none type ( color ) :: c call c % set ( 'red' , use_library = . true .) call c % print () end program example28","tags":"","loc":"program/example28.html"},{"title":"test18 – ForImage","text":"Uses forimage program~~test18~~UsesGraph program~test18 test18 module~forimage forimage program~test18->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test18~~CallsGraph program~test18 test18 proc~brighten format_pnm%brighten program~test18->proc~brighten proc~deallocate_pnm format_pnm%deallocate_pnm program~test18->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test18->proc~export_pnm proc~print_info format_pnm%print_info program~test18->proc~print_info proc~set_pnm format_pnm%set_pnm program~test18->proc~set_pnm proc~set_pixels format_pnm%set_pixels proc~brighten->proc~set_pixels proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~allocate_pixels format_pnm%allocate_pixels proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pnm->proc~set_pixels proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_height format_pnm%set_height proc~set_header->proc~set_height proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_width format_pnm%set_width proc~set_header->proc~set_width proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image2 type( format_pnm ) :: image3 integer(kind=ik), dimension(60,60) :: px2 integer(kind=ik), dimension(4,12) :: px3 Source Code program test18 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image2 , image3 integer ( ik ), dimension ( 60 , 60 ) :: px2 integer ( ik ), dimension ( 4 , 12 ) :: px3 print * , ' ' print '(a)' , 'Test 18' px2 = transpose ( reshapeshape = shape ( px2 ))) call image2 % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px2 ) call image2 % brighten ( + 200 ) call image2 % export_pnm ( 'pnm_files/img2_binary_brighten' ) call image2 % export_pnm ( 'pnm_files/img2_ascii_brighten' , 'ascii' ) call image2 % print_info () call image2 % finalize () px3 ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px3 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px3 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px3 ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image3 % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px3 ) call image3 % brighten ( - 7 ) call image3 % export_pnm ( 'pnm_files/img3_binary_brighten' ) call image3 % export_pnm ( 'pnm_files/img3_ascii_brighten' , 'ascii' ) call image3 % print_info () call image3 % finalize () end program test18","tags":"","loc":"program/test18.html"},{"title":"test22 – ForImage","text":"Uses forimage program~~test22~~UsesGraph program~test22 test22 module~forimage forimage program~test22->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test22~~CallsGraph program~test22 test22 proc~deallocate_pnm format_pnm%deallocate_pnm program~test22->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test22->proc~export_pnm proc~print_info format_pnm%print_info program~test22->proc~print_info proc~rotate format_pnm%rotate program~test22->proc~rotate proc~set_pnm format_pnm%set_pnm program~test22->proc~set_pnm proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~allocate_pixels format_pnm%allocate_pixels proc~rotate->proc~allocate_pixels proc~set_height format_pnm%set_height proc~rotate->proc~set_height proc~set_pixels format_pnm%set_pixels proc~rotate->proc~set_pixels proc~set_width format_pnm%set_width proc~rotate->proc~set_width proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pnm->proc~set_pixels proc~set_header->proc~set_height proc~set_header->proc~set_width proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image1 type( format_pnm ) :: image2 type( format_pnm ) :: image3 integer(kind=ik), dimension(10,6) :: px1 integer(kind=ik), dimension(60,60) :: px2 integer(kind=ik), dimension(4,12) :: px3 Source Code program test22 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image1 , image2 , image3 integer ( ik ), dimension ( 10 , 6 ) :: px1 integer ( ik ), dimension ( 60 , 60 ) :: px2 integer ( ik ), dimension ( 4 , 12 ) :: px3 print * , ' ' print '(a)' , 'Test 22' px1 ( 1 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 4 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 5 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 6 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 7 ,:) = [ 1 , 0 , 0 , 0 , 1 , 0 ] px1 ( 8 ,:) = [ 0 , 1 , 1 , 1 , 0 , 0 ] px1 ( 9 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] px1 ( 10 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] call image1 % set_pnm ( encoding = 'binary' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px1 ) call image1 % rotate ( - 90 ) call image1 % export_pnm ( 'pnm_files/img1_binary_rotate' ) call image1 % export_pnm ( 'pnm_files/img1_ascii_rotate' , 'ascii' ) call image1 % print_info () call image1 % finalize () px2 = transpose ( reshapeshape = shape ( px2 ))) call image2 % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px2 ) call image2 % rotate ( - 90 ) call image2 % export_pnm ( 'pnm_files/img2_binary_rotate' ) call image2 % export_pnm ( 'pnm_files/img2_ascii_rotate' , 'ascii' ) call image2 % print_info () call image2 % finalize () px3 ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px3 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px3 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px3 ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image3 % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px3 ) call image3 % rotate ( - 90 ) call image3 % export_pnm ( 'pnm_files/img3_binary_rotate' ) call image3 % export_pnm ( 'pnm_files/img3_ascii_rotate' , 'ascii' ) call image3 % print_info () call image3 % finalize () end program test22","tags":"","loc":"program/test22.html"},{"title":"test25 – ForImage","text":"Uses forimage program~~test25~~UsesGraph program~test25 test25 module~forimage forimage program~test25->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test25~~CallsGraph program~test25 test25 proc~deallocate_pnm format_pnm%deallocate_pnm program~test25->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test25->proc~export_pnm proc~print_info format_pnm%print_info program~test25->proc~print_info proc~resize format_pnm%resize program~test25->proc~resize proc~set_pnm format_pnm%set_pnm program~test25->proc~set_pnm proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~allocate_pixels format_pnm%allocate_pixels proc~resize->proc~allocate_pixels proc~set_height format_pnm%set_height proc~resize->proc~set_height proc~set_pixels format_pnm%set_pixels proc~resize->proc~set_pixels proc~set_width format_pnm%set_width proc~resize->proc~set_width proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pnm->proc~set_pixels proc~set_header->proc~set_height proc~set_header->proc~set_width proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image1 type( format_pnm ) :: image2 type( format_pnm ) :: image3 integer(kind=ik), dimension(10,6) :: px1 integer(kind=ik), dimension(60,60) :: px2 integer(kind=ik), dimension(4,12) :: px3 Source Code program test25 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image1 , image2 , image3 integer ( ik ), dimension ( 10 , 6 ) :: px1 integer ( ik ), dimension ( 60 , 60 ) :: px2 integer ( ik ), dimension ( 4 , 12 ) :: px3 print * , ' ' print '(a)' , 'Test 25' px1 ( 1 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 4 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 5 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 6 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 7 ,:) = [ 1 , 0 , 0 , 0 , 1 , 0 ] px1 ( 8 ,:) = [ 0 , 1 , 1 , 1 , 0 , 0 ] px1 ( 9 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] px1 ( 10 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] call image1 % set_pnm ( encoding = 'binary' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px1 ) call image1 % resize ( 25 , 25 ) call image1 % export_pnm ( 'pnm_files/img1_binary_resize' ) call image1 % export_pnm ( 'pnm_files/img1_ascii_resize' , 'ascii' ) call image1 % print_info () call image1 % finalize () px2 = transpose ( reshapeshape = shape ( px2 ))) call image2 % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px2 ) call image2 % resize ( 80 , 40 ) call image2 % export_pnm ( 'pnm_files/img2_binary_resize' ) call image2 % export_pnm ( 'pnm_files/img2_ascii_resize' , 'ascii' ) call image2 % print_info () call image2 % finalize () px3 ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px3 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px3 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px3 ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image3 % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px3 ) call image3 % resize ( 20 , 18 ) call image3 % export_pnm ( 'pnm_files/img3_binary_resize' ) call image3 % export_pnm ( 'pnm_files/img3_ascii_resize' , 'ascii' ) call image3 % print_info () call image3 % finalize () end program test25","tags":"","loc":"program/test25.html"},{"title":"test – ForImage","text":"Uses forimage program~~test~~UsesGraph program~test test module~forimage forimage program~test->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test~~CallsGraph program~test test proc~deallocate_pnm format_pnm%deallocate_pnm program~test->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test->proc~export_pnm proc~print_info format_pnm%print_info program~test->proc~print_info proc~set_pnm format_pnm%set_pnm program~test->proc~set_pnm proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~allocate_pixels format_pnm%allocate_pixels proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pixels format_pnm%set_pixels proc~set_pnm->proc~set_pixels proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_height format_pnm%set_height proc~set_header->proc~set_height proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_width format_pnm%set_width proc~set_header->proc~set_width proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image integer(kind=ik), dimension(60,60) :: px Source Code program test use forimage , only : format_pnm , ik implicit none ! Declare an object of type format_pnm type ( format_pnm ) :: image ! Define a 2D array representing pixel values for the image integer ( ik ), dimension ( 60 , 60 ) :: px print * , ' ' print '(a)' , 'Test 5' px = transpose ( reshapeshape = shape ( px ))) ! Set the properties of the format_pnm object (encoding, file format, width, height, comment and pixels) call image % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px ) ! Export the PNM image to a file named 'img2_binary' in the specified format call image % export_pnm ( 'pnm_files/img2_binary' ) ! Print the image information to the screen call image % print_info () ! Finalize the format_pnm object to release resources call image % finalize () end program test","tags":"","loc":"program/test.html"},{"title":"test9 – ForImage","text":"Uses forimage program~~test9~~UsesGraph program~test9 test9 module~forimage forimage program~test9->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test9~~CallsGraph program~test9 test9 proc~deallocate_pnm format_pnm%deallocate_pnm program~test9->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test9->proc~export_pnm proc~import_pnm format_pnm%import_pnm program~test9->proc~import_pnm proc~print_info format_pnm%print_info program~test9->proc~print_info proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~allocate_pixels format_pnm%allocate_pixels proc~import_pnm->proc~allocate_pixels proc~check_pixel_range format_pnm%check_pixel_range proc~import_pnm->proc~check_pixel_range proc~read_header read_header proc~import_pnm->proc~read_header proc~set_file_format format_pnm%set_file_format proc~import_pnm->proc~set_file_format proc~import_pnm->proc~set_format proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image Source Code program test9 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 9' call image % import_pnm ( 'pnm_files/img3_ascii' , 'ppm' , 'ascii' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img3_ascii_ex' ) call image % finalize () end program test9","tags":"","loc":"program/test9.html"},{"title":"test17 – ForImage","text":"Uses forimage program~~test17~~UsesGraph program~test17 test17 module~forimage forimage program~test17->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test17~~CallsGraph program~test17 test17 proc~deallocate_pnm format_pnm%deallocate_pnm program~test17->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test17->proc~export_pnm proc~negative format_pnm%negative program~test17->proc~negative proc~print_info format_pnm%print_info program~test17->proc~print_info proc~set_pnm format_pnm%set_pnm program~test17->proc~set_pnm proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~set_pixels format_pnm%set_pixels proc~negative->proc~set_pixels proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~allocate_pixels format_pnm%allocate_pixels proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pnm->proc~set_pixels proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_height format_pnm%set_height proc~set_header->proc~set_height proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_width format_pnm%set_width proc~set_header->proc~set_width proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image1 type( format_pnm ) :: image2 type( format_pnm ) :: image3 integer(kind=ik), dimension(10,6) :: px1 integer(kind=ik), dimension(60,60) :: px2 integer(kind=ik), dimension(4,12) :: px3 Source Code program test17 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image1 , image2 , image3 integer ( ik ), dimension ( 10 , 6 ) :: px1 integer ( ik ), dimension ( 60 , 60 ) :: px2 integer ( ik ), dimension ( 4 , 12 ) :: px3 print * , ' ' print '(a)' , 'Test 17' px1 ( 1 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 4 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 5 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 6 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 7 ,:) = [ 1 , 0 , 0 , 0 , 1 , 0 ] px1 ( 8 ,:) = [ 0 , 1 , 1 , 1 , 0 , 0 ] px1 ( 9 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] px1 ( 10 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] call image1 % set_pnm ( encoding = 'binary' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px1 ) call image1 % export_pnm ( 'pnm_files/img1_binary_negative' ) call image1 % export_pnm ( 'pnm_files/img1_ascii_negative' , 'ascii' ) call image1 % print_info () call image1 % finalize () px2 = transpose ( reshapeshape = shape ( px2 ))) call image2 % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px2 ) call image2 % negative () call image2 % export_pnm ( 'pnm_files/img2_binary_negative' ) call image2 % export_pnm ( 'pnm_files/img2_ascii_negative' , 'ascii' ) call image2 % print_info () call image2 % finalize () px3 ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px3 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px3 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px3 ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image3 % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px3 ) call image3 % negative () call image3 % export_pnm ( 'pnm_files/img3_binary_negative' ) call image3 % export_pnm ( 'pnm_files/img3_ascii_negative' , 'ascii' ) call image3 % print_info () call image3 % finalize () end program test17","tags":"","loc":"program/test17.html"},{"title":"test2 – ForImage","text":"Uses forimage program~~test2~~UsesGraph program~test2 test2 module~forimage forimage program~test2->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test2~~CallsGraph program~test2 test2 proc~deallocate_pnm format_pnm%deallocate_pnm program~test2->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test2->proc~export_pnm proc~print_info format_pnm%print_info program~test2->proc~print_info proc~set_pnm format_pnm%set_pnm program~test2->proc~set_pnm proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~allocate_pixels format_pnm%allocate_pixels proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pixels format_pnm%set_pixels proc~set_pnm->proc~set_pixels proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_height format_pnm%set_height proc~set_header->proc~set_height proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_width format_pnm%set_width proc~set_header->proc~set_width proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image integer(kind=ik), dimension(60,60) :: px Source Code program test2 use forimage , only : format_pnm , ik implicit none ! Declare an object of type format_pnm type ( format_pnm ) :: image ! Define a 2D array representing pixel values for the image integer ( ik ), dimension ( 60 , 60 ) :: px print * , ' ' print '(a)' , 'Test 2' px = transpose ( reshapeshape = shape ( px ))) ! Set the properties of the format_pnm object (encoding, file format, width, height, comment and pixels) call image % set_pnm ( encoding = 'ascii' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px ) ! Export the PNM image to a file named 'img2_ascii' in the specified format call image % export_pnm ( 'pnm_files/img2_ascii' ) ! Print the image information to the screen call image % print_info () ! Finalize the format_pnm object to release resources call image % finalize () end program test2","tags":"","loc":"program/test2.html"},{"title":"test6 – ForImage","text":"Uses forimage program~~test6~~UsesGraph program~test6 test6 module~forimage forimage program~test6->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test6~~CallsGraph program~test6 test6 proc~deallocate_pnm format_pnm%deallocate_pnm program~test6->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test6->proc~export_pnm proc~print_info format_pnm%print_info program~test6->proc~print_info proc~set_pnm format_pnm%set_pnm program~test6->proc~set_pnm proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~allocate_pixels format_pnm%allocate_pixels proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pixels format_pnm%set_pixels proc~set_pnm->proc~set_pixels proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_height format_pnm%set_height proc~set_header->proc~set_height proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_width format_pnm%set_width proc~set_header->proc~set_width proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image integer(kind=ik), dimension(4,12) :: px Source Code program test6 use forimage , only : format_pnm , ik implicit none ! Declare an object of type format_pnm type ( format_pnm ) :: image ! Define a 2D array representing pixel values (0 and 1) for the image integer ( ik ), dimension ( 4 , 12 ) :: px print * , ' ' print '(a)' , 'Test 6' px ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ! Set the properties of the format_pnm object (encoding, file format, width, height, comment and pixels) call image % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px ) ! Export the PNM image to a file named 'img3_binary' in the specified format call image % export_pnm ( 'pnm_files/img3_binary' ) ! Print the image information to the screen call image % print_info () ! Finalize the format_pnm object to release resources call image % finalize () end program test6","tags":"","loc":"program/test6.html"},{"title":"test21 – ForImage","text":"Uses forimage program~~test21~~UsesGraph program~test21 test21 module~forimage forimage program~test21->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test21~~CallsGraph program~test21 test21 proc~deallocate_pnm format_pnm%deallocate_pnm program~test21->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test21->proc~export_pnm proc~greyscale format_pnm%greyscale program~test21->proc~greyscale proc~print_info format_pnm%print_info program~test21->proc~print_info proc~set_pnm format_pnm%set_pnm program~test21->proc~set_pnm proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~check_pixel_range format_pnm%check_pixel_range proc~greyscale->proc~check_pixel_range proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~allocate_pixels format_pnm%allocate_pixels proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pixels format_pnm%set_pixels proc~set_pnm->proc~set_pixels proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_height format_pnm%set_height proc~set_header->proc~set_height proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_width format_pnm%set_width proc~set_header->proc~set_width proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image integer(kind=ik), dimension(4,12) :: px Source Code program test21 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image integer ( ik ), dimension ( 4 , 12 ) :: px print * , ' ' print '(a)' , 'Test 21' px ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px ) call image % greyscale () call image % export_pnm ( 'pnm_files/img3_binary_greyscale' ) call image % export_pnm ( 'pnm_files/img3_ascii_greyscale' , 'ascii' ) call image % print_info () call image % finalize () end program test21","tags":"","loc":"program/test21.html"},{"title":"test10 – ForImage","text":"Uses forimage program~~test10~~UsesGraph program~test10 test10 module~forimage forimage program~test10->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test10~~CallsGraph program~test10 test10 proc~deallocate_pnm format_pnm%deallocate_pnm program~test10->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test10->proc~export_pnm proc~import_pnm format_pnm%import_pnm program~test10->proc~import_pnm proc~print_info format_pnm%print_info program~test10->proc~print_info proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~allocate_pixels format_pnm%allocate_pixels proc~import_pnm->proc~allocate_pixels proc~check_pixel_range format_pnm%check_pixel_range proc~import_pnm->proc~check_pixel_range proc~read_header read_header proc~import_pnm->proc~read_header proc~set_file_format format_pnm%set_file_format proc~import_pnm->proc~set_file_format proc~import_pnm->proc~set_format proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image Source Code program test10 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 10' call image % import_pnm ( 'pnm_files/img1_binary' , 'pbm' , 'binary' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img1_binary_ex' ) call image % finalize () end program test10","tags":"","loc":"program/test10.html"},{"title":"test7 – ForImage","text":"Uses forimage program~~test7~~UsesGraph program~test7 test7 module~forimage forimage program~test7->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test7~~CallsGraph program~test7 test7 proc~deallocate_pnm format_pnm%deallocate_pnm program~test7->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test7->proc~export_pnm proc~import_pnm format_pnm%import_pnm program~test7->proc~import_pnm proc~print_info format_pnm%print_info program~test7->proc~print_info proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~allocate_pixels format_pnm%allocate_pixels proc~import_pnm->proc~allocate_pixels proc~check_pixel_range format_pnm%check_pixel_range proc~import_pnm->proc~check_pixel_range proc~read_header read_header proc~import_pnm->proc~read_header proc~set_file_format format_pnm%set_file_format proc~import_pnm->proc~set_file_format proc~import_pnm->proc~set_format proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image Source Code program test7 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 7' call image % import_pnm ( 'pnm_files/img1_ascii' , 'pbm' , 'ascii' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img1_ascii_ex' ) call image % finalize () end program test7","tags":"","loc":"program/test7.html"},{"title":"test24 – ForImage","text":"Uses forimage program~~test24~~UsesGraph program~test24 test24 module~forimage forimage program~test24->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test24~~CallsGraph program~test24 test24 proc~crop format_pnm%crop program~test24->proc~crop proc~deallocate_pnm format_pnm%deallocate_pnm program~test24->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test24->proc~export_pnm proc~print_info format_pnm%print_info program~test24->proc~print_info proc~set_pnm format_pnm%set_pnm program~test24->proc~set_pnm proc~allocate_pixels format_pnm%allocate_pixels proc~crop->proc~allocate_pixels proc~set_height format_pnm%set_height proc~crop->proc~set_height proc~set_pixels format_pnm%set_pixels proc~crop->proc~set_pixels proc~set_width format_pnm%set_width proc~crop->proc~set_width proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pnm->proc~set_pixels proc~set_header->proc~set_height proc~set_header->proc~set_width proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image1 type( format_pnm ) :: image2 type( format_pnm ) :: image3 integer(kind=ik), dimension(10,6) :: px1 integer(kind=ik), dimension(60,60) :: px2 integer(kind=ik), dimension(4,12) :: px3 Source Code program test24 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image1 , image2 , image3 integer ( ik ), dimension ( 10 , 6 ) :: px1 integer ( ik ), dimension ( 60 , 60 ) :: px2 integer ( ik ), dimension ( 4 , 12 ) :: px3 print * , ' ' print '(a)' , 'Test 24' px1 ( 1 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 4 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 5 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 6 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 7 ,:) = [ 1 , 0 , 0 , 0 , 1 , 0 ] px1 ( 8 ,:) = [ 0 , 1 , 1 , 1 , 0 , 0 ] px1 ( 9 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] px1 ( 10 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] call image1 % set_pnm ( encoding = 'binary' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px1 ) call image1 % crop ( 2 , 10 , 3 , 6 ) call image1 % export_pnm ( 'pnm_files/img1_binary_crop' ) call image1 % export_pnm ( 'pnm_files/img1_ascii_crop' , 'ascii' ) call image1 % print_info () call image1 % finalize () px2 = transpose ( reshapeshape = shape ( px2 ))) call image2 % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px2 ) call image2 % crop ( 2 , 50 , 3 , 55 ) call image2 % export_pnm ( 'pnm_files/img2_binary_crop' ) call image2 % export_pnm ( 'pnm_files/img2_ascii_crop' , 'ascii' ) call image2 % print_info () call image2 % finalize () px3 ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px3 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px3 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px3 ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image3 % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px3 ) call image3 % crop ( 1 , 3 , 2 , 4 ) call image3 % export_pnm ( 'pnm_files/img3_binary_crop' ) call image3 % export_pnm ( 'pnm_files/img3_ascii_crop' , 'ascii' ) call image3 % print_info () call image3 % finalize () end program test24","tags":"","loc":"program/test24.html"},{"title":"test3 – ForImage","text":"Uses forimage program~~test3~~UsesGraph program~test3 test3 module~forimage forimage program~test3->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test3~~CallsGraph program~test3 test3 proc~deallocate_pnm format_pnm%deallocate_pnm program~test3->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test3->proc~export_pnm proc~print_info format_pnm%print_info program~test3->proc~print_info proc~set_pnm format_pnm%set_pnm program~test3->proc~set_pnm proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~allocate_pixels format_pnm%allocate_pixels proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pixels format_pnm%set_pixels proc~set_pnm->proc~set_pixels proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_height format_pnm%set_height proc~set_header->proc~set_height proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_width format_pnm%set_width proc~set_header->proc~set_width proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image integer(kind=ik), dimension(4,12) :: px Source Code program test3 use forimage , only : format_pnm , ik implicit none ! Declare an object of type format_pnm type ( format_pnm ) :: image ! Define a 2D array representing pixel values for the image integer ( ik ), dimension ( 4 , 12 ) :: px print * , ' ' print '(a)' , 'Test 3' px ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ! Set the properties of the format_pnm object (encoding, file format, width, height, comment and pixels) call image % set_pnm ( encoding = 'ascii' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px ) ! Export the PNM image to a file named 'img3_ascii' in the specified format call image % export_pnm ( 'pnm_files/img3_ascii' ) ! Print the image information to the screen call image % print_info () ! Finalize the format_pnm object to release resources call image % finalize () end program test3","tags":"","loc":"program/test3.html"},{"title":"example29 – ForImage","text":"Uses forimage program~~example29~~UsesGraph program~example29 example29 module~forimage forimage program~example29->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~example29~~CallsGraph program~example29 example29 proc~print_available_colors color%print_available_colors program~example29->proc~print_available_colors proc~save_available_colors color%save_available_colors program~example29->proc~save_available_colors proc~initialize_colors initialize_colors proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~convert color%convert proc~initialize_colors->proc~convert proc~set~2 color%set proc~initialize_colors->proc~set~2 proc~cmyk_to_rgb cmyk_to_rgb proc~convert->proc~cmyk_to_rgb proc~decimal_to_rgb decimal_to_rgb proc~convert->proc~decimal_to_rgb proc~hex_to_rgb hex_to_rgb proc~convert->proc~hex_to_rgb proc~hsl_to_rgb hsl_to_rgb proc~convert->proc~hsl_to_rgb proc~hsv_to_rgb hsv_to_rgb proc~convert->proc~hsv_to_rgb proc~rgb_to_cmyk rgb_to_cmyk proc~convert->proc~rgb_to_cmyk proc~rgb_to_decimal rgb_to_decimal proc~convert->proc~rgb_to_decimal proc~rgb_to_hex rgb_to_hex proc~convert->proc~rgb_to_hex proc~rgb_to_hsl rgb_to_hsl proc~convert->proc~rgb_to_hsl proc~rgb_to_hsv rgb_to_hsv proc~convert->proc~rgb_to_hsv proc~rgb_to_xyz rgb_to_xyz proc~convert->proc~rgb_to_xyz proc~xyz_to_rgb xyz_to_rgb proc~convert->proc~xyz_to_rgb proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~set_cmyk color%set_cmyk proc~set~2->proc~set_cmyk proc~set_decimal color%set_decimal proc~set~2->proc~set_decimal proc~set_hex color%set_hex proc~set~2->proc~set_hex proc~set_hsl color%set_hsl proc~set~2->proc~set_hsl proc~set_hsv color%set_hsv proc~set~2->proc~set_hsv proc~set_name color%set_name proc~set~2->proc~set_name proc~set_rgb color%set_rgb proc~set~2->proc~set_rgb proc~set_xyz color%set_xyz proc~set~2->proc~set_xyz proc~set_by_name->proc~initialize_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( color ) :: c Source Code program example29 use forimage , only : color implicit none type ( color ) :: c call c % print_available_colors () call c % save_available_colors () end program example29","tags":"","loc":"program/example29.html"},{"title":"test4 – ForImage","text":"Uses forimage program~~test4~~UsesGraph program~test4 test4 module~forimage forimage program~test4->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test4~~CallsGraph program~test4 test4 proc~deallocate_pnm format_pnm%deallocate_pnm program~test4->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test4->proc~export_pnm proc~print_info format_pnm%print_info program~test4->proc~print_info proc~set_pnm format_pnm%set_pnm program~test4->proc~set_pnm proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~allocate_pixels format_pnm%allocate_pixels proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pixels format_pnm%set_pixels proc~set_pnm->proc~set_pixels proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_height format_pnm%set_height proc~set_header->proc~set_height proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_width format_pnm%set_width proc~set_header->proc~set_width proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image integer(kind=ik), dimension(10,6) :: px Source Code program test4 use forimage , only : format_pnm , ik implicit none ! Declare an object of type format_pnm type ( format_pnm ) :: image ! Define a 2D array representing pixel values (0 and 1) for the image integer ( ik ), dimension ( 10 , 6 ) :: px print * , ' ' print '(a)' , 'Test 4' px ( 1 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 2 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 3 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 4 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 5 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 6 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 7 ,:) = [ 1 , 0 , 0 , 0 , 1 , 0 ] px ( 8 ,:) = [ 0 , 1 , 1 , 1 , 0 , 0 ] px ( 9 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] px ( 10 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] ! Set the properties of the format_pnm object (encoding, file format, width, height, comment and pixels) call image % set_pnm ( encoding = 'binary' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px ) ! Export the PNM image to a file named 'img1_binary' in the specified format call image % export_pnm ( 'pnm_files/img1_binary' ) ! Print the image information to the screen call image % print_info () ! Finalize the format_pnm object to release resources call image % finalize () end program test4","tags":"","loc":"program/test4.html"},{"title":"test13 – ForImage","text":"Uses forimage program~~test13~~UsesGraph program~test13 test13 module~forimage forimage program~test13->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test13~~CallsGraph program~test13 test13 proc~deallocate_pnm format_pnm%deallocate_pnm program~test13->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test13->proc~export_pnm proc~import_pnm format_pnm%import_pnm program~test13->proc~import_pnm proc~print_info format_pnm%print_info program~test13->proc~print_info proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~allocate_pixels format_pnm%allocate_pixels proc~import_pnm->proc~allocate_pixels proc~check_pixel_range format_pnm%check_pixel_range proc~import_pnm->proc~check_pixel_range proc~read_header read_header proc~import_pnm->proc~read_header proc~set_file_format format_pnm%set_file_format proc~import_pnm->proc~set_file_format proc~import_pnm->proc~set_format proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image Source Code program test13 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 13' call image % import_pnm ( 'pnm_files/img3_binary' , 'ppm' , 'binary' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img3_binary_to_ascii_ex' , 'ascii' ) call image % finalize () end program test13","tags":"","loc":"program/test13.html"},{"title":"test11 – ForImage","text":"Uses forimage program~~test11~~UsesGraph program~test11 test11 module~forimage forimage program~test11->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test11~~CallsGraph program~test11 test11 proc~deallocate_pnm format_pnm%deallocate_pnm program~test11->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test11->proc~export_pnm proc~import_pnm format_pnm%import_pnm program~test11->proc~import_pnm proc~print_info format_pnm%print_info program~test11->proc~print_info proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~allocate_pixels format_pnm%allocate_pixels proc~import_pnm->proc~allocate_pixels proc~check_pixel_range format_pnm%check_pixel_range proc~import_pnm->proc~check_pixel_range proc~read_header read_header proc~import_pnm->proc~read_header proc~set_file_format format_pnm%set_file_format proc~import_pnm->proc~set_file_format proc~import_pnm->proc~set_format proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image Source Code program test11 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 11' call image % import_pnm ( 'pnm_files/img2_binary' , 'pgm' , 'binary' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img2_binary_ex' ) call image % finalize () end program test11","tags":"","loc":"program/test11.html"},{"title":"test14 – ForImage","text":"Uses forimage program~~test14~~UsesGraph program~test14 test14 module~forimage forimage program~test14->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test14~~CallsGraph program~test14 test14 proc~deallocate_pnm format_pnm%deallocate_pnm program~test14->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test14->proc~export_pnm proc~import_pnm format_pnm%import_pnm program~test14->proc~import_pnm proc~print_info format_pnm%print_info program~test14->proc~print_info proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~allocate_pixels format_pnm%allocate_pixels proc~import_pnm->proc~allocate_pixels proc~check_pixel_range format_pnm%check_pixel_range proc~import_pnm->proc~check_pixel_range proc~read_header read_header proc~import_pnm->proc~read_header proc~set_file_format format_pnm%set_file_format proc~import_pnm->proc~set_file_format proc~import_pnm->proc~set_format proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image Source Code program test14 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 14' call image % import_pnm ( 'pnm_files/img3_ascii' , 'ppm' , 'ascii' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img3_ascii_to_binary_ex' , 'binary' ) call image % finalize () end program test14","tags":"","loc":"program/test14.html"},{"title":"test20 – ForImage","text":"Uses forimage program~~test20~~UsesGraph program~test20 test20 module~forimage forimage program~test20->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test20~~CallsGraph program~test20 test20 proc~deallocate_pnm format_pnm%deallocate_pnm program~test20->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test20->proc~export_pnm proc~print_info format_pnm%print_info program~test20->proc~print_info proc~remove_channels format_pnm%remove_channels program~test20->proc~remove_channels proc~set_pnm format_pnm%set_pnm program~test20->proc~set_pnm proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~check_pixel_range format_pnm%check_pixel_range proc~remove_channels->proc~check_pixel_range proc~allocate_pixels format_pnm%allocate_pixels proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pixels format_pnm%set_pixels proc~set_pnm->proc~set_pixels proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_height format_pnm%set_height proc~set_header->proc~set_height proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_width format_pnm%set_width proc~set_header->proc~set_width proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image integer(kind=ik), dimension(4,12) :: px Source Code program test20 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image integer ( ik ), dimension ( 4 , 12 ) :: px print * , ' ' print '(a)' , 'Test 20' px ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px ) call image % remove_channels ( remove_r = . true ., remove_b = . true .) call image % export_pnm ( 'pnm_files/img3_binary_remove' ) call image % export_pnm ( 'pnm_files/img3_ascii_remove' , 'ascii' ) call image % print_info () call image % finalize () end program test20","tags":"","loc":"program/test20.html"},{"title":"test16 – ForImage","text":"Uses forimage program~~test16~~UsesGraph program~test16 test16 module~forimage forimage program~test16->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test16~~CallsGraph program~test16 test16 proc~deallocate_lut format_lut%deallocate_lut program~test16->proc~deallocate_lut proc~export format_lut%export program~test16->proc~export proc~get_num_colors format_lut%get_num_colors proc~export->proc~get_num_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_lut ) :: image Source Code program test16 use forimage , only : format_lut implicit none type ( format_lut ) :: image print * , ' ' print '(a)' , 'Test 16' call image % import ( file_name = 'lut_files/test15' , dim_colors = 3 ) call image % export ( file_name = 'lut_files/test16' ) call image % finalize () end program test16","tags":"","loc":"program/test16.html"},{"title":"demo_ppm – ForImage","text":"Uses forimage program~~demo_ppm~~UsesGraph program~demo_ppm demo_ppm module~forimage forimage program~demo_ppm->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~demo_ppm~~CallsGraph program~demo_ppm demo_ppm proc~brighten format_pnm%brighten program~demo_ppm->proc~brighten proc~crop format_pnm%crop program~demo_ppm->proc~crop proc~deallocate_pnm format_pnm%deallocate_pnm program~demo_ppm->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~demo_ppm->proc~export_pnm proc~flip_horizontal format_pnm%flip_horizontal program~demo_ppm->proc~flip_horizontal proc~flip_vertical format_pnm%flip_vertical program~demo_ppm->proc~flip_vertical proc~greyscale format_pnm%greyscale program~demo_ppm->proc~greyscale proc~import_pnm format_pnm%import_pnm program~demo_ppm->proc~import_pnm proc~mandelbrot mandelbrot program~demo_ppm->proc~mandelbrot proc~negative format_pnm%negative program~demo_ppm->proc~negative proc~print_info format_pnm%print_info program~demo_ppm->proc~print_info proc~remove_channels format_pnm%remove_channels program~demo_ppm->proc~remove_channels proc~resize format_pnm%resize program~demo_ppm->proc~resize proc~rotate format_pnm%rotate program~demo_ppm->proc~rotate proc~set_pnm format_pnm%set_pnm program~demo_ppm->proc~set_pnm proc~swap_channels format_pnm%swap_channels program~demo_ppm->proc~swap_channels proc~set_pixels format_pnm%set_pixels proc~brighten->proc~set_pixels proc~allocate_pixels format_pnm%allocate_pixels proc~crop->proc~allocate_pixels proc~set_height format_pnm%set_height proc~crop->proc~set_height proc~crop->proc~set_pixels proc~set_width format_pnm%set_width proc~crop->proc~set_width proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~check_pixel_range format_pnm%check_pixel_range proc~flip_horizontal->proc~check_pixel_range proc~flip_horizontal->proc~set_height proc~flip_horizontal->proc~set_width proc~flip_vertical->proc~check_pixel_range proc~flip_vertical->proc~set_height proc~flip_vertical->proc~set_width proc~greyscale->proc~check_pixel_range proc~import_pnm->proc~allocate_pixels proc~import_pnm->proc~check_pixel_range proc~read_header read_header proc~import_pnm->proc~read_header proc~set_file_format format_pnm%set_file_format proc~import_pnm->proc~set_file_format proc~import_pnm->proc~set_format proc~negative->proc~set_pixels proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~remove_channels->proc~check_pixel_range proc~resize->proc~allocate_pixels proc~resize->proc~set_height proc~resize->proc~set_pixels proc~resize->proc~set_width proc~rotate->proc~allocate_pixels proc~rotate->proc~set_height proc~rotate->proc~set_pixels proc~rotate->proc~set_width proc~set_pnm->proc~allocate_pixels proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pnm->proc~set_pixels proc~swap_channels->proc~check_pixel_range proc~set_header->proc~set_height proc~set_header->proc~set_width proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: copy_image integer, parameter :: height = 400 type( format_pnm ) :: image integer(kind=ik) :: px (height,3*width) integer, parameter :: width = 400 Functions pure function mandelbrot (h, w) result(pixels) Arguments Type Intent Optional Attributes Name integer, intent(in) :: h integer, intent(in) :: w Return Value integer(kind=ik), (h,3*w) Source Code program demo_ppm use forimage , only : format_pnm , rk , ik implicit none ! Declare format_pnm object and parameters for image dimensions type ( format_pnm ) :: image , copy_image integer , parameter :: height = 400 integer , parameter :: width = 400 integer ( ik ) :: px ( height , 3 * width ) ! Generate Mandelbrot fractal and assign pixel values px = mandelbrot ( height , width ) ! Set the properties of the format_pnm object (encoding, file format, width, height, max_color, comment and pixels) call image % set_pnm (& encoding = 'binary' , & file_format = 'ppm' , & width = width , & height = height , & max_color = 255 , & comment = 'demo: mandelbrot' , & pixels = px & ) ! Print information about the image call image % print_info () ! Export the image to a PPM file call image % export_pnm ( 'pnm_files/mandelbrot_binary' ) ! Export the image to a PPM file with ascii encoding call image % export_pnm ( 'pnm_files/mandelbrot_ascii' , 'ascii' ) ! Export the image to a PPM file with a different encoding copy_image = image ! Copy the format_pnm object call copy_image % negative () call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_negative' , 'binary' ) call copy_image % finalize () ! Brighten the image copy_image = image ! Copy the format_pnm object call copy_image % brighten ( 100 ) call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_brighten' , 'binary' ) call copy_image % finalize () ! Swap the red and blue channels copy_image = image ! Copy the format_pnm object call copy_image % swap_channels ( 'rb' ) call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_swap' , 'binary' ) call copy_image % finalize () ! Remove the blue channel copy_image = image ! Copy the format_pnm object call copy_image % remove_channels ( remove_b = . true .) call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_remove' , 'binary' ) call copy_image % finalize () ! Convert the image to greyscale copy_image = image ! Copy the format_pnm object call copy_image % greyscale () call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_greyscale' , 'binary' ) call copy_image % finalize () ! Rotate the image 90 degrees clockwise copy_image = image ! Copy the format_pnm object call copy_image % rotate ( - 90 ) call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_rotate' , 'binary' ) call copy_image % finalize () ! Flip the image horizontally copy_image = image ! Copy the format_pnm object call copy_image % flip_horizontal () call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_flip_horizontal' , 'binary' ) call copy_image % finalize () ! Flip the image vertically copy_image = image ! Copy the format_pnm object call copy_image % flip_vertical () call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_flip_vertical' , 'binary' ) call copy_image % finalize () ! Crop the image copy_image = image ! Copy the format_pnm object call copy_image % crop ( 100 , 200 , 50 , 300 ) call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_crop' , 'binary' ) call copy_image % finalize () ! Resize the image copy_image = image ! Copy the format_pnm object call copy_image % resize ( 800 , 200 ) call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_resize' , 'binary' ) call copy_image % finalize () ! Finalize the format_pnm object to release resources call image % finalize () ! Import a PPM file with binary encoding and export it with ascii encoding call image % import_pnm ( 'pnm_files/mandelbrot_binary' , 'ppm' , 'binary' ) call image % export_pnm ( 'pnm_files/mandelbrot_ascii_ex' , 'ascii' ) call image % finalize () ! Import a PPM file with ascii encoding and export it with binary encoding call image % import_pnm ( 'pnm_files/mandelbrot_ascii' , 'ppm' , 'ascii' ) call image % export_pnm ( 'pnm_files/mandelbrot_binary_ex' , 'binary' ) call image % finalize () contains ! Function to generate Mandelbrot fractal pure function mandelbrot ( h , w ) result ( pixels ) integer , intent ( in ) :: w , h integer ( ik ) :: pixels ( h , 3 * w ) integer ( ik ), parameter :: max_iter = 256_ik real ( rk ), parameter :: x_min = - 2.0_rk real ( rk ), parameter :: x_max = 1.0_rk real ( rk ), parameter :: y_min = - 1.5_rk real ( rk ), parameter :: y_max = 1.5_rk real ( rk ) :: x , y , x_temp , zx , zy , scale_x , scale_y integer ( ik ) :: iter integer :: i , j ! Calculate scale factors for mapping pixel coordinates to Mandelbrot coordinates scale_x = ( x_max - x_min ) / real ( w , kind = rk ) scale_y = ( y_max - y_min ) / real ( h , kind = rk ) ! Generate Mandelbrot fractal do i = 1 , h do j = 1 , w x = x_min + real ( j - 1 , kind = rk ) * scale_x y = y_max - real ( i - 1 , kind = rk ) * scale_y zx = 0.0_rk zy = 0.0_rk iter = 0_ik do while ( iter < max_iter . and . zx * zx + zy * zy < 4.0_rk ) x_temp = zx * zx - zy * zy + x zy = 2.0_rk * zx * zy + y zx = x_temp iter = iter + 1_ik end do ! Assign colors pixels ( i , 3 * j - 2 ) = int ( mod ( iter * 7_ik , 256_ik ), kind = ik ) ! Red channel pixels ( i , 3 * j - 1 ) = int ( mod ( iter * 4_ik , 256_ik ), kind = ik ) ! Green channel pixels ( i , 3 * j ) = int ( mod ( iter * 10_ik , 256_ik ), kind = ik ) ! Blue channel end do end do end function end program demo_ppm","tags":"","loc":"program/demo_ppm.html"},{"title":"test23 – ForImage","text":"Uses forimage program~~test23~~UsesGraph program~test23 test23 module~forimage forimage program~test23->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test23~~CallsGraph program~test23 test23 proc~deallocate_pnm format_pnm%deallocate_pnm program~test23->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test23->proc~export_pnm proc~flip_horizontal format_pnm%flip_horizontal program~test23->proc~flip_horizontal proc~flip_vertical format_pnm%flip_vertical program~test23->proc~flip_vertical proc~print_info format_pnm%print_info program~test23->proc~print_info proc~set_pnm format_pnm%set_pnm program~test23->proc~set_pnm proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~check_pixel_range format_pnm%check_pixel_range proc~flip_horizontal->proc~check_pixel_range proc~set_height format_pnm%set_height proc~flip_horizontal->proc~set_height proc~set_width format_pnm%set_width proc~flip_horizontal->proc~set_width proc~flip_vertical->proc~check_pixel_range proc~flip_vertical->proc~set_height proc~flip_vertical->proc~set_width proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~allocate_pixels format_pnm%allocate_pixels proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pixels format_pnm%set_pixels proc~set_pnm->proc~set_pixels proc~set_header->proc~set_height proc~set_header->proc~set_width proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image1 type( format_pnm ) :: image2 type( format_pnm ) :: image3 integer(kind=ik), dimension(10,6) :: px1 integer(kind=ik), dimension(60,60) :: px2 integer(kind=ik), dimension(4,12) :: px3 Source Code program test23 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image1 , image2 , image3 integer ( ik ), dimension ( 10 , 6 ) :: px1 integer ( ik ), dimension ( 60 , 60 ) :: px2 integer ( ik ), dimension ( 4 , 12 ) :: px3 print * , ' ' print '(a)' , 'Test 23' px1 ( 1 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 4 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 5 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 6 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 7 ,:) = [ 1 , 0 , 0 , 0 , 1 , 0 ] px1 ( 8 ,:) = [ 0 , 1 , 1 , 1 , 0 , 0 ] px1 ( 9 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] px1 ( 10 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] call image1 % set_pnm ( encoding = 'binary' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px1 ) call image1 % flip_horizontal () call image1 % export_pnm ( 'pnm_files/img1_binary_flip_horizontal' ) call image1 % export_pnm ( 'pnm_files/img1_ascii_flip_horizontal' , 'ascii' ) call image1 % print_info () call image1 % finalize () call image1 % set_pnm ( encoding = 'binary' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px1 ) call image1 % flip_vertical () call image1 % export_pnm ( 'pnm_files/img1_binary_flip_vertical' ) call image1 % export_pnm ( 'pnm_files/img1_ascii_flip_vertical' , 'ascii' ) call image1 % print_info () call image1 % finalize () px2 = transpose ( reshapeshape = shape ( px2 ))) call image2 % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px2 ) call image2 % flip_horizontal () call image2 % export_pnm ( 'pnm_files/img2_binary_flip_horizontal' ) call image2 % export_pnm ( 'pnm_files/img2_ascii_flip_horizontal' , 'ascii' ) call image2 % print_info () call image2 % finalize () call image2 % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px2 ) call image2 % flip_vertical () call image2 % export_pnm ( 'pnm_files/img2_binary_flip_vertical' ) call image2 % export_pnm ( 'pnm_files/img2_ascii_flip_vertical' , 'ascii' ) call image2 % print_info () call image2 % finalize () px3 ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px3 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px3 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px3 ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image3 % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px3 ) call image3 % flip_horizontal () call image3 % export_pnm ( 'pnm_files/img3_binary_flip_horizontal' ) call image3 % export_pnm ( 'pnm_files/img3_ascii_flip_horizontal' , 'ascii' ) call image3 % print_info () call image3 % finalize () call image3 % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px3 ) call image3 % flip_vertical () call image3 % export_pnm ( 'pnm_files/img3_binary_flip_vertical' ) call image3 % export_pnm ( 'pnm_files/img3_ascii_flip_vertical' , 'ascii' ) call image3 % print_info () call image3 % finalize () end program test23","tags":"","loc":"program/test23.html"},{"title":"test8 – ForImage","text":"Uses forimage program~~test8~~UsesGraph program~test8 test8 module~forimage forimage program~test8->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test8~~CallsGraph program~test8 test8 proc~deallocate_pnm format_pnm%deallocate_pnm program~test8->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test8->proc~export_pnm proc~import_pnm format_pnm%import_pnm program~test8->proc~import_pnm proc~print_info format_pnm%print_info program~test8->proc~print_info proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~allocate_pixels format_pnm%allocate_pixels proc~import_pnm->proc~allocate_pixels proc~check_pixel_range format_pnm%check_pixel_range proc~import_pnm->proc~check_pixel_range proc~read_header read_header proc~import_pnm->proc~read_header proc~set_file_format format_pnm%set_file_format proc~import_pnm->proc~set_file_format proc~import_pnm->proc~set_format proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image Source Code program test8 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 8' call image % import_pnm ( 'pnm_files/img2_ascii' , 'pgm' , 'ascii' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img2_ascii_ex' ) call image % finalize () end program test8","tags":"","loc":"program/test8.html"},{"title":"test15 – ForImage","text":"Uses forimage program~~test15~~UsesGraph program~test15 test15 module~forimage forimage program~test15->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test15~~CallsGraph program~test15 test15 proc~deallocate_lut format_lut%deallocate_lut program~test15->proc~deallocate_lut proc~export format_lut%export program~test15->proc~export proc~set format_lut%set program~test15->proc~set proc~get_num_colors format_lut%get_num_colors proc~export->proc~get_num_colors proc~allocate_colors format_lut%allocate_colors proc~set->proc~allocate_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial integer, dimension(1:8, 3) :: colors = reshape([0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 0, 0, 255, 255, 255, 0, 255, 255, 255, 255], shape(colors), order=[2, 1]) type( format_lut ) :: image Source Code program test15 use forimage , only : format_lut implicit none type ( format_lut ) :: image integer , dimension ( 1 : 8 , 3 ) :: colors = reshape ( [ & 0 , 0 , 0 , & 255 , 0 , 0 , & 0 , 255 , 0 , & 0 , 0 , 255 , & 255 , 255 , 0 , & 0 , 255 , 255 , & 255 , 0 , 255 , & 255 , 255 , 255 ], & shape ( colors ), order = [ 2 , 1 ] ) print * , ' ' print '(a)' , 'Test 15' call image % set ( num_colors = 8 , dim_colors = 3 , colors = colors ) call image % export ( 'lut_files/test15' ) call image % finalize () end program test15","tags":"","loc":"program/test15.html"},{"title":"test12 – ForImage","text":"Uses forimage program~~test12~~UsesGraph program~test12 test12 module~forimage forimage program~test12->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test12~~CallsGraph program~test12 test12 proc~deallocate_pnm format_pnm%deallocate_pnm program~test12->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test12->proc~export_pnm proc~import_pnm format_pnm%import_pnm program~test12->proc~import_pnm proc~print_info format_pnm%print_info program~test12->proc~print_info proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~allocate_pixels format_pnm%allocate_pixels proc~import_pnm->proc~allocate_pixels proc~check_pixel_range format_pnm%check_pixel_range proc~import_pnm->proc~check_pixel_range proc~read_header read_header proc~import_pnm->proc~read_header proc~set_file_format format_pnm%set_file_format proc~import_pnm->proc~set_file_format proc~import_pnm->proc~set_format proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image Source Code program test12 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 12' call image % import_pnm ( 'pnm_files/img3_binary' , 'ppm' , 'binary' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img3_binary_ex' ) call image % finalize () end program test12","tags":"","loc":"program/test12.html"},{"title":"test19 – ForImage","text":"Uses forimage program~~test19~~UsesGraph program~test19 test19 module~forimage forimage program~test19->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test19~~CallsGraph program~test19 test19 proc~deallocate_pnm format_pnm%deallocate_pnm program~test19->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test19->proc~export_pnm proc~print_info format_pnm%print_info program~test19->proc~print_info proc~set_pnm format_pnm%set_pnm program~test19->proc~set_pnm proc~swap_channels format_pnm%swap_channels program~test19->proc~swap_channels proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~allocate_pixels format_pnm%allocate_pixels proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pixels format_pnm%set_pixels proc~set_pnm->proc~set_pixels proc~check_pixel_range format_pnm%check_pixel_range proc~swap_channels->proc~check_pixel_range proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_height format_pnm%set_height proc~set_header->proc~set_height proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_width format_pnm%set_width proc~set_header->proc~set_width proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image integer(kind=ik), dimension(4,12) :: px Source Code program test19 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image integer ( ik ), dimension ( 4 , 12 ) :: px print * , ' ' print '(a)' , 'Test 19' px ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px ) call image % swap_channels ( swap = 'bg' ) call image % export_pnm ( 'pnm_files/img3_binary_swap' ) call image % export_pnm ( 'pnm_files/img3_ascii_swap' , 'ascii' ) call image % print_info () call image % finalize () end program test19","tags":"","loc":"program/test19.html"},{"title":"demo_color – ForImage","text":"Uses forimage program~~demo_color~~UsesGraph program~demo_color demo_color module~forimage forimage program~demo_color->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~demo_color~~CallsGraph program~demo_color demo_color proc~convert color%convert program~demo_color->proc~convert proc~find_nearest color%find_nearest program~demo_color->proc~find_nearest proc~get color%get program~demo_color->proc~get proc~print_available_colors color%print_available_colors program~demo_color->proc~print_available_colors proc~save_available_colors color%save_available_colors program~demo_color->proc~save_available_colors proc~set~2 color%set program~demo_color->proc~set~2 proc~cmyk_to_rgb cmyk_to_rgb proc~convert->proc~cmyk_to_rgb proc~decimal_to_rgb decimal_to_rgb proc~convert->proc~decimal_to_rgb proc~hex_to_rgb hex_to_rgb proc~convert->proc~hex_to_rgb proc~hsl_to_rgb hsl_to_rgb proc~convert->proc~hsl_to_rgb proc~hsv_to_rgb hsv_to_rgb proc~convert->proc~hsv_to_rgb proc~rgb_to_cmyk rgb_to_cmyk proc~convert->proc~rgb_to_cmyk proc~rgb_to_decimal rgb_to_decimal proc~convert->proc~rgb_to_decimal proc~rgb_to_hex rgb_to_hex proc~convert->proc~rgb_to_hex proc~rgb_to_hsl rgb_to_hsl proc~convert->proc~rgb_to_hsl proc~rgb_to_hsv rgb_to_hsv proc~convert->proc~rgb_to_hsv proc~rgb_to_xyz rgb_to_xyz proc~convert->proc~rgb_to_xyz proc~xyz_to_rgb xyz_to_rgb proc~convert->proc~xyz_to_rgb proc~get_rgb color%get_rgb proc~find_nearest->proc~get_rgb proc~initialize_colors initialize_colors proc~find_nearest->proc~initialize_colors proc~get_cmyk color%get_cmyk proc~get->proc~get_cmyk proc~get_decimal color%get_decimal proc~get->proc~get_decimal proc~get_hex color%get_hex proc~get->proc~get_hex proc~get_hsl color%get_hsl proc~get->proc~get_hsl proc~get_hsv color%get_hsv proc~get->proc~get_hsv proc~get_name color%get_name proc~get->proc~get_name proc~get->proc~get_rgb proc~get_xyz color%get_xyz proc~get->proc~get_xyz proc~print_available_colors->proc~initialize_colors proc~save_available_colors->proc~initialize_colors proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~set_cmyk color%set_cmyk proc~set~2->proc~set_cmyk proc~set_decimal color%set_decimal proc~set~2->proc~set_decimal proc~set_hex color%set_hex proc~set~2->proc~set_hex proc~set_hsl color%set_hsl proc~set~2->proc~set_hsl proc~set_hsv color%set_hsv proc~set~2->proc~set_hsv proc~set_name color%set_name proc~set~2->proc~set_name proc~set_rgb color%set_rgb proc~set~2->proc~set_rgb proc~set_xyz color%set_xyz proc~set~2->proc~set_xyz proc~initialize_colors->proc~convert proc~initialize_colors->proc~set~2 proc~set_by_name->proc~initialize_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial integer(kind=ik) :: b integer(kind=ik) :: c type( color ) :: custom_color integer(kind=ik) :: decimal integer(kind=ik) :: g real(kind=rk) :: h character(len=7) :: hex real(kind=rk) :: hl integer(kind=ik) :: k integer(kind=ik) :: m type( color ) :: nearest_color integer(kind=ik) :: r real(kind=rk) :: s real(kind=rk) :: sl real(kind=rk) :: v real(kind=rk) :: vl real(kind=rk) :: xyz_x real(kind=rk) :: xyz_y real(kind=rk) :: xyz_z integer(kind=ik) :: y Source Code program demo_color use forimage , only : rk , ik , color implicit none type ( color ) :: custom_color , nearest_color integer ( ik ) :: r , g , b character ( len = 7 ) :: hex integer ( ik ) :: decimal integer ( ik ) :: c , m , y , k real ( rk ) :: h , s , v real ( rk ) :: hl , sl , vl real ( rk ) :: xyz_x , xyz_y , xyz_z ! Set the color using RGB values call custom_color % set ( name = 'custom_color' , r = 245_ik , g = 127_ik , b = 64_ik ) ! Convert the color to other color spaces call custom_color % convert ( 'rgb2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! Print the name and color values call custom_color % print () ! Set the color using a hex value call custom_color % set ( name = 'custom_color' , hex = '#F57F40' ) ! Convert the color to other color spaces call custom_color % convert ( 'hex2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! Print the name and color values call custom_color % print () ! Set the color using a decimal value call custom_color % set ( name = 'custom_color' , decimal = 16088896_ik ) ! Convert the color to other color spaces call custom_color % convert ( 'decimal2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! Print the name and color values call custom_color % print () ! Set the color using a decimal value call custom_color % set ( name = 'custom_color' , c = 0_ik , m = 48_ik , y = 74_ik , k = 4_ik ) ! Convert the color to other color spaces call custom_color % convert ( 'cmyk2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! Print the name and color values call custom_color % print () ! Set the color using a hsv value call custom_color % set ( name = 'custom_color' , h = 2 0.8840_rk , s = 7 3.8776_rk , v = 9 6.0784_rk ) ! Convert the color to other color spaces call custom_color % convert ( 'hsv2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! Print the name and color values call custom_color % print () ! Set the color using a hsv value call custom_color % set ( name = 'custom_color' , hl = 2 0.8840_rk , sl = 9 0.0498_rk , vl = 6 0.5882_rk ) ! Convert the color to other color spaces call custom_color % convert ( 'hsl2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! Print the name and color values call custom_color % print () ! Set the color using a hsv value call custom_color % set ( name = 'custom_color' , xyz_x = 4 6.1753_rk , xyz_y = 3 4.9669_rk , xyz_z = 9.1672_rk ) ! Convert the color to other color spaces call custom_color % convert ( 'xyz2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! Print the name and color values call custom_color % print () ! Print and save the available colors call custom_color % print_available_colors () call custom_color % save_available_colors () ! Set a color using the name of a color from the available colors call custom_color % set ( 'red' , use_library = . true .) call custom_color % print () ! Set the color using specific RGB values call custom_color % set ( name = 'custom_color' , r = 100_ik , g = 30_ik , b = 30_ik ) print '(a)' , 'Find the nearest color to the custom color' call custom_color % find_nearest ( nearest_color ) ! Print the name and values of the nearest color call nearest_color % print () end program demo_color","tags":"","loc":"program/demo_color.html"},{"title":"test1 – ForImage","text":"Uses forimage program~~test1~~UsesGraph program~test1 test1 module~forimage forimage program~test1->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test1~~CallsGraph program~test1 test1 proc~deallocate_pnm format_pnm%deallocate_pnm program~test1->proc~deallocate_pnm proc~export_pnm format_pnm%export_pnm program~test1->proc~export_pnm proc~print_info format_pnm%print_info program~test1->proc~print_info proc~set_pnm format_pnm%set_pnm program~test1->proc~set_pnm proc~set_format format_pnm%set_format proc~export_pnm->proc~set_format proc~write_header write_header proc~export_pnm->proc~write_header proc~aspect_ratio aspect_ratio proc~print_info->proc~aspect_ratio proc~average_colors average_colors proc~print_info->proc~average_colors proc~pixel_size pixel_size proc~print_info->proc~pixel_size proc~allocate_pixels format_pnm%allocate_pixels proc~set_pnm->proc~allocate_pixels proc~set_file_format format_pnm%set_file_format proc~set_pnm->proc~set_file_format proc~set_pnm->proc~set_format proc~set_header format_pnm%set_header proc~set_pnm->proc~set_header proc~set_pixels format_pnm%set_pixels proc~set_pnm->proc~set_pixels proc~set_comment format_pnm%set_comment proc~set_header->proc~set_comment proc~set_height format_pnm%set_height proc~set_header->proc~set_height proc~set_magicnumber format_pnm%set_magicnumber proc~set_header->proc~set_magicnumber proc~set_max_color format_pnm%set_max_color proc~set_header->proc~set_max_color proc~set_width format_pnm%set_width proc~set_header->proc~set_width proc~check_pixel_range format_pnm%check_pixel_range proc~set_pixels->proc~check_pixel_range Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( format_pnm ) :: image integer(kind=ik), dimension(10,6) :: px Source Code program test1 use forimage , only : format_pnm , ik implicit none ! Declare an object of type format_pnm type ( format_pnm ) :: image ! Define a 2D array representing pixel values (0 and 1) for the image integer ( ik ), dimension ( 10 , 6 ) :: px print * , ' ' print '(a)' , 'Test 1' px ( 1 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 2 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 3 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 4 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 5 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 6 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 7 ,:) = [ 1 , 0 , 0 , 0 , 1 , 0 ] px ( 8 ,:) = [ 0 , 1 , 1 , 1 , 0 , 0 ] px ( 9 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] px ( 10 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] ! Set the properties of the format_pnm object (encoding, file format, width, height, comment and pixels) call image % set_pnm ( encoding = 'ascii' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px ) ! Export the PNM image to a file named 'img1_ascii' in the specified format call image % export_pnm ( 'pnm_files/img1_ascii' ) ! Print the image information to the screen call image % print_info () ! Finalize the format_pnm object to release resources call image % finalize () end program test1","tags":"","loc":"program/test1.html"},{"title":"example26 – ForImage","text":"Uses forimage program~~example26~~UsesGraph program~example26 example26 module~forimage forimage program~example26->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~example26~~CallsGraph program~example26 example26 proc~check check program~example26->proc~check proc~convert color%convert program~example26->proc~convert proc~get color%get program~example26->proc~get proc~set~2 color%set program~example26->proc~set~2 proc~cmyk_to_rgb cmyk_to_rgb proc~convert->proc~cmyk_to_rgb proc~decimal_to_rgb decimal_to_rgb proc~convert->proc~decimal_to_rgb proc~hex_to_rgb hex_to_rgb proc~convert->proc~hex_to_rgb proc~hsl_to_rgb hsl_to_rgb proc~convert->proc~hsl_to_rgb proc~hsv_to_rgb hsv_to_rgb proc~convert->proc~hsv_to_rgb proc~rgb_to_cmyk rgb_to_cmyk proc~convert->proc~rgb_to_cmyk proc~rgb_to_decimal rgb_to_decimal proc~convert->proc~rgb_to_decimal proc~rgb_to_hex rgb_to_hex proc~convert->proc~rgb_to_hex proc~rgb_to_hsl rgb_to_hsl proc~convert->proc~rgb_to_hsl proc~rgb_to_hsv rgb_to_hsv proc~convert->proc~rgb_to_hsv proc~rgb_to_xyz rgb_to_xyz proc~convert->proc~rgb_to_xyz proc~xyz_to_rgb xyz_to_rgb proc~convert->proc~xyz_to_rgb proc~get_cmyk color%get_cmyk proc~get->proc~get_cmyk proc~get_decimal color%get_decimal proc~get->proc~get_decimal proc~get_hex color%get_hex proc~get->proc~get_hex proc~get_hsl color%get_hsl proc~get->proc~get_hsl proc~get_hsv color%get_hsv proc~get->proc~get_hsv proc~get_name color%get_name proc~get->proc~get_name proc~get_rgb color%get_rgb proc~get->proc~get_rgb proc~get_xyz color%get_xyz proc~get->proc~get_xyz proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~set_cmyk color%set_cmyk proc~set~2->proc~set_cmyk proc~set_decimal color%set_decimal proc~set~2->proc~set_decimal proc~set_hex color%set_hex proc~set~2->proc~set_hex proc~set_hsl color%set_hsl proc~set~2->proc~set_hsl proc~set_hsv color%set_hsv proc~set~2->proc~set_hsv proc~set_name color%set_name proc~set~2->proc~set_name proc~set_rgb color%set_rgb proc~set~2->proc~set_rgb proc~set_xyz color%set_xyz proc~set~2->proc~set_xyz proc~initialize_colors initialize_colors proc~set_by_name->proc~initialize_colors proc~initialize_colors->proc~convert proc~initialize_colors->proc~set~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial integer(kind=ik) :: b integer(kind=ik) :: c type( color ) :: custom_color integer(kind=ik) :: decimal integer(kind=ik) :: g real(kind=rk) :: h character(len=7) :: hex real(kind=rk) :: hl integer(kind=ik) :: k integer(kind=ik) :: m character(len=30) :: name integer(kind=ik) :: r real(kind=rk) :: s real(kind=rk) :: sl real(kind=rk), parameter :: tol = 1e-4_rk real(kind=rk) :: v real(kind=rk) :: vl real(kind=rk) :: xyz_x real(kind=rk) :: xyz_y real(kind=rk) :: xyz_z integer(kind=ik) :: y Subroutines subroutine check (tol, name, r, g, b, hex, decimal, c, m, y, k, h, s, v, hl, sl, vl, xyz_x, xyz_y, xyz_z) Arguments Type Intent Optional Attributes Name real(kind=rk), intent(in) :: tol character(len=*), intent(in) :: name integer(kind=ik), intent(in) :: r integer(kind=ik), intent(in) :: g integer(kind=ik), intent(in) :: b character(len=*), intent(in) :: hex integer(kind=ik), intent(in) :: decimal integer(kind=ik), intent(in) :: c integer(kind=ik), intent(in) :: m integer(kind=ik), intent(in) :: y integer(kind=ik), intent(in) :: k real(kind=rk), intent(in) :: h real(kind=rk), intent(in) :: s real(kind=rk), intent(in) :: v real(kind=rk), intent(in) :: hl real(kind=rk), intent(in) :: sl real(kind=rk), intent(in) :: vl real(kind=rk), intent(in) :: xyz_x real(kind=rk), intent(in) :: xyz_y real(kind=rk), intent(in) :: xyz_z Source Code program example26 use forimage , only : rk , ik , color implicit none type ( color ) :: custom_color integer ( ik ) :: r , g , b character ( len = 7 ) :: hex integer ( ik ) :: decimal integer ( ik ) :: c , m , y , k real ( rk ) :: h , s , v real ( rk ) :: hl , sl , vl real ( rk ) :: xyz_x , xyz_y , xyz_z character ( len = 30 ) :: name real ( rk ), parameter :: tol = 1e-4_rk ! Set the color using RGB values call custom_color % set ( name = 'custom_color' , r = 245_ik , g = 127_ik , b = 64_ik ) ! Convert the color to other color spaces call custom_color % convert ( 'rgb2all' ) ! Get the name of the color call custom_color % get ( name ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! call custom_color % print () ! Check the values call check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) ! Set the color using a hex value call custom_color % set ( name = 'custom_color' , hex = '#F57F40' ) ! Convert the color to other color spaces call custom_color % convert ( 'hex2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! call custom_color % print () ! Check the values call check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) ! Set the color using a decimal value call custom_color % set ( name = 'custom_color' , decimal = 16088896_ik ) ! Convert the color to other color spaces call custom_color % convert ( 'decimal2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! call custom_color % print () ! Check the values call check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) ! Set the color using a decimal value call custom_color % set ( name = 'custom_color' , c = 0_ik , m = 48_ik , y = 74_ik , k = 4_ik ) ! Convert the color to other color spaces call custom_color % convert ( 'cmyk2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! call custom_color % print () ! Check the values call check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) ! Set the color using a hsv value call custom_color % set ( name = 'custom_color' , h = 2 0.8840_rk , s = 7 3.8776_rk , v = 9 6.0784_rk ) ! Convert the color to other color spaces call custom_color % convert ( 'hsv2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! call custom_color % print () ! Check the values call check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) ! Set the color using a hsv value call custom_color % set ( name = 'custom_color' , hl = 2 0.8840_rk , sl = 9 0.0498_rk , vl = 6 0.5882_rk ) ! Convert the color to other color spaces call custom_color % convert ( 'hsl2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! call custom_color % print () ! Check the values call check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) ! Set the color using a hsv value call custom_color % set ( name = 'custom_color' , xyz_x = 4 6.1753_rk , xyz_y = 3 4.9669_rk , xyz_z = 9.1672_rk ) ! Convert the color to other color spaces call custom_color % convert ( 'xyz2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! call custom_color % print () ! Check the values call check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) contains subroutine check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) character ( len =* ), intent ( in ) :: name integer ( ik ), intent ( in ) :: r , g , b character ( len =* ), intent ( in ) :: hex integer ( ik ), intent ( in ) :: decimal integer ( ik ), intent ( in ) :: c , m , y , k real ( rk ), intent ( in ) :: h , s , v real ( rk ), intent ( in ) :: hl , sl , vl real ( rk ), intent ( in ) :: xyz_x , xyz_y , xyz_z real ( rk ), intent ( in ) :: tol ! check output: if ( name /= 'custom_color' ) print * , 'ERROR: name /= ''custom_color''' if ( r /= 245_ik ) print * , 'ERROR: r /= 245' if ( g /= 127_ik ) print * , 'ERROR: g /= 127' if ( b /= 64_ik ) print * , 'ERROR: b /= 64' if ( hex /= '#F57F40' ) print * , 'ERROR: hex /= ''#F57F40''' if ( decimal /= 16088896_ik ) print * , 'ERROR: decimal /= 16088896' if ( c /= 0_ik ) print * , 'ERROR: c /= 0' if ( m /= 48_ik ) print * , 'ERROR: m /= 48' if ( y /= 74_ik ) print * , 'ERROR: y /= 74' if ( k /= 4_ik ) print * , 'ERROR: k /= 4' if ( abs ( h - 2 0.883977900552487_rk ) > tol ) print * , 'ERROR: h /= 20.8840' if ( abs ( s - 7 3.877551020408163_rk ) > tol ) print * , 'ERROR: s /= 73.8776' if ( abs ( v - 9 6.078431372549019_rk ) > tol ) print * , 'ERROR: v /= 96.0784' if ( abs ( hl - 2 0.883977900552487_rk ) > tol ) print * , 'ERROR: hl /= 20.8840' if ( abs ( sl - 9 0.049751243781117_rk ) > tol ) print * , 'ERROR: sl /= 90.0498' if ( abs ( vl - 6 0.588235294117652_rk ) > tol ) print * , 'ERROR: vl /= 60.5882' if ( abs ( xyz_x - 4 6.175296219509761_rk ) > tol ) print * , 'ERROR: xyz_x /= 46.1753' if ( abs ( xyz_y - 3 4.966900449347115_rk ) > tol ) print * , 'ERROR: xyz_y /= 34.9669' if ( abs ( xyz_z - 9.1671542959237478_rk ) > tol ) print * , 'ERROR: xyz_z /= 9.1672' end subroutine check end program example26","tags":"","loc":"program/example26.html"},{"title":"example27 – ForImage","text":"Uses forimage program~~example27~~UsesGraph program~example27 example27 module~forimage forimage program~example27->module~forimage module~forcolor forcolor module~forimage->module~forcolor module~forimage_parameters forimage_parameters module~forimage->module~forimage_parameters module~lut lut module~forimage->module~lut module~pnm pnm module~forimage->module~pnm module~forcolor->module~forimage_parameters module~forcolor->module~pnm iso_fortran_env iso_fortran_env module~forimage_parameters->iso_fortran_env module~pnm->module~forimage_parameters Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~example27~~CallsGraph program~example27 example27 proc~convert color%convert program~example27->proc~convert proc~find_nearest color%find_nearest program~example27->proc~find_nearest proc~set~2 color%set program~example27->proc~set~2 proc~cmyk_to_rgb cmyk_to_rgb proc~convert->proc~cmyk_to_rgb proc~decimal_to_rgb decimal_to_rgb proc~convert->proc~decimal_to_rgb proc~hex_to_rgb hex_to_rgb proc~convert->proc~hex_to_rgb proc~hsl_to_rgb hsl_to_rgb proc~convert->proc~hsl_to_rgb proc~hsv_to_rgb hsv_to_rgb proc~convert->proc~hsv_to_rgb proc~rgb_to_cmyk rgb_to_cmyk proc~convert->proc~rgb_to_cmyk proc~rgb_to_decimal rgb_to_decimal proc~convert->proc~rgb_to_decimal proc~rgb_to_hex rgb_to_hex proc~convert->proc~rgb_to_hex proc~rgb_to_hsl rgb_to_hsl proc~convert->proc~rgb_to_hsl proc~rgb_to_hsv rgb_to_hsv proc~convert->proc~rgb_to_hsv proc~rgb_to_xyz rgb_to_xyz proc~convert->proc~rgb_to_xyz proc~xyz_to_rgb xyz_to_rgb proc~convert->proc~xyz_to_rgb proc~get_rgb color%get_rgb proc~find_nearest->proc~get_rgb proc~initialize_colors initialize_colors proc~find_nearest->proc~initialize_colors proc~set_by_name color%set_by_name proc~set~2->proc~set_by_name proc~set_cmyk color%set_cmyk proc~set~2->proc~set_cmyk proc~set_decimal color%set_decimal proc~set~2->proc~set_decimal proc~set_hex color%set_hex proc~set~2->proc~set_hex proc~set_hsl color%set_hsl proc~set~2->proc~set_hsl proc~set_hsv color%set_hsv proc~set~2->proc~set_hsv proc~set_name color%set_name proc~set~2->proc~set_name proc~set_rgb color%set_rgb proc~set~2->proc~set_rgb proc~set_xyz color%set_xyz proc~set~2->proc~set_xyz proc~initialize_colors->proc~convert proc~initialize_colors->proc~set~2 proc~set_by_name->proc~initialize_colors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( color ) :: custom_color type( color ) :: nearest_color Source Code program example27 use forimage , only : ik , color implicit none type ( color ) :: custom_color , nearest_color call custom_color % set ( name = 'custom_color' , decimal = 16711680_ik ) print '(a)' , 'Find the nearest color to the custom color' call custom_color % convert ( 'decimal2rgb' ) call custom_color % find_nearest ( nearest_color ) call nearest_color % print () end program example27","tags":"","loc":"program/example27.html"},{"title":"test28.f90 – ForImage","text":"This file depends on sourcefile~~test28.f90~~EfferentGraph sourcefile~test28.f90 test28.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test28.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program example28 use forimage , only : color implicit none type ( color ) :: c call c % set ( 'red' , use_library = . true .) call c % print () end program example28","tags":"","loc":"sourcefile/test28.f90.html"},{"title":"test18.f90 – ForImage","text":"This file depends on sourcefile~~test18.f90~~EfferentGraph sourcefile~test18.f90 test18.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test18.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test18 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image2 , image3 integer ( ik ), dimension ( 60 , 60 ) :: px2 integer ( ik ), dimension ( 4 , 12 ) :: px3 print * , ' ' print '(a)' , 'Test 18' px2 = transpose ( reshape (& [ 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 251 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 251 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 251 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 251 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 251 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 237 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 237 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 237 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 237 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 237 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 242 ,& 0 ,& 0 ,& 0 ,& 0 ,& 0 ,& 119 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ,& 255 ]& , shape = shape ( px2 ))) call image2 % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px2 ) call image2 % brighten ( + 200 ) call image2 % export_pnm ( 'pnm_files/img2_binary_brighten' ) call image2 % export_pnm ( 'pnm_files/img2_ascii_brighten' , 'ascii' ) call image2 % print_info () call image2 % finalize () px3 ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px3 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px3 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px3 ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image3 % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px3 ) call image3 % brighten ( - 7 ) call image3 % export_pnm ( 'pnm_files/img3_binary_brighten' ) call image3 % export_pnm ( 'pnm_files/img3_ascii_brighten' , 'ascii' ) call image3 % print_info () call image3 % finalize () end program test18","tags":"","loc":"sourcefile/test18.f90.html"},{"title":"lut.f90 – ForImage","text":"Files dependent on this one sourcefile~~lut.f90~~AfferentGraph sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~demo_color.f90 demo_color.f90 sourcefile~demo_color.f90->sourcefile~forimage.f90 sourcefile~demo_ppm.f90 demo_ppm.f90 sourcefile~demo_ppm.f90->sourcefile~forimage.f90 sourcefile~test1.f90 test1.f90 sourcefile~test1.f90->sourcefile~forimage.f90 sourcefile~test10.f90 test10.f90 sourcefile~test10.f90->sourcefile~forimage.f90 sourcefile~test11.f90 test11.f90 sourcefile~test11.f90->sourcefile~forimage.f90 sourcefile~test12.f90 test12.f90 sourcefile~test12.f90->sourcefile~forimage.f90 sourcefile~test13.f90 test13.f90 sourcefile~test13.f90->sourcefile~forimage.f90 sourcefile~test14.f90 test14.f90 sourcefile~test14.f90->sourcefile~forimage.f90 sourcefile~test15.f90 test15.f90 sourcefile~test15.f90->sourcefile~forimage.f90 sourcefile~test16.f90 test16.f90 sourcefile~test16.f90->sourcefile~forimage.f90 sourcefile~test17.f90 test17.f90 sourcefile~test17.f90->sourcefile~forimage.f90 sourcefile~test18.f90 test18.f90 sourcefile~test18.f90->sourcefile~forimage.f90 sourcefile~test19.f90 test19.f90 sourcefile~test19.f90->sourcefile~forimage.f90 sourcefile~test2.f90 test2.f90 sourcefile~test2.f90->sourcefile~forimage.f90 sourcefile~test20.f90 test20.f90 sourcefile~test20.f90->sourcefile~forimage.f90 sourcefile~test21.f90 test21.f90 sourcefile~test21.f90->sourcefile~forimage.f90 sourcefile~test22.f90 test22.f90 sourcefile~test22.f90->sourcefile~forimage.f90 sourcefile~test23.f90 test23.f90 sourcefile~test23.f90->sourcefile~forimage.f90 sourcefile~test24.f90 test24.f90 sourcefile~test24.f90->sourcefile~forimage.f90 sourcefile~test25.f90 test25.f90 sourcefile~test25.f90->sourcefile~forimage.f90 sourcefile~test26.f90 test26.f90 sourcefile~test26.f90->sourcefile~forimage.f90 sourcefile~test27.f90 test27.f90 sourcefile~test27.f90->sourcefile~forimage.f90 sourcefile~test28.f90 test28.f90 sourcefile~test28.f90->sourcefile~forimage.f90 sourcefile~test29.f90 test29.f90 sourcefile~test29.f90->sourcefile~forimage.f90 sourcefile~test3.f90 test3.f90 sourcefile~test3.f90->sourcefile~forimage.f90 sourcefile~test4.f90 test4.f90 sourcefile~test4.f90->sourcefile~forimage.f90 sourcefile~test5.f90 test5.f90 sourcefile~test5.f90->sourcefile~forimage.f90 sourcefile~test6.f90 test6.f90 sourcefile~test6.f90->sourcefile~forimage.f90 sourcefile~test7.f90 test7.f90 sourcefile~test7.f90->sourcefile~forimage.f90 sourcefile~test8.f90 test8.f90 sourcefile~test8.f90->sourcefile~forimage.f90 sourcefile~test9.f90 test9.f90 sourcefile~test9.f90->sourcefile~forimage.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module lut implicit none private public format_lut !=============================================================================== type format_lut integer :: num_colors integer :: dim_colors integer , dimension (:,:), allocatable :: colors contains procedure :: allocate_colors procedure :: set procedure :: set_num_colors procedure :: get_num_colors procedure :: set_dim_colors procedure :: get_dim_colors procedure :: set_colors procedure :: get_colors procedure :: export procedure :: import procedure :: finalize => deallocate_lut end type format_lut !=============================================================================== contains !=============================================================================== !> author: Seyed Ali Ghasemi pure elemental subroutine allocate_colors ( this ) class ( format_lut ), intent ( inout ) :: this if ( allocated ( this % colors )) deallocate ( this % colors ) allocate ( this % colors ( this % num_colors , this % dim_colors )) end subroutine allocate_colors !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi pure subroutine set ( this , num_colors , dim_colors , colors ) class ( format_lut ), intent ( inout ) :: this integer , intent ( in ) :: num_colors , dim_colors integer , dimension (:,:), intent ( in ) :: colors this % num_colors = num_colors this % dim_colors = dim_colors call this % allocate_colors () this % colors = colors end subroutine set !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi pure elemental subroutine set_num_colors ( this , num_colors ) class ( format_lut ), intent ( inout ) :: this integer , intent ( in ) :: num_colors this % num_colors = num_colors end subroutine set_num_colors !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi pure elemental subroutine set_dim_colors ( this , dim_colors ) class ( format_lut ), intent ( inout ) :: this integer , intent ( in ) :: dim_colors this % dim_colors = dim_colors end subroutine set_dim_colors !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi pure elemental function get_num_colors ( this ) result ( num_colors ) class ( format_lut ), intent ( in ) :: this integer :: num_colors num_colors = this % num_colors end function get_num_colors !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi pure elemental function get_dim_colors ( this ) result ( dim_colors ) class ( format_lut ), intent ( in ) :: this integer :: dim_colors dim_colors = this % dim_colors end function get_dim_colors !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi pure subroutine set_colors ( this , colors ) class ( format_lut ), intent ( inout ) :: this integer , dimension (:,:), intent ( in ) :: colors this % colors = colors end subroutine set_colors !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi pure function get_colors ( this ) result ( colors ) class ( format_lut ), intent ( in ) :: this integer , dimension (:,:), allocatable :: colors colors = this % colors end function get_colors !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi pure elemental subroutine deallocate_lut ( this ) class ( format_lut ), intent ( inout ) :: this if ( allocated ( this % colors )) deallocate ( this % colors ) end subroutine deallocate_lut !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi impure subroutine import ( this , file_name , dim_colors ) class ( format_lut ), intent ( inout ) :: this character ( * ), intent ( in ) :: file_name integer , intent ( in ) :: dim_colors integer , dimension ( 1 , dim_colors ) :: temp integer :: nunit , iostat , num_rows , i logical :: file_exists integer , dimension ( dim_colors ) :: buffer inquire ( file = file_name // '.lut' , exist = file_exists ) if ( file_exists ) then open ( newunit = nunit , file = file_name // '.lut' , status = 'old' , action = 'read' , iostat = iostat ) if ( iostat /= 0 ) error stop 'Error opening the file.' num_rows = 0 do read ( nunit , * , iostat = iostat ) temp (:,:) if ( iostat /= 0 ) exit num_rows = num_rows + 1 end do call this % set_num_colors ( num_rows ) call this % set_dim_colors ( dim_colors ) call this % allocate_colors () rewind ( nunit ) do i = 1 , num_rows read ( nunit , * ) buffer this % colors ( i ,:) = buffer end do close ( nunit ) else error stop 'File ' // file_name // '.lut' // ' does not exist!' end if end subroutine import !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi impure subroutine export ( this , file_name ) class ( format_lut ), intent ( inout ) :: this character ( * ), intent ( in ) :: file_name integer :: nunit , i integer , dimension ( this % dim_colors ) :: buffer integer :: iostat open ( newunit = nunit , file = file_name // '.lut' , status = 'replace' , action = 'write' , iostat = iostat ) if ( iostat /= 0 ) error stop 'Error opening the file.' do i = 1 , this % get_num_colors () buffer = this % colors ( i ,:) write ( nunit , '(*(I3,1x))' ) buffer end do close ( nunit ) end subroutine export !=============================================================================== end module lut","tags":"","loc":"sourcefile/lut.f90.html"},{"title":"test22.f90 – ForImage","text":"This file depends on sourcefile~~test22.f90~~EfferentGraph sourcefile~test22.f90 test22.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test22.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test22 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image1 , image2 , image3 integer ( ik ), dimension ( 10 , 6 ) :: px1 integer ( ik ), dimension ( 60 , 60 ) :: px2 integer ( ik ), dimension ( 4 , 12 ) :: px3 print * , ' ' print '(a)' , 'Test 22' px1 ( 1 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 4 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 5 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 6 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 7 ,:) = [ 1 , 0 , 0 , 0 , 1 , 0 ] px1 ( 8 ,:) = [ 0 , 1 , 1 , 1 , 0 , 0 ] px1 ( 9 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] px1 ( 10 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] call image1 % set_pnm ( encoding = 'binary' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px1 ) call image1 % rotate ( - 90 ) call image1 % export_pnm ( 'pnm_files/img1_binary_rotate' ) call image1 % export_pnm ( 'pnm_files/img1_ascii_rotate' , 'ascii' ) call image1 % print_info () call image1 % finalize () px2 = transpose ( reshapeshape = shape ( px2 ))) call image2 % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px2 ) call image2 % rotate ( - 90 ) call image2 % export_pnm ( 'pnm_files/img2_binary_rotate' ) call image2 % export_pnm ( 'pnm_files/img2_ascii_rotate' , 'ascii' ) call image2 % print_info () call image2 % finalize () px3 ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px3 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px3 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px3 ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image3 % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px3 ) call image3 % rotate ( - 90 ) call image3 % export_pnm ( 'pnm_files/img3_binary_rotate' ) call image3 % export_pnm ( 'pnm_files/img3_ascii_rotate' , 'ascii' ) call image3 % print_info () call image3 % finalize () end program test22","tags":"","loc":"sourcefile/test22.f90.html"},{"title":"test25.f90 – ForImage","text":"This file depends on sourcefile~~test25.f90~~EfferentGraph sourcefile~test25.f90 test25.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test25.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test25 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image1 , image2 , image3 integer ( ik ), dimension ( 10 , 6 ) :: px1 integer ( ik ), dimension ( 60 , 60 ) :: px2 integer ( ik ), dimension ( 4 , 12 ) :: px3 print * , ' ' print '(a)' , 'Test 25' px1 ( 1 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 4 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 5 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 6 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 7 ,:) = [ 1 , 0 , 0 , 0 , 1 , 0 ] px1 ( 8 ,:) = [ 0 , 1 , 1 , 1 , 0 , 0 ] px1 ( 9 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] px1 ( 10 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] call image1 % set_pnm ( encoding = 'binary' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px1 ) call image1 % resize ( 25 , 25 ) call image1 % export_pnm ( 'pnm_files/img1_binary_resize' ) call image1 % export_pnm ( 'pnm_files/img1_ascii_resize' , 'ascii' ) call image1 % print_info () call image1 % finalize () px2 = transpose ( reshapeshape = shape ( px2 ))) call image2 % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px2 ) call image2 % resize ( 80 , 40 ) call image2 % export_pnm ( 'pnm_files/img2_binary_resize' ) call image2 % export_pnm ( 'pnm_files/img2_ascii_resize' , 'ascii' ) call image2 % print_info () call image2 % finalize () px3 ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px3 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px3 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px3 ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image3 % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px3 ) call image3 % resize ( 20 , 18 ) call image3 % export_pnm ( 'pnm_files/img3_binary_resize' ) call image3 % export_pnm ( 'pnm_files/img3_ascii_resize' , 'ascii' ) call image3 % print_info () call image3 % finalize () end program test25","tags":"","loc":"sourcefile/test25.f90.html"},{"title":"test5.f90 – ForImage","text":"This file depends on sourcefile~~test5.f90~~EfferentGraph sourcefile~test5.f90 test5.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test5.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Description: Creates and exports a 60x60 PGM image in binary format. program test use forimage , only : format_pnm , ik implicit none ! Declare an object of type format_pnm type ( format_pnm ) :: image ! Define a 2D array representing pixel values for the image integer ( ik ), dimension ( 60 , 60 ) :: px print * , ' ' print '(a)' , 'Test 5' px = transpose ( reshapeshape = shape ( px ))) ! Set the properties of the format_pnm object (encoding, file format, width, height, comment and pixels) call image % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px ) ! Export the PNM image to a file named 'img2_binary' in the specified format call image % export_pnm ( 'pnm_files/img2_binary' ) ! Print the image information to the screen call image % print_info () ! Finalize the format_pnm object to release resources call image % finalize () end program test","tags":"","loc":"sourcefile/test5.f90.html"},{"title":"test9.f90 – ForImage","text":"This file depends on sourcefile~~test9.f90~~EfferentGraph sourcefile~test9.f90 test9.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test9.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test9 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 9' call image % import_pnm ( 'pnm_files/img3_ascii' , 'ppm' , 'ascii' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img3_ascii_ex' ) call image % finalize () end program test9","tags":"","loc":"sourcefile/test9.f90.html"},{"title":"test17.f90 – ForImage","text":"This file depends on sourcefile~~test17.f90~~EfferentGraph sourcefile~test17.f90 test17.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test17.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test17 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image1 , image2 , image3 integer ( ik ), dimension ( 10 , 6 ) :: px1 integer ( ik ), dimension ( 60 , 60 ) :: px2 integer ( ik ), dimension ( 4 , 12 ) :: px3 print * , ' ' print '(a)' , 'Test 17' px1 ( 1 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 4 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 5 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 6 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 7 ,:) = [ 1 , 0 , 0 , 0 , 1 , 0 ] px1 ( 8 ,:) = [ 0 , 1 , 1 , 1 , 0 , 0 ] px1 ( 9 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] px1 ( 10 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] call image1 % set_pnm ( encoding = 'binary' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px1 ) call image1 % export_pnm ( 'pnm_files/img1_binary_negative' ) call image1 % export_pnm ( 'pnm_files/img1_ascii_negative' , 'ascii' ) call image1 % print_info () call image1 % finalize () px2 = transpose ( reshapeshape = shape ( px2 ))) call image2 % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px2 ) call image2 % negative () call image2 % export_pnm ( 'pnm_files/img2_binary_negative' ) call image2 % export_pnm ( 'pnm_files/img2_ascii_negative' , 'ascii' ) call image2 % print_info () call image2 % finalize () px3 ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px3 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px3 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px3 ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image3 % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px3 ) call image3 % negative () call image3 % export_pnm ( 'pnm_files/img3_binary_negative' ) call image3 % export_pnm ( 'pnm_files/img3_ascii_negative' , 'ascii' ) call image3 % print_info () call image3 % finalize () end program test17","tags":"","loc":"sourcefile/test17.f90.html"},{"title":"test2.f90 – ForImage","text":"This file depends on sourcefile~~test2.f90~~EfferentGraph sourcefile~test2.f90 test2.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test2.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Description: Creates and exports a 60x60 PGM image in ascii format. program test2 use forimage , only : format_pnm , ik implicit none ! Declare an object of type format_pnm type ( format_pnm ) :: image ! Define a 2D array representing pixel values for the image integer ( ik ), dimension ( 60 , 60 ) :: px print * , ' ' print '(a)' , 'Test 2' px = transpose ( reshapeshape = shape ( px ))) ! Set the properties of the format_pnm object (encoding, file format, width, height, comment and pixels) call image % set_pnm ( encoding = 'ascii' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px ) ! Export the PNM image to a file named 'img2_ascii' in the specified format call image % export_pnm ( 'pnm_files/img2_ascii' ) ! Print the image information to the screen call image % print_info () ! Finalize the format_pnm object to release resources call image % finalize () end program test2","tags":"","loc":"sourcefile/test2.f90.html"},{"title":"test6.f90 – ForImage","text":"This file depends on sourcefile~~test6.f90~~EfferentGraph sourcefile~test6.f90 test6.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test6.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Description: Creates and exports a 4X4 PPM image in binary format. program test6 use forimage , only : format_pnm , ik implicit none ! Declare an object of type format_pnm type ( format_pnm ) :: image ! Define a 2D array representing pixel values (0 and 1) for the image integer ( ik ), dimension ( 4 , 12 ) :: px print * , ' ' print '(a)' , 'Test 6' px ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ! Set the properties of the format_pnm object (encoding, file format, width, height, comment and pixels) call image % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px ) ! Export the PNM image to a file named 'img3_binary' in the specified format call image % export_pnm ( 'pnm_files/img3_binary' ) ! Print the image information to the screen call image % print_info () ! Finalize the format_pnm object to release resources call image % finalize () end program test6","tags":"","loc":"sourcefile/test6.f90.html"},{"title":"test21.f90 – ForImage","text":"This file depends on sourcefile~~test21.f90~~EfferentGraph sourcefile~test21.f90 test21.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test21.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test21 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image integer ( ik ), dimension ( 4 , 12 ) :: px print * , ' ' print '(a)' , 'Test 21' px ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px ) call image % greyscale () call image % export_pnm ( 'pnm_files/img3_binary_greyscale' ) call image % export_pnm ( 'pnm_files/img3_ascii_greyscale' , 'ascii' ) call image % print_info () call image % finalize () end program test21","tags":"","loc":"sourcefile/test21.f90.html"},{"title":"test10.f90 – ForImage","text":"This file depends on sourcefile~~test10.f90~~EfferentGraph sourcefile~test10.f90 test10.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test10.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test10 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 10' call image % import_pnm ( 'pnm_files/img1_binary' , 'pbm' , 'binary' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img1_binary_ex' ) call image % finalize () end program test10","tags":"","loc":"sourcefile/test10.f90.html"},{"title":"test7.f90 – ForImage","text":"This file depends on sourcefile~~test7.f90~~EfferentGraph sourcefile~test7.f90 test7.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test7.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test7 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 7' call image % import_pnm ( 'pnm_files/img1_ascii' , 'pbm' , 'ascii' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img1_ascii_ex' ) call image % finalize () end program test7","tags":"","loc":"sourcefile/test7.f90.html"},{"title":"forcolor.f90 – ForImage","text":"This file depends on sourcefile~~forcolor.f90~~EfferentGraph sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~forcolor.f90~~AfferentGraph sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~demo_color.f90 demo_color.f90 sourcefile~demo_color.f90->sourcefile~forimage.f90 sourcefile~demo_ppm.f90 demo_ppm.f90 sourcefile~demo_ppm.f90->sourcefile~forimage.f90 sourcefile~test1.f90 test1.f90 sourcefile~test1.f90->sourcefile~forimage.f90 sourcefile~test10.f90 test10.f90 sourcefile~test10.f90->sourcefile~forimage.f90 sourcefile~test11.f90 test11.f90 sourcefile~test11.f90->sourcefile~forimage.f90 sourcefile~test12.f90 test12.f90 sourcefile~test12.f90->sourcefile~forimage.f90 sourcefile~test13.f90 test13.f90 sourcefile~test13.f90->sourcefile~forimage.f90 sourcefile~test14.f90 test14.f90 sourcefile~test14.f90->sourcefile~forimage.f90 sourcefile~test15.f90 test15.f90 sourcefile~test15.f90->sourcefile~forimage.f90 sourcefile~test16.f90 test16.f90 sourcefile~test16.f90->sourcefile~forimage.f90 sourcefile~test17.f90 test17.f90 sourcefile~test17.f90->sourcefile~forimage.f90 sourcefile~test18.f90 test18.f90 sourcefile~test18.f90->sourcefile~forimage.f90 sourcefile~test19.f90 test19.f90 sourcefile~test19.f90->sourcefile~forimage.f90 sourcefile~test2.f90 test2.f90 sourcefile~test2.f90->sourcefile~forimage.f90 sourcefile~test20.f90 test20.f90 sourcefile~test20.f90->sourcefile~forimage.f90 sourcefile~test21.f90 test21.f90 sourcefile~test21.f90->sourcefile~forimage.f90 sourcefile~test22.f90 test22.f90 sourcefile~test22.f90->sourcefile~forimage.f90 sourcefile~test23.f90 test23.f90 sourcefile~test23.f90->sourcefile~forimage.f90 sourcefile~test24.f90 test24.f90 sourcefile~test24.f90->sourcefile~forimage.f90 sourcefile~test25.f90 test25.f90 sourcefile~test25.f90->sourcefile~forimage.f90 sourcefile~test26.f90 test26.f90 sourcefile~test26.f90->sourcefile~forimage.f90 sourcefile~test27.f90 test27.f90 sourcefile~test27.f90->sourcefile~forimage.f90 sourcefile~test28.f90 test28.f90 sourcefile~test28.f90->sourcefile~forimage.f90 sourcefile~test29.f90 test29.f90 sourcefile~test29.f90->sourcefile~forimage.f90 sourcefile~test3.f90 test3.f90 sourcefile~test3.f90->sourcefile~forimage.f90 sourcefile~test4.f90 test4.f90 sourcefile~test4.f90->sourcefile~forimage.f90 sourcefile~test5.f90 test5.f90 sourcefile~test5.f90->sourcefile~forimage.f90 sourcefile~test6.f90 test6.f90 sourcefile~test6.f90->sourcefile~forimage.f90 sourcefile~test7.f90 test7.f90 sourcefile~test7.f90->sourcefile~forimage.f90 sourcefile~test8.f90 test8.f90 sourcefile~test8.f90->sourcefile~forimage.f90 sourcefile~test9.f90 test9.f90 sourcefile~test9.f90->sourcefile~forimage.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module forcolor use forimage_parameters , only : rk , ik use pnm , only : format_pnm implicit none private public :: color !=============================================================================== type :: color integer ( ik ) , private :: r = 0_ik , g = 0_ik , b = 0_ik !! rgb integer ( ik ) , private :: c = 0_ik , m = 0_ik , y = 0_ik , k = 0_ik !! cmyk integer ( ik ) , private :: decimal = 0_ik !! decimal character ( len = 7 ) , private :: hex = '#000000' !! hex real ( rk ) , private :: h = 0.0_rk , s = 0.0_rk , v = 0.0_rk !! hsv real ( rk ) , private :: hl = 0.0_rk , sl = 0.0_rk , vl = 0.0_rk !! hsl real ( rk ) , private :: xyz_x = 0.0_rk , xyz_y = 0.0_rk , xyz_z = 0.0_rk !! xyz character ( len = 256 ) , private :: color_name !! color name contains procedure :: set procedure , private :: set_by_name procedure , private :: set_name procedure , private :: set_rgb procedure , private :: set_hex procedure , private :: set_decimal procedure , private :: set_cmyk procedure , private :: set_hsv procedure , private :: set_hsl procedure , private :: set_xyz procedure :: get procedure , private :: get_name procedure , private :: get_rgb procedure , private :: get_hex procedure , private :: get_decimal procedure , private :: get_cmyk procedure , private :: get_hsv procedure , private :: get_hsl procedure , private :: get_xyz procedure :: print procedure , private :: print_name procedure , private :: print_rgb procedure , private :: print_hex procedure , private :: print_decimal procedure , private :: print_cmyk procedure , private :: print_hsv procedure , private :: print_hsl procedure , private :: print_xyz procedure , private :: copy_color generic :: assignment ( = ) => copy_color procedure :: convert procedure :: find_nearest procedure :: print_available_colors procedure :: save procedure :: save_available_colors end type color !=============================================================================== contains !=============================================================================== !> author: Seyed Ali Ghasemi pure subroutine initialize_colors ( colors ) type ( color ), intent ( out ), dimension (:), allocatable :: colors allocate ( colors ( 14 )) call colors ( 1 )% set ( name = 'red' , r = 255_ik , g = 0_ik , b = 0_ik ) call colors ( 2 )% set ( name = 'green' , r = 0_ik , g = 128_ik , b = 0_ik ) call colors ( 3 )% set ( name = 'blue' , r = 0_ik , g = 0_ik , b = 255_ik ) call colors ( 4 )% set ( name = 'yellow' , r = 255_ik , g = 255_ik , b = 0_ik ) call colors ( 5 )% set ( name = 'cyan' , r = 0_ik , g = 255_ik , b = 255_ik ) call colors ( 6 )% set ( name = 'magenta' , r = 255_ik , g = 0_ik , b = 255_ik ) call colors ( 7 )% set ( name = 'black' , r = 0_ik , g = 0_ik , b = 0_ik ) call colors ( 8 )% set ( name = 'white' , r = 255_ik , g = 255_ik , b = 255_ik ) call colors ( 9 )% set ( name = 'gray' , r = 128_ik , g = 128_ik , b = 128_ik ) call colors ( 10 )% set ( name = 'brown' , r = 165_ik , g = 42_ik , b = 42_ik ) call colors ( 11 )% set ( name = 'orange' , r = 255_ik , g = 165_ik , b = 0_ik ) call colors ( 12 )% set ( name = 'gold' , r = 255_ik , g = 215_ik , b = 0_ik ) call colors ( 13 )% set ( name = 'pink' , r = 255_ik , g = 192_ik , b = 203_ik ) call colors ( 14 )% set ( name = 'violet' , r = 138_ik , g = 43_ik , b = 226_ik ) call colors ( 1 : 14 )% convert ( 'rgb2all' ) end subroutine initialize_colors !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine print ( this , option ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ), optional :: option if ( present ( option )) then select case ( trim ( option )) case ( 'rgb' ) call this % print_rgb () print * , '' case ( 'hex' ) call this % print_hex () print * , '' case ( 'decimal' ) call this % print_decimal () print * , '' case ( 'cmyk' ) call this % print_cmyk () print * , '' case ( 'hsv' ) call this % print_hsv () print * , '' case ( 'hsl' ) call this % print_hsl () print * , '' case ( 'name' ) call this % print_name () print * , '' case ( 'xyz' ) call this % print_xyz () print * , '' case default error stop 'error: unknown option' end select else call this % print_name () call this % print_rgb () call this % print_hex () call this % print_decimal () call this % print_cmyk () call this % print_hsv () call this % print_hsl () call this % print_xyz () print * , '' end if end subroutine print !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine print_name ( this ) class ( color ), intent ( in ) :: this print '(a,a)' , 'color name: ' , trim ( this % color_name ) end subroutine print_name !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine print_hsl ( this ) class ( color ), intent ( in ) :: this print '(a, 3(f8.4, 2x))' , \"hsl: \" , this % hl , this % sl , this % vl end subroutine print_hsl !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine print_hsv ( this ) class ( color ), intent ( in ) :: this print '(a, 3(f8.4, 2x))' , \"hsv: \" , this % h , this % s , this % v end subroutine print_hsv !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine print_rgb ( this ) class ( color ), intent ( in ) :: this print '(a,g0,a,g0,a,g0)' , 'rgb: ' , this % r , ', ' , this % g , ', ' , this % b end subroutine print_rgb !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine print_hex ( this ) class ( color ), intent ( in ) :: this print '(a,a)' , 'hex: ' , this % hex end subroutine print_hex !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine print_decimal ( this ) class ( color ), intent ( in ) :: this print '(a,g0)' , 'decimal: ' , this % decimal end subroutine print_decimal !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine print_cmyk ( this ) class ( color ), intent ( in ) :: this print '(a,g0,a,g0,a,g0,a,g0)' , 'cmyk: ' , this % c , ', ' , this % m , ', ' , this % y , ', ' , this % k end subroutine print_cmyk !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine print_xyz ( this ) class ( color ), intent ( in ) :: this print '(a, 3(f8.4, 2x))' , \"xyz: \" , this % xyz_x , this % xyz_y , this % xyz_z end subroutine print_xyz !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set ( this , name , r , g , b , c , m , y , k , decimal , hex , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z , use_library ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: name integer ( ik ), intent ( in ), optional :: r , g , b , c , m , y , k , decimal character ( len =* ), intent ( in ), optional :: hex real ( rk ), intent ( in ), optional :: h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z logical , intent ( in ), optional :: use_library logical :: use_library_ if ( present ( use_library )) then use_library_ = use_library else use_library_ = . false . end if if ( use_library_ ) then call this % set_by_name ( name ) else call this % set_name ( name ) if ( present ( r ) . and . present ( g ) . and . present ( b )) call this % set_rgb ( r , g , b ) if ( present ( c ) . and . present ( m ) . and . present ( y ) . and . present ( k )) call this % set_cmyk ( c , m , y , k ) if ( present ( decimal )) call this % set_decimal ( decimal ) if ( present ( hex )) call this % set_hex ( hex ) if ( present ( h ) . and . present ( s ) . and . present ( v )) call this % set_hsv ( h , s , v ) if ( present ( hl ) . and . present ( sl ) . and . present ( vl )) call this % set_hsl ( hl , sl , vl ) if ( present ( xyz_x ) . and . present ( xyz_y ) . and . present ( xyz_z )) call this % set_xyz ( xyz_x , xyz_y , xyz_z ) end if end subroutine set !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_by_name ( this , name ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: name type ( color ), dimension (:), allocatable :: colors integer :: i call initialize_colors ( colors ) do concurrent ( i = 1 : size ( colors )) if ( trim ( colors ( i )% color_name ) == trim ( name )) then this = colors ( i ) end if end do end subroutine set_by_name !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_name ( this , name ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: name this % color_name = trim ( name ) end subroutine set_name !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_hsl ( this , h , s , l ) class ( color ), intent ( inout ) :: this real ( rk ), intent ( in ) :: h , s , l this % hl = h this % sl = s this % vl = l end subroutine set_hsl !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_hsv ( this , h , s , v ) class ( color ), intent ( inout ) :: this real ( rk ), intent ( in ) :: h , s , v this % h = h this % s = s this % v = v end subroutine set_hsv !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_rgb ( this , r , g , b ) class ( color ), intent ( inout ) :: this integer ( ik ), intent ( in ) :: r , g , b this % r = r this % g = g this % b = b end subroutine set_rgb !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_hex ( this , hex ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: hex this % hex = hex end subroutine set_hex !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_decimal ( this , decimal ) class ( color ), intent ( inout ) :: this integer ( ik ), intent ( in ) :: decimal this % decimal = decimal end subroutine set_decimal !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_cmyk ( this , c , m , y , k ) class ( color ), intent ( inout ) :: this integer ( ik ), intent ( in ) :: c , m , y , k this % c = c this % m = m this % y = y this % k = k end subroutine set_cmyk !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_xyz ( this , x , y , z ) class ( color ), intent ( inout ) :: this real ( rk ), intent ( in ) :: x , y , z this % xyz_x = x this % xyz_y = y this % xyz_z = z end subroutine set_xyz !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine get ( this , name , r , g , b , c , m , y , k , decimal , hex , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( out ), optional :: name integer ( ik ), intent ( out ), optional :: r , g , b , c , m , y , k , decimal character ( len = 7 ), intent ( out ), optional :: hex real ( rk ), intent ( out ), optional :: h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z if ( present ( name )) call this % get_name ( name ) if ( present ( r ) . and . present ( g ) . and . present ( b )) call this % get_rgb ( r , g , b ) if ( present ( c ) . and . present ( m ) . and . present ( y ) . and . present ( k )) call this % get_cmyk ( c , m , y , k ) if ( present ( decimal )) call this % get_decimal ( decimal ) if ( present ( hex )) call this % get_hex ( hex ) if ( present ( h ) . and . present ( s ) . and . present ( v )) call this % get_hsv ( h , s , v ) if ( present ( hl ) . and . present ( sl ) . and . present ( vl )) call this % get_hsl ( hl , sl , vl ) if ( present ( xyz_x ) . and . present ( xyz_y ) . and . present ( xyz_z )) call this % get_xyz ( xyz_x , xyz_y , xyz_z ) end subroutine get !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine get_name ( this , name ) class ( color ), intent ( in ) :: this character ( len =* ), intent ( out ) :: name name = this % color_name end subroutine get_name !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine get_hsl ( this , h , s , l ) class ( color ), intent ( in ) :: this real ( rk ), intent ( out ) :: h , s , l h = this % hl s = this % sl l = this % vl end subroutine get_hsl !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine get_hsv ( this , h , s , v ) class ( color ), intent ( in ) :: this real ( rk ), intent ( out ) :: h , s , v h = this % h s = this % s v = this % v end subroutine get_hsv !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine get_decimal ( this , decimal ) class ( color ), intent ( in ) :: this integer ( ik ), intent ( out ) :: decimal decimal = this % decimal end subroutine get_decimal !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine get_cmyk ( this , c , m , y , k ) class ( color ), intent ( in ) :: this integer ( ik ), intent ( out ) :: c , m , y , k c = this % c m = this % m y = this % y k = this % k end subroutine get_cmyk !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine get_hex ( this , hex ) class ( color ), intent ( in ) :: this character ( len =* ), intent ( out ) :: hex hex = this % hex end subroutine get_hex !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine get_rgb ( this , r , g , b ) class ( color ), intent ( in ) :: this integer ( ik ), intent ( out ) :: r , g , b r = this % r g = this % g b = this % b end subroutine get_rgb !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine get_xyz ( this , x , y , z ) class ( color ), intent ( in ) :: this real ( rk ), intent ( out ) :: x , y , z x = this % xyz_x y = this % xyz_y z = this % xyz_z end subroutine get_xyz !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine convert ( this , to ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: to integer ( ik ) :: r , g , b select case ( to ) case ( 'rgb2hex' ) call rgb_to_hex ( this % r , this % g , this % b , this % hex ) case ( 'rgb2decimal' ) call rgb_to_decimal ( this % r , this % g , this % b , this % decimal ) case ( 'rgb2cmyk' ) call rgb_to_cmyk ( this % r , this % g , this % b , this % c , this % m , this % y , this % k ) case ( 'rgb2hsv' ) call rgb_to_hsv ( this % r , this % g , this % b , this % h , this % s , this % v ) case ( 'rgb2hsl' ) call rgb_to_hsl ( this % r , this % g , this % b , this % hl , this % sl , this % vl ) case ( 'rgb2xyz' ) call rgb_to_xyz ( this % r , this % g , this % b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'rgb2all' ) call rgb_to_hex ( this % r , this % g , this % b , this % hex ) call rgb_to_decimal ( this % r , this % g , this % b , this % decimal ) call rgb_to_cmyk ( this % r , this % g , this % b , this % c , this % m , this % y , this % k ) call rgb_to_hsv ( this % r , this % g , this % b , this % h , this % s , this % v ) call rgb_to_hsl ( this % r , this % g , this % b , this % hl , this % sl , this % vl ) call rgb_to_xyz ( this % r , this % g , this % b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'hex2rgb' ) call hex_to_rgb ( this % hex , this % r , this % g , this % b ) case ( 'hex2decimal' ) call hex_to_rgb ( this % hex , r , g , b ) call rgb_to_decimal ( r , g , b , this % decimal ) case ( 'hex2cmyk' ) call hex_to_rgb ( this % hex , r , g , b ) call rgb_to_cmyk ( r , g , b , this % c , this % m , this % y , this % k ) case ( 'hex2hsv' ) call hex_to_rgb ( this % hex , r , g , b ) call rgb_to_hsv ( r , g , b , this % h , this % s , this % v ) case ( 'hex2hsl' ) call hex_to_rgb ( this % hex , r , g , b ) call rgb_to_hsl ( r , g , b , this % hl , this % sl , this % vl ) case ( 'hex2xyz' ) call hex_to_rgb ( this % hex , r , g , b ) call rgb_to_xyz ( r , g , b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'hex2all' ) call hex_to_rgb ( this % hex , this % r , this % g , this % b ) call rgb_to_decimal ( this % r , this % g , this % b , this % decimal ) call rgb_to_cmyk ( this % r , this % g , this % b , this % c , this % m , this % y , this % k ) call rgb_to_hsv ( this % r , this % g , this % b , this % h , this % s , this % v ) call rgb_to_hsl ( this % r , this % g , this % b , this % hl , this % sl , this % vl ) call rgb_to_xyz ( this % r , this % g , this % b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'decimal2rgb' ) call decimal_to_rgb ( this % decimal , this % r , this % g , this % b ) case ( 'decimal2hex' ) call decimal_to_rgb ( this % decimal , r , g , b ) call rgb_to_hex ( r , g , b , this % hex ) case ( 'decimal2cmyk' ) call decimal_to_rgb ( this % decimal , r , g , b ) call rgb_to_cmyk ( r , g , b , this % c , this % m , this % y , this % k ) case ( 'decimal2hsv' ) call decimal_to_rgb ( this % decimal , r , g , b ) call rgb_to_hsv ( r , g , b , this % h , this % s , this % v ) case ( 'decimal2hsl' ) call decimal_to_rgb ( this % decimal , r , g , b ) call rgb_to_hsl ( r , g , b , this % hl , this % sl , this % vl ) case ( 'decimal2xyz' ) call decimal_to_rgb ( this % decimal , r , g , b ) call rgb_to_xyz ( r , g , b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'decimal2all' ) call decimal_to_rgb ( this % decimal , this % r , this % g , this % b ) call rgb_to_hex ( this % r , this % g , this % b , this % hex ) call rgb_to_cmyk ( this % r , this % g , this % b , this % c , this % m , this % y , this % k ) call rgb_to_hsv ( this % r , this % g , this % b , this % h , this % s , this % v ) call rgb_to_hsl ( this % r , this % g , this % b , this % hl , this % sl , this % vl ) call rgb_to_xyz ( this % r , this % g , this % b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'cmyk2rgb' ) call cmyk_to_rgb ( this % c , this % m , this % y , this % k , this % r , this % g , this % b ) case ( 'cmyk2hex' ) call cmyk_to_rgb ( this % c , this % m , this % y , this % k , r , g , b ) call rgb_to_hex ( r , g , b , this % hex ) case ( 'cmyk2decimal' ) call cmyk_to_rgb ( this % c , this % m , this % y , this % k , r , g , b ) call rgb_to_decimal ( r , g , b , this % decimal ) case ( 'cmyk2hsv' ) call cmyk_to_rgb ( this % c , this % m , this % y , this % k , r , g , b ) call rgb_to_hsv ( r , g , b , this % h , this % s , this % v ) case ( 'cmyk2hsl' ) call cmyk_to_rgb ( this % c , this % m , this % y , this % k , r , g , b ) call rgb_to_hsl ( r , g , b , this % hl , this % sl , this % vl ) case ( 'cmyk2xyz' ) call cmyk_to_rgb ( this % c , this % m , this % y , this % k , r , g , b ) call rgb_to_xyz ( r , g , b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'cmyk2all' ) call cmyk_to_rgb ( this % c , this % m , this % y , this % k , this % r , this % g , this % b ) call rgb_to_hex ( this % r , this % g , this % b , this % hex ) call rgb_to_decimal ( this % r , this % g , this % b , this % decimal ) call rgb_to_hsv ( this % r , this % g , this % b , this % h , this % s , this % v ) call rgb_to_hsl ( this % r , this % g , this % b , this % hl , this % sl , this % vl ) call rgb_to_xyz ( this % r , this % g , this % b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'hsv2rgb' ) call hsv_to_rgb ( this % h , this % s , this % v , this % r , this % g , this % b ) case ( 'hsv2hex' ) call hsv_to_rgb ( this % h , this % s , this % v , r , g , b ) call rgb_to_hex ( r , g , b , this % hex ) case ( 'hsv2decimal' ) call hsv_to_rgb ( this % h , this % s , this % v , r , g , b ) call rgb_to_decimal ( r , g , b , this % decimal ) case ( 'hsv2cmyk' ) call hsv_to_rgb ( this % h , this % s , this % v , r , g , b ) call rgb_to_cmyk ( r , g , b , this % c , this % m , this % y , this % k ) case ( 'hsv2hsl' ) call hsv_to_rgb ( this % h , this % s , this % v , r , g , b ) call rgb_to_hsl ( r , g , b , this % hl , this % sl , this % vl ) case ( 'hsv2xyz' ) call hsv_to_rgb ( this % h , this % s , this % v , r , g , b ) call rgb_to_xyz ( r , g , b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'hsv2all' ) call hsv_to_rgb ( this % h , this % s , this % v , this % r , this % g , this % b ) call rgb_to_hex ( this % r , this % g , this % b , this % hex ) call rgb_to_decimal ( this % r , this % g , this % b , this % decimal ) call rgb_to_cmyk ( this % r , this % g , this % b , this % c , this % m , this % y , this % k ) call rgb_to_hsl ( this % r , this % g , this % b , this % hl , this % sl , this % vl ) call rgb_to_xyz ( this % r , this % g , this % b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'hsl2hsv' ) call hsl_to_rgb ( this % hl , this % sl , this % vl , r , g , b ) call rgb_to_hsv ( r , g , b , this % h , this % s , this % v ) case ( 'hsl2rgb' ) call hsl_to_rgb ( this % hl , this % sl , this % vl , this % r , this % g , this % b ) case ( 'hsl2hex' ) call hsl_to_rgb ( this % hl , this % sl , this % vl , r , g , b ) call rgb_to_hex ( r , g , b , this % hex ) case ( 'hsl2decimal' ) call hsl_to_rgb ( this % hl , this % sl , this % vl , r , g , b ) call rgb_to_decimal ( r , g , b , this % decimal ) case ( 'hsl2cmyk' ) call hsl_to_rgb ( this % hl , this % sl , this % vl , r , g , b ) call rgb_to_cmyk ( r , g , b , this % c , this % m , this % y , this % k ) case ( 'hsl2xyz' ) call hsl_to_rgb ( this % hl , this % sl , this % vl , r , g , b ) call rgb_to_xyz ( r , g , b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'hsl2all' ) call hsl_to_rgb ( this % hl , this % sl , this % vl , this % r , this % g , this % b ) call rgb_to_hex ( this % r , this % g , this % b , this % hex ) call rgb_to_decimal ( this % r , this % g , this % b , this % decimal ) call rgb_to_cmyk ( this % r , this % g , this % b , this % c , this % m , this % y , this % k ) call rgb_to_hsv ( this % r , this % g , this % b , this % h , this % s , this % v ) call rgb_to_xyz ( this % r , this % g , this % b , this % xyz_x , this % xyz_y , this % xyz_z ) case ( 'xyz2rgb' ) call xyz_to_rgb ( this % xyz_x , this % xyz_y , this % xyz_z , this % r , this % g , this % b ) case ( 'xyz2hex' ) call xyz_to_rgb ( this % xyz_x , this % xyz_y , this % xyz_z , r , g , b ) call rgb_to_hex ( r , g , b , this % hex ) case ( 'xyz2decimal' ) call xyz_to_rgb ( this % xyz_x , this % xyz_y , this % xyz_z , r , g , b ) call rgb_to_decimal ( r , g , b , this % decimal ) case ( 'xyz2cmyk' ) call xyz_to_rgb ( this % xyz_x , this % xyz_y , this % xyz_z , r , g , b ) call rgb_to_cmyk ( r , g , b , this % c , this % m , this % y , this % k ) case ( 'xyz2hsv' ) call xyz_to_rgb ( this % xyz_x , this % xyz_y , this % xyz_z , r , g , b ) call rgb_to_hsv ( r , g , b , this % h , this % s , this % v ) case ( 'xyz2hsl' ) call xyz_to_rgb ( this % xyz_x , this % xyz_y , this % xyz_z , r , g , b ) call rgb_to_hsl ( r , g , b , this % hl , this % sl , this % vl ) case ( 'xyz2all' ) call xyz_to_rgb ( this % xyz_x , this % xyz_y , this % xyz_z , this % r , this % g , this % b ) call rgb_to_hex ( this % r , this % g , this % b , this % hex ) call rgb_to_decimal ( this % r , this % g , this % b , this % decimal ) call rgb_to_cmyk ( this % r , this % g , this % b , this % c , this % m , this % y , this % k ) call rgb_to_hsv ( this % r , this % g , this % b , this % h , this % s , this % v ) call rgb_to_hsl ( this % r , this % g , this % b , this % hl , this % sl , this % vl ) end select end subroutine convert !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine rgb_to_hex ( r , g , b , hex ) integer ( ik ), intent ( in ) :: r , g , b character ( len = 7 ), intent ( out ) :: hex write ( hex , '(\"#\",3(z2.2))' ) r , g , b end subroutine rgb_to_hex !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine rgb_to_decimal ( r , g , b , decimal ) implicit none integer ( ik ), intent ( in ) :: r , g , b integer ( ik ), intent ( out ) :: decimal decimal = r * 65536_ik + g * 256_ik + b end subroutine rgb_to_decimal !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine rgb_to_cmyk ( r , g , b , c , m , y , k ) integer ( ik ), intent ( in ) :: r , g , b integer ( ik ), intent ( out ) :: c , m , y , k real ( rk ) :: rn , gn , bn real ( rk ) :: cr , mr , yr , kr rn = r / 25 5.0_rk gn = g / 25 5.0_rk bn = b / 25 5.0_rk kr = 1.0_rk - max ( rn , gn , bn ) if ( abs ( kr - 1.0_rk ) < 1.0e-6_rk ) then cr = 0.0_rk mr = 0.0_rk yr = 0.0_rk else cr = ( 1.0_rk - rn - kr ) / ( 1.0_rk - kr ) mr = ( 1.0_rk - gn - kr ) / ( 1.0_rk - kr ) yr = ( 1.0_rk - bn - kr ) / ( 1.0_rk - kr ) end if c = nint ( cr * 10 0.0_rk , kind = ik ) m = nint ( mr * 10 0.0_rk , kind = ik ) y = nint ( yr * 10 0.0_rk , kind = ik ) k = nint ( kr * 10 0.0_rk , kind = ik ) end subroutine rgb_to_cmyk !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine hex_to_rgb ( hex , r , g , b ) character ( len =* ), intent ( in ) :: hex integer ( ik ), intent ( out ) :: r , g , b read ( hex ( 2 : 3 ), '(z2)' ) r read ( hex ( 4 : 5 ), '(z2)' ) g read ( hex ( 6 : 7 ), '(z2)' ) b end subroutine hex_to_rgb !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine decimal_to_rgb ( decimal , r , g , b ) integer ( ik ), intent ( in ) :: decimal integer ( ik ), intent ( out ) :: r , g , b r = mod ( decimal / 65536_ik , 256_ik ) g = mod ( decimal / 256_ik , 256_ik ) b = mod ( decimal , 256_ik ) end subroutine decimal_to_rgb !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine cmyk_to_rgb ( c , m , y , k , r , g , b ) integer ( ik ), intent ( in ) :: c , m , y , k integer ( ik ), intent ( out ) :: r , g , b real ( rk ) :: cr , mg , yl cr = real ( c , kind = rk ) / 10 0.0_rk mg = real ( m , kind = rk ) / 10 0.0_rk yl = real ( y , kind = rk ) / 10 0.0_rk r = nint ( 25 5.0_rk * ( 1.0_rk - cr ) * ( 1.0_rk - real ( k , kind = rk ) / 10 0.0_rk ), kind = ik ) g = nint ( 25 5.0_rk * ( 1.0_rk - mg ) * ( 1.0_rk - real ( k , kind = rk ) / 10 0.0_rk ), kind = ik ) b = nint ( 25 5.0_rk * ( 1.0_rk - yl ) * ( 1.0_rk - real ( k , kind = rk ) / 10 0.0_rk ), kind = ik ) end subroutine cmyk_to_rgb !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine hsv_to_rgb ( h , s , v , r , g , b ) real ( rk ), intent ( in ) :: h , s , v integer ( ik ), intent ( out ) :: r , g , b real ( rk ) :: c , h_prime , x , m real ( rk ) :: h_dash , r1 , g1 , b1 c = v / 10 0.0_rk * s / 10 0.0_rk h_prime = h / 6 0.0_rk h_dash = mod ( h_prime , 6.0_rk ) x = c * ( 1.0_rk - abs ( h_dash - 2.0_rk * floor ( h_dash / 2.0_rk ) - 1.0_rk )) select case ( int ( h_dash )) case ( 0 ) r1 = c g1 = x b1 = 0.0_rk case ( 1 ) r1 = x g1 = c b1 = 0.0_rk case ( 2 ) r1 = 0.0_rk g1 = c b1 = x case ( 3 ) r1 = 0.0_rk g1 = x b1 = c case ( 4 ) r1 = x g1 = 0.0_rk b1 = c case ( 5 ) r1 = c g1 = 0.0_rk b1 = x case default r1 = 0.0_rk g1 = 0.0_rk b1 = 0.0_rk end select m = v / 10 0.0_rk - c r = nint ( 25 5.0_rk * ( r1 + m ), kind = ik ) g = nint ( 25 5.0_rk * ( g1 + m ), kind = ik ) b = nint ( 25 5.0_rk * ( b1 + m ), kind = ik ) r = max ( 0 , min ( 255 , r )) g = max ( 0 , min ( 255 , g )) b = max ( 0 , min ( 255 , b )) end subroutine hsv_to_rgb !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine rgb_to_hsv ( r , g , b , h , s , v ) integer ( ik ), intent ( in ) :: r , g , b real ( rk ), intent ( out ) :: h , s , v real ( rk ) :: rn , gn , bn , cmax , cmin , delta rn = real ( r , kind = rk ) / 25 5.0_rk gn = real ( g , kind = rk ) / 25 5.0_rk bn = real ( b , kind = rk ) / 25 5.0_rk cmax = max ( rn , max ( gn , bn )) cmin = min ( rn , min ( gn , bn )) delta = cmax - cmin v = cmax if ( delta < 1e-6_rk ) then h = 0.0_rk s = 0.0_rk else if ( cmax > 0.0_rk ) then s = delta / cmax if ( abs ( cmax - rn ) < 1.0e-6_rk ) then h = 6 0.0_rk * mod ((( gn - bn ) / delta ), 6.0_rk ) elseif ( abs ( cmax - gn ) < 1.0e-6_rk ) then h = 6 0.0_rk * ((( bn - rn ) / delta ) + 2.0_rk ) else h = 6 0.0_rk * ((( rn - gn ) / delta ) + 4.0_rk ) end if end if if ( h < 0.0_rk ) h = h + 36 0.0_rk end if s = s * 10 0.0_rk v = v * 10 0.0_rk end subroutine rgb_to_hsv !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine rgb_to_hsl ( r , g , b , h , s , l ) integer ( ik ), intent ( in ) :: r , g , b real ( rk ), intent ( out ) :: h , s , l real ( rk ) :: rn , gn , bn real ( rk ) :: cmax , cmin rn = real ( r , kind = rk ) / 25 5.0_rk gn = real ( g , kind = rk ) / 25 5.0_rk bn = real ( b , kind = rk ) / 25 5.0_rk cmax = max ( rn , max ( gn , bn )) cmin = min ( rn , min ( gn , bn )) l = ( cmax + cmin ) / 2.0_rk if ( abs ( cmax - cmin ) < 1e-6_rk ) then s = 0.0_rk else if ( l <= 0.5_rk ) then s = ( cmax - cmin ) / ( cmax + cmin ) else s = ( cmax - cmin ) / ( 2.0_rk - cmax - cmin ) end if end if if ( abs ( cmax - cmin ) < 1e-6_rk ) then h = 0.0_rk elseif ( abs ( cmax - rn ) < 1e-6_rk ) then h = 6 0.0_rk * mod (( gn - bn ) / ( cmax - cmin ), 6.0_rk ) else if ( abs ( cmax - gn ) < 1e-6_rk ) then h = 6 0.0_rk * (( bn - rn ) / ( cmax - cmin ) + 2.0_rk ) else if ( abs ( cmax - bn ) < 1e-6_rk ) then h = 6 0.0_rk * (( rn - gn ) / ( cmax - cmin ) + 4.0_rk ) end if if ( h < 0.0_rk ) then h = h + 36 0.0_rk end if s = s * 10 0.0_rk l = l * 10 0.0_rk end subroutine rgb_to_hsl !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine hsl_to_rgb ( h , s , l , r , g , b ) real ( rk ), intent ( in ) :: h , s , l integer ( ik ), intent ( out ) :: r , g , b real ( rk ) :: hn , sn , ln real ( rk ) :: c , h_prime , x , m real ( rk ) :: r1 , g1 , b1 hn = h sn = s / 10 0.0_rk ln = l / 10 0.0_rk c = ( 1.0_rk - abs ( 2.0_rk * ln - 1.0_rk )) * sn h_prime = mod ( hn , 36 0.0_rk ) / 6 0.0_rk x = c * ( 1.0_rk - abs ( mod ( h_prime , 2.0_rk ) - 1.0_rk )) select case ( int ( h_prime )) case ( 0 ) r1 = c g1 = x b1 = 0.0_rk case ( 1 ) r1 = x g1 = c b1 = 0.0_rk case ( 2 ) r1 = 0.0_rk g1 = c b1 = x case ( 3 ) r1 = 0.0_rk g1 = x b1 = c case ( 4 ) r1 = x g1 = 0.0_rk b1 = c case ( 5 ) r1 = c g1 = 0.0_rk b1 = x end select m = ln - c / 2.0_rk r = nint ( r1 * 25 5.0_rk + m * 25 5.0_rk , kind = ik ) g = nint ( g1 * 25 5.0_rk + m * 25 5.0_rk , kind = ik ) b = nint ( b1 * 25 5.0_rk + m * 25 5.0_rk , kind = ik ) end subroutine hsl_to_rgb !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine rgb_to_xyz ( r , g , b , x , y , z ) integer ( ik ), intent ( in ) :: r , g , b real ( rk ), intent ( out ) :: x , y , z real ( rk ) :: rn , gn , bn ! Normalize RGB values to the range [0, 1] rn = real ( r , kind = rk ) / 25 5.0_rk gn = real ( g , kind = rk ) / 25 5.0_rk bn = real ( b , kind = rk ) / 25 5.0_rk ! Apply gamma correction if ( rn <= 0.04045_rk ) then rn = rn / 1 2.92_rk else rn = (( rn + 0.055_rk ) / 1.055_rk ) ** 2.4_rk end if if ( gn <= 0.04045_rk ) then gn = gn / 1 2.92_rk else gn = (( gn + 0.055_rk ) / 1.055_rk ) ** 2.4_rk end if if ( bn <= 0.04045_rk ) then bn = bn / 1 2.92_rk else bn = (( bn + 0.055_rk ) / 1.055_rk ) ** 2.4_rk end if ! Convert RGB to XYZ using defined transformation matrix x = 0.4124564_rk * rn + 0.3575761_rk * gn + 0.1804375_rk * bn y = 0.2126729_rk * rn + 0.7151522_rk * gn + 0.0721750_rk * bn z = 0.0193339_rk * rn + 0.1191920_rk * gn + 0.9503041_rk * bn x = x * 10 0.0_rk y = y * 10 0.0_rk z = z * 10 0.0_rk end subroutine rgb_to_xyz !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine xyz_to_rgb ( x , y , z , r , g , b ) real ( rk ), intent ( in ) :: x , y , z integer ( ik ), intent ( out ) :: r , g , b real ( rk ) :: rn , gn , bn real ( rk ) :: x1 , y1 , z1 x1 = x / 10 0.0_rk y1 = y / 10 0.0_rk z1 = z / 10 0.0_rk ! Convert XYZ to linear RGB rn = 3.2404542_rk * x1 - 1.5371385_rk * y1 - 0.4985314_rk * z1 gn = - 0.9692660_rk * x1 + 1.8760108_rk * y1 + 0.0415560_rk * z1 bn = 0.0556434_rk * x1 - 0.2040259_rk * y1 + 1.0572252_rk * z1 ! Apply gamma correction if ( rn <= 0.0031308_rk ) then rn = 1 2.92_rk * rn else rn = 1.055_rk * ( rn ** ( 1.0_rk / 2.4_rk )) - 0.055_rk end if if ( gn <= 0.0031308_rk ) then gn = 1 2.92_rk * gn else gn = 1.055_rk * ( gn ** ( 1.0_rk / 2.4_rk )) - 0.055_rk end if if ( bn <= 0.0031308_rk ) then bn = 1 2.92_rk * bn else bn = 1.055_rk * ( bn ** ( 1.0_rk / 2.4_rk )) - 0.055_rk end if ! Scale and convert to integer RGB values r = nint ( rn * 25 5.0_rk , kind = ik ) g = nint ( gn * 25 5.0_rk , kind = ik ) b = nint ( bn * 25 5.0_rk , kind = ik ) end subroutine xyz_to_rgb !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine copy_color ( this , from ) class ( color ), intent ( inout ) :: this class ( color ), intent ( in ) :: from this % r = from % r this % g = from % g this % b = from % b this % c = from % c this % m = from % m this % y = from % y this % k = from % k this % decimal = from % decimal this % hex = from % hex this % h = from % h this % s = from % s this % v = from % v this % hl = from % hl this % sl = from % sl this % vl = from % vl this % color_name = from % color_name end subroutine copy_color !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine find_nearest ( this , nearest_color ) class ( color ), intent ( inout ) :: this type ( color ), intent ( out ) :: nearest_color integer ( ik ) :: i , closestColorIndex , ri , gi , bi real ( rk ) :: dist , min_dist type ( color ), dimension (:), allocatable :: colors call initialize_colors ( colors ) min_dist = huge ( min_dist ) closestColorIndex = 0 do concurrent ( i = 1 : size ( colors )) call colors ( i )% get_rgb ( ri , gi , bi ) dist = sqrt (& ( real (( ri - this % r ), kind = rk ) / 25 5.0_rk ) ** 2 & + ( real (( gi - this % g ), kind = rk ) / 25 5.0_rk ) ** 2 & + ( real (( bi - this % b ), kind = rk ) / 25 5.0_rk ) ** 2 & ) if ( dist < min_dist ) then min_dist = dist closestColorIndex = i end if end do if ( closestColorIndex == 0 ) then error stop 'error: no color found' else nearest_color = colors ( closestColorIndex ) end if end subroutine find_nearest !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine print_available_colors ( this ) class ( color ), intent ( inout ) :: this type ( color ), dimension (:), allocatable :: colors call initialize_colors ( colors ) call colors (:)% print () end subroutine print_available_colors !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine save ( this , file_name , height , width ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ), optional :: file_name integer , intent ( in ), optional :: height , width type ( format_pnm ) :: image integer :: height_ , width_ integer ( ik ), dimension (:,:), allocatable :: px if ( present ( height )) then height_ = height else height_ = 50 end if if ( present ( width )) then width_ = width else width_ = 50 end if allocate ( px ( height_ , 3 * width_ )) px (:, 1 : 3 * width_ - 2 : 3 ) = this % r px (:, 2 : 3 * width_ - 1 : 3 ) = this % g px (:, 3 : 3 * width_ - 0 : 3 ) = this % b call image % set_pnm (& encoding = 'binary' , & file_format = 'ppm' , & width = width_ , & height = height_ , & max_color = 255 , & comment = trim ( this % color_name ), & pixels = px & ) if ( present ( file_name )) then call image % export_pnm ( trim ( file_name )) else call image % export_pnm ( 'pnm_files/colors/' // trim ( this % color_name )) end if end subroutine save !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine save_available_colors ( this , file_name , height , width ) class ( color ), intent ( inout ) :: this character ( len =* ), intent ( in ), optional :: file_name integer , intent ( in ), optional :: height , width type ( color ), dimension (:), allocatable :: colors call initialize_colors ( colors ) call colors (:)% save ( file_name , height , width ) end subroutine save_available_colors !=============================================================================== end module forcolor","tags":"","loc":"sourcefile/forcolor.f90.html"},{"title":"test24.f90 – ForImage","text":"This file depends on sourcefile~~test24.f90~~EfferentGraph sourcefile~test24.f90 test24.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test24.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test24 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image1 , image2 , image3 integer ( ik ), dimension ( 10 , 6 ) :: px1 integer ( ik ), dimension ( 60 , 60 ) :: px2 integer ( ik ), dimension ( 4 , 12 ) :: px3 print * , ' ' print '(a)' , 'Test 24' px1 ( 1 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 4 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 5 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 6 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 7 ,:) = [ 1 , 0 , 0 , 0 , 1 , 0 ] px1 ( 8 ,:) = [ 0 , 1 , 1 , 1 , 0 , 0 ] px1 ( 9 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] px1 ( 10 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] call image1 % set_pnm ( encoding = 'binary' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px1 ) call image1 % crop ( 2 , 10 , 3 , 6 ) call image1 % export_pnm ( 'pnm_files/img1_binary_crop' ) call image1 % export_pnm ( 'pnm_files/img1_ascii_crop' , 'ascii' ) call image1 % print_info () call image1 % finalize () px2 = transpose ( reshapeshape = shape ( px2 ))) call image2 % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px2 ) call image2 % crop ( 2 , 50 , 3 , 55 ) call image2 % export_pnm ( 'pnm_files/img2_binary_crop' ) call image2 % export_pnm ( 'pnm_files/img2_ascii_crop' , 'ascii' ) call image2 % print_info () call image2 % finalize () px3 ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px3 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px3 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px3 ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image3 % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px3 ) call image3 % crop ( 1 , 3 , 2 , 4 ) call image3 % export_pnm ( 'pnm_files/img3_binary_crop' ) call image3 % export_pnm ( 'pnm_files/img3_ascii_crop' , 'ascii' ) call image3 % print_info () call image3 % finalize () end program test24","tags":"","loc":"sourcefile/test24.f90.html"},{"title":"forimage_parameters.f90 – ForImage","text":"Files dependent on this one sourcefile~~forimage_parameters.f90~~AfferentGraph sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 sourcefile~demo_color.f90 demo_color.f90 sourcefile~demo_color.f90->sourcefile~forimage.f90 sourcefile~demo_ppm.f90 demo_ppm.f90 sourcefile~demo_ppm.f90->sourcefile~forimage.f90 sourcefile~test1.f90 test1.f90 sourcefile~test1.f90->sourcefile~forimage.f90 sourcefile~test10.f90 test10.f90 sourcefile~test10.f90->sourcefile~forimage.f90 sourcefile~test11.f90 test11.f90 sourcefile~test11.f90->sourcefile~forimage.f90 sourcefile~test12.f90 test12.f90 sourcefile~test12.f90->sourcefile~forimage.f90 sourcefile~test13.f90 test13.f90 sourcefile~test13.f90->sourcefile~forimage.f90 sourcefile~test14.f90 test14.f90 sourcefile~test14.f90->sourcefile~forimage.f90 sourcefile~test15.f90 test15.f90 sourcefile~test15.f90->sourcefile~forimage.f90 sourcefile~test16.f90 test16.f90 sourcefile~test16.f90->sourcefile~forimage.f90 sourcefile~test17.f90 test17.f90 sourcefile~test17.f90->sourcefile~forimage.f90 sourcefile~test18.f90 test18.f90 sourcefile~test18.f90->sourcefile~forimage.f90 sourcefile~test19.f90 test19.f90 sourcefile~test19.f90->sourcefile~forimage.f90 sourcefile~test2.f90 test2.f90 sourcefile~test2.f90->sourcefile~forimage.f90 sourcefile~test20.f90 test20.f90 sourcefile~test20.f90->sourcefile~forimage.f90 sourcefile~test21.f90 test21.f90 sourcefile~test21.f90->sourcefile~forimage.f90 sourcefile~test22.f90 test22.f90 sourcefile~test22.f90->sourcefile~forimage.f90 sourcefile~test23.f90 test23.f90 sourcefile~test23.f90->sourcefile~forimage.f90 sourcefile~test24.f90 test24.f90 sourcefile~test24.f90->sourcefile~forimage.f90 sourcefile~test25.f90 test25.f90 sourcefile~test25.f90->sourcefile~forimage.f90 sourcefile~test26.f90 test26.f90 sourcefile~test26.f90->sourcefile~forimage.f90 sourcefile~test27.f90 test27.f90 sourcefile~test27.f90->sourcefile~forimage.f90 sourcefile~test28.f90 test28.f90 sourcefile~test28.f90->sourcefile~forimage.f90 sourcefile~test29.f90 test29.f90 sourcefile~test29.f90->sourcefile~forimage.f90 sourcefile~test3.f90 test3.f90 sourcefile~test3.f90->sourcefile~forimage.f90 sourcefile~test4.f90 test4.f90 sourcefile~test4.f90->sourcefile~forimage.f90 sourcefile~test5.f90 test5.f90 sourcefile~test5.f90->sourcefile~forimage.f90 sourcefile~test6.f90 test6.f90 sourcefile~test6.f90->sourcefile~forimage.f90 sourcefile~test7.f90 test7.f90 sourcefile~test7.f90->sourcefile~forimage.f90 sourcefile~test8.f90 test8.f90 sourcefile~test8.f90->sourcefile~forimage.f90 sourcefile~test9.f90 test9.f90 sourcefile~test9.f90->sourcefile~forimage.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module forimage_parameters use iso_fortran_env , only : rk => real64 , ik => int32 implicit none private public :: rk , ik , pi real ( rk ), parameter :: pi = 4.0_rk * atan ( 1.0_rk ) end module forimage_parameters","tags":"","loc":"sourcefile/forimage_parameters.f90.html"},{"title":"test3.f90 – ForImage","text":"This file depends on sourcefile~~test3.f90~~EfferentGraph sourcefile~test3.f90 test3.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test3.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Description: Creates and exports a 4x4 PPM image in ascii format. program test3 use forimage , only : format_pnm , ik implicit none ! Declare an object of type format_pnm type ( format_pnm ) :: image ! Define a 2D array representing pixel values for the image integer ( ik ), dimension ( 4 , 12 ) :: px print * , ' ' print '(a)' , 'Test 3' px ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ! Set the properties of the format_pnm object (encoding, file format, width, height, comment and pixels) call image % set_pnm ( encoding = 'ascii' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px ) ! Export the PNM image to a file named 'img3_ascii' in the specified format call image % export_pnm ( 'pnm_files/img3_ascii' ) ! Print the image information to the screen call image % print_info () ! Finalize the format_pnm object to release resources call image % finalize () end program test3","tags":"","loc":"sourcefile/test3.f90.html"},{"title":"test29.f90 – ForImage","text":"This file depends on sourcefile~~test29.f90~~EfferentGraph sourcefile~test29.f90 test29.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test29.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program example29 use forimage , only : color implicit none type ( color ) :: c call c % print_available_colors () call c % save_available_colors () end program example29","tags":"","loc":"sourcefile/test29.f90.html"},{"title":"forimage.f90 – ForImage","text":"This file depends on sourcefile~~forimage.f90~~EfferentGraph sourcefile~forimage.f90 forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~forimage.f90~~AfferentGraph sourcefile~forimage.f90 forimage.f90 sourcefile~demo_color.f90 demo_color.f90 sourcefile~demo_color.f90->sourcefile~forimage.f90 sourcefile~demo_ppm.f90 demo_ppm.f90 sourcefile~demo_ppm.f90->sourcefile~forimage.f90 sourcefile~test1.f90 test1.f90 sourcefile~test1.f90->sourcefile~forimage.f90 sourcefile~test10.f90 test10.f90 sourcefile~test10.f90->sourcefile~forimage.f90 sourcefile~test11.f90 test11.f90 sourcefile~test11.f90->sourcefile~forimage.f90 sourcefile~test12.f90 test12.f90 sourcefile~test12.f90->sourcefile~forimage.f90 sourcefile~test13.f90 test13.f90 sourcefile~test13.f90->sourcefile~forimage.f90 sourcefile~test14.f90 test14.f90 sourcefile~test14.f90->sourcefile~forimage.f90 sourcefile~test15.f90 test15.f90 sourcefile~test15.f90->sourcefile~forimage.f90 sourcefile~test16.f90 test16.f90 sourcefile~test16.f90->sourcefile~forimage.f90 sourcefile~test17.f90 test17.f90 sourcefile~test17.f90->sourcefile~forimage.f90 sourcefile~test18.f90 test18.f90 sourcefile~test18.f90->sourcefile~forimage.f90 sourcefile~test19.f90 test19.f90 sourcefile~test19.f90->sourcefile~forimage.f90 sourcefile~test2.f90 test2.f90 sourcefile~test2.f90->sourcefile~forimage.f90 sourcefile~test20.f90 test20.f90 sourcefile~test20.f90->sourcefile~forimage.f90 sourcefile~test21.f90 test21.f90 sourcefile~test21.f90->sourcefile~forimage.f90 sourcefile~test22.f90 test22.f90 sourcefile~test22.f90->sourcefile~forimage.f90 sourcefile~test23.f90 test23.f90 sourcefile~test23.f90->sourcefile~forimage.f90 sourcefile~test24.f90 test24.f90 sourcefile~test24.f90->sourcefile~forimage.f90 sourcefile~test25.f90 test25.f90 sourcefile~test25.f90->sourcefile~forimage.f90 sourcefile~test26.f90 test26.f90 sourcefile~test26.f90->sourcefile~forimage.f90 sourcefile~test27.f90 test27.f90 sourcefile~test27.f90->sourcefile~forimage.f90 sourcefile~test28.f90 test28.f90 sourcefile~test28.f90->sourcefile~forimage.f90 sourcefile~test29.f90 test29.f90 sourcefile~test29.f90->sourcefile~forimage.f90 sourcefile~test3.f90 test3.f90 sourcefile~test3.f90->sourcefile~forimage.f90 sourcefile~test4.f90 test4.f90 sourcefile~test4.f90->sourcefile~forimage.f90 sourcefile~test5.f90 test5.f90 sourcefile~test5.f90->sourcefile~forimage.f90 sourcefile~test6.f90 test6.f90 sourcefile~test6.f90->sourcefile~forimage.f90 sourcefile~test7.f90 test7.f90 sourcefile~test7.f90->sourcefile~forimage.f90 sourcefile~test8.f90 test8.f90 sourcefile~test8.f90->sourcefile~forimage.f90 sourcefile~test9.f90 test9.f90 sourcefile~test9.f90->sourcefile~forimage.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module forimage use forimage_parameters use forcolor use pnm use lut private public format_pnm , format_lut , rk , ik , pi , color end module forimage","tags":"","loc":"sourcefile/forimage.f90.html"},{"title":"test4.f90 – ForImage","text":"This file depends on sourcefile~~test4.f90~~EfferentGraph sourcefile~test4.f90 test4.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test4.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Description: Creates and exports a 6x10 PBM image in binary format. program test4 use forimage , only : format_pnm , ik implicit none ! Declare an object of type format_pnm type ( format_pnm ) :: image ! Define a 2D array representing pixel values (0 and 1) for the image integer ( ik ), dimension ( 10 , 6 ) :: px print * , ' ' print '(a)' , 'Test 4' px ( 1 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 2 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 3 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 4 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 5 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 6 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 7 ,:) = [ 1 , 0 , 0 , 0 , 1 , 0 ] px ( 8 ,:) = [ 0 , 1 , 1 , 1 , 0 , 0 ] px ( 9 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] px ( 10 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] ! Set the properties of the format_pnm object (encoding, file format, width, height, comment and pixels) call image % set_pnm ( encoding = 'binary' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px ) ! Export the PNM image to a file named 'img1_binary' in the specified format call image % export_pnm ( 'pnm_files/img1_binary' ) ! Print the image information to the screen call image % print_info () ! Finalize the format_pnm object to release resources call image % finalize () end program test4","tags":"","loc":"sourcefile/test4.f90.html"},{"title":"test13.f90 – ForImage","text":"This file depends on sourcefile~~test13.f90~~EfferentGraph sourcefile~test13.f90 test13.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test13.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test13 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 13' call image % import_pnm ( 'pnm_files/img3_binary' , 'ppm' , 'binary' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img3_binary_to_ascii_ex' , 'ascii' ) call image % finalize () end program test13","tags":"","loc":"sourcefile/test13.f90.html"},{"title":"test11.f90 – ForImage","text":"This file depends on sourcefile~~test11.f90~~EfferentGraph sourcefile~test11.f90 test11.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test11.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test11 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 11' call image % import_pnm ( 'pnm_files/img2_binary' , 'pgm' , 'binary' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img2_binary_ex' ) call image % finalize () end program test11","tags":"","loc":"sourcefile/test11.f90.html"},{"title":"pnm.f90 – ForImage","text":"This file depends on sourcefile~~pnm.f90~~EfferentGraph sourcefile~pnm.f90 pnm.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~pnm.f90~~AfferentGraph sourcefile~pnm.f90 pnm.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~demo_color.f90 demo_color.f90 sourcefile~demo_color.f90->sourcefile~forimage.f90 sourcefile~demo_ppm.f90 demo_ppm.f90 sourcefile~demo_ppm.f90->sourcefile~forimage.f90 sourcefile~test1.f90 test1.f90 sourcefile~test1.f90->sourcefile~forimage.f90 sourcefile~test10.f90 test10.f90 sourcefile~test10.f90->sourcefile~forimage.f90 sourcefile~test11.f90 test11.f90 sourcefile~test11.f90->sourcefile~forimage.f90 sourcefile~test12.f90 test12.f90 sourcefile~test12.f90->sourcefile~forimage.f90 sourcefile~test13.f90 test13.f90 sourcefile~test13.f90->sourcefile~forimage.f90 sourcefile~test14.f90 test14.f90 sourcefile~test14.f90->sourcefile~forimage.f90 sourcefile~test15.f90 test15.f90 sourcefile~test15.f90->sourcefile~forimage.f90 sourcefile~test16.f90 test16.f90 sourcefile~test16.f90->sourcefile~forimage.f90 sourcefile~test17.f90 test17.f90 sourcefile~test17.f90->sourcefile~forimage.f90 sourcefile~test18.f90 test18.f90 sourcefile~test18.f90->sourcefile~forimage.f90 sourcefile~test19.f90 test19.f90 sourcefile~test19.f90->sourcefile~forimage.f90 sourcefile~test2.f90 test2.f90 sourcefile~test2.f90->sourcefile~forimage.f90 sourcefile~test20.f90 test20.f90 sourcefile~test20.f90->sourcefile~forimage.f90 sourcefile~test21.f90 test21.f90 sourcefile~test21.f90->sourcefile~forimage.f90 sourcefile~test22.f90 test22.f90 sourcefile~test22.f90->sourcefile~forimage.f90 sourcefile~test23.f90 test23.f90 sourcefile~test23.f90->sourcefile~forimage.f90 sourcefile~test24.f90 test24.f90 sourcefile~test24.f90->sourcefile~forimage.f90 sourcefile~test25.f90 test25.f90 sourcefile~test25.f90->sourcefile~forimage.f90 sourcefile~test26.f90 test26.f90 sourcefile~test26.f90->sourcefile~forimage.f90 sourcefile~test27.f90 test27.f90 sourcefile~test27.f90->sourcefile~forimage.f90 sourcefile~test28.f90 test28.f90 sourcefile~test28.f90->sourcefile~forimage.f90 sourcefile~test29.f90 test29.f90 sourcefile~test29.f90->sourcefile~forimage.f90 sourcefile~test3.f90 test3.f90 sourcefile~test3.f90->sourcefile~forimage.f90 sourcefile~test4.f90 test4.f90 sourcefile~test4.f90->sourcefile~forimage.f90 sourcefile~test5.f90 test5.f90 sourcefile~test5.f90->sourcefile~forimage.f90 sourcefile~test6.f90 test6.f90 sourcefile~test6.f90->sourcefile~forimage.f90 sourcefile~test7.f90 test7.f90 sourcefile~test7.f90->sourcefile~forimage.f90 sourcefile~test8.f90 test8.f90 sourcefile~test8.f90->sourcefile~forimage.f90 sourcefile~test9.f90 test9.f90 sourcefile~test9.f90->sourcefile~forimage.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> This module defines the `format_pnm` type for handling PNM (Portable Any Map) image files. !> PNM files include both ASCII and binary representations for various image types, such as PBM, PGM, and PPM. !> The module offers functionalities to manipulate, import, and export PNM images, along with image processing. module pnm use forimage_parameters , only : rk , ik implicit none private public format_pnm !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> This type is designed to store and manipulate PNM (Portable Any Map) image files. type format_pnm character ( 2 ) , private :: magic_number !! Magic number representing the PNM image type (`P1`, `P2`, `P3`, `P4`, `P5`, `P6`). integer , private :: width !! Width (number of columns) of the image. integer , private :: height !! Height (number of rows) of the image. character (:), allocatable , private :: comment !! Optional comment associated with the image. integer , private :: max_color !! Maximum color value of the image. Used for PGM and PPM images. integer ( ik ), dimension (:,:), allocatable :: pixels !! Pixel values of the image. character ( 3 ) , private :: file_format !! File format of the PNM image (`pbm`, `pgm`, `ppm`). character ( 6 ) , private :: encoding !! Encoding of the PNM image (`ascii` or `plain`, `binary` or `raw`). contains ! Procedures for setting individual attributes procedure :: set_format !!> Set the encoding of the PNM image. procedure , private :: set_file_format !!> Set the file format of the PNM image. procedure , private :: set_magicnumber !!> Set the magic number of the PNM image. procedure , private :: set_width !!> Set the width of the PNM image. procedure , private :: set_height !!> Set the height of the PNM image. procedure , private :: set_comment !!> Set a comment for the PNM image. procedure , private :: set_max_color !!> Set the maximum color value of the PNM image. procedure , private :: set_header !!> Set the header of the PNM image. procedure , private :: allocate_pixels !!> Allocate memory for the pixels of the PNM image. procedure , private :: check_pixel_range !!> Check if the pixel values are within the valid range. procedure , private :: set_pixels !!> Set the pixel values of the PNM image. ! Procedures for setting individual attributes procedure :: get_format !!> Get the encoding of the PNM image. ! High-level procedures for working with PNM images procedure :: set_pnm !!> Set the attributes of the PNM image. procedure :: print_info !!> Display information about the image (dimensions, aspect ratio, etc.). procedure :: import_pnm !!> Read an image from a file. procedure :: export_pnm !!> Write an image to a file. procedure :: finalize => deallocate_pnm !!> Clean up allocated memory for the PNM image. ! Image manipulation procedures procedure :: negative !!> Invert the colors of the image. procedure :: brighten !!> Adjust the brightness and darkness of the image. procedure :: swap_channels !!> Swap the RGB channels of the image. procedure :: remove_channels !!> Remove one or more RGB channels from the image. procedure :: greyscale !!> Convert a color image to greyscale. procedure :: rotate !!> Rotate the image by a specified angle. procedure :: flip_horizontal !!> Flip the image horizontally. procedure :: flip_vertical !!> Flip the image vertically. procedure :: crop !!> Crop the image to a specified region. procedure :: resize !!> Resize the image to a specified size. end type format_pnm !=============================================================================== contains !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Displays information about the image e.g. dimensions, aspect ratio, etc. elemental impure subroutine print_info ( this ) class ( format_pnm ), intent ( in ) :: this real ( rk ) :: avg , avg_red , avg_green , avg_blue real ( rk ) :: asp_ratio real ( rk ) :: pixel_size_kb , pixel_size_mb select case ( this % file_format ) case ( 'pbm' , 'pgm' ) call average_colors ( this , avg ) case ( 'ppm' ) call average_colors ( this , avg , avg_red , avg_green , avg_blue ) end select call aspect_ratio ( this , asp_ratio ) call pixel_size ( this , pixel_size_kb , pixel_size_mb ) print '(a)' , 'Image Information:' print '(a)' , '-------------------------------------------' print '(a, g0)' , 'Magic Number: ' , this % magic_number print '(a, a)' , 'File Format : ' , this % file_format print '(a, a)' , 'Encoding    : ' , this % encoding print '(a, a)' , 'Comment     : ' , trim ( this % comment ) print '(a, a, g0, a, g0)' , 'Dimensions  : ' , 'Height: ' , this % height , ' Width: ' , this % width print '(a, g0)' , 'Total Pixels: ' , this % width * this % height print '(a, f6.2)' , 'Aspect Ratio: ' , asp_ratio print '(a, f8.2, a, f8.2, a)' , 'Pixel Size  : ' , pixel_size_kb , ' KB ' , pixel_size_mb , ' MB' select case ( this % file_format ) case ( 'pbm' , 'pgm' ) print '(a, g0)' , 'Average     : ' , avg case ( 'ppm' ) print '(a, g0)' , 'Max Color   : ' , this % max_color print '(a, a, f6.2, a, f6.2, a, f6.2)' , 'Average RGB : ' , 'R:' , avg_red , ' G:' , avg_green , ' B:' , avg_blue end select print '(a)' , '-------------------------------------------' end subroutine print_info !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Calculates imgae size in KB and MB. Required for `print_info` method. elemental pure subroutine pixel_size ( this , pixel_size_kb , pixel_size_mb ) class ( format_pnm ), intent ( in ) :: this real ( rk ), intent ( out ) :: pixel_size_kb , pixel_size_mb integer :: bits_per_channel , bytes_per_pixel bits_per_channel = 8 select case ( this % file_format ) case ( 'pbm' , 'pgm' ) bytes_per_pixel = bits_per_channel case ( 'ppm' ) bytes_per_pixel = bits_per_channel * 3 end select pixel_size_kb = real ( this % width * this % height * bytes_per_pixel , kind = rk ) / 102 4.0_rk pixel_size_mb = pixel_size_kb / 102 4.0_rk end subroutine pixel_size !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Calculates the average color values of the image. Required for `print_info` method. elemental pure subroutine average_colors ( this , avg , avg_red , avg_green , avg_blue ) class ( format_pnm ), intent ( in ) :: this real ( rk ), intent ( out ), optional :: avg_red , avg_green , avg_blue , avg select case ( this % file_format ) case ( 'pbm' , 'pgm' ) avg = sum ( this % pixels ) / real ( this % width * this % height , kind = rk ) case ( 'ppm' ) avg_red = sum ( this % pixels (:, 1 : this % width : 3 )) / real ( this % width * this % height , kind = rk ) avg_green = sum ( this % pixels (:, 2 : this % width : 3 )) / real ( this % width * this % height , kind = rk ) avg_blue = sum ( this % pixels (:, 3 : this % width : 3 )) / real ( this % width * this % height , kind = rk ) end select end subroutine average_colors !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Calculates the aspect ratio of the image. Required for `print_info` method. elemental pure subroutine aspect_ratio ( this , ratio ) class ( format_pnm ), intent ( in ) :: this real ( rk ), intent ( out ) :: ratio ratio = real ( this % width , kind = rk ) / real ( this % height , kind = rk ) end subroutine aspect_ratio !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Resizes the image to specified dimensions. elemental pure subroutine resize ( this , new_height , new_width ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: new_width , new_height integer ( ik ), dimension (:,:), allocatable :: resized_pixels integer :: i_out , j_out , i_in , j_in , channel real ( rk ) :: width_scale , height_scale select case ( this % file_format ) case ( 'pbm' , 'pgm' ) allocate ( resized_pixels ( new_height , new_width )) width_scale = real ( this % width , kind = rk ) / real ( new_width , kind = rk ) height_scale = real ( this % height , kind = rk ) / real ( new_height , kind = rk ) do i_out = 1 , new_height do j_out = 1 , new_width i_in = min ( this % height , max ( 1 , int (( real ( i_out , kind = rk ) - 0.5_rk ) * height_scale ) + 1 )) j_in = min ( this % width , max ( 1 , int (( real ( j_out , kind = rk ) - 0.5_rk ) * width_scale ) + 1 )) resized_pixels ( i_out , j_out ) = this % pixels ( i_in , j_in ) end do end do case ( 'ppm' ) allocate ( resized_pixels ( new_height , 3 * new_width )) width_scale = real ( this % width , kind = rk ) / real ( new_width , kind = rk ) height_scale = real ( this % height , kind = rk ) / real ( new_height , kind = rk ) do i_out = 1 , new_height do j_out = 1 , new_width i_in = min ( this % height , max ( 1 , int (( real ( i_out , kind = rk ) - 0.5_rk ) * height_scale ) + 1 )) j_in = min ( 3 * this % width , max ( 1 , int (( real ( j_out , kind = rk ) - 0.5_rk ) * width_scale ) + 1 )) do channel = 1 , 3 resized_pixels ( i_out , 3 * ( j_out - 1 ) + channel ) = this % pixels ( i_in , 3 * ( j_in - 1 ) + channel ) end do end do end do end select call this % set_height ( new_height ) call this % set_width ( new_width ) deallocate ( this % pixels ) call this % allocate_pixels () call this % set_pixels ( resized_pixels ) deallocate ( resized_pixels ) end subroutine resize !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Crops the image to a specified region. elemental pure subroutine crop ( this , start_row , end_row , start_col , end_col ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: start_row , end_row , start_col , end_col integer :: cropped_start_row , cropped_end_row , cropped_start_col , cropped_end_col integer ( ik ), dimension (:,:), allocatable :: cropped_pixels integer :: i , j , cropped_height , cropped_width ! Check if the cropping coordinates are within the image boundaries cropped_start_row = max ( 1 , start_row ) cropped_end_row = min ( this % height , end_row ) cropped_start_col = max ( 1 , start_col ) cropped_end_col = min ( this % width , end_col ) ! Calculate the dimensions of the cropped image cropped_height = cropped_end_row - cropped_start_row + 1 cropped_width = cropped_end_col - cropped_start_col + 1 select case ( this % file_format ) case ( 'pbm' , 'pgm' ) ! Allocate memory for cropped image pixels allocate ( cropped_pixels ( cropped_height , cropped_width )) ! Copy the cropped pixels to the new array do i = 1 , cropped_height do j = 1 , cropped_width cropped_pixels ( i , j ) = this % pixels ( cropped_start_row - 1 + i , ( cropped_start_col - 1 ) + j ) end do end do case ( 'ppm' ) ! Allocate memory for cropped image pixels allocate ( cropped_pixels ( cropped_height , 3 * cropped_width )) ! Copy the cropped pixels to the new array do i = 1 , cropped_height do j = 1 , 3 * cropped_width cropped_pixels ( i , j ) = this % pixels ( cropped_start_row - 1 + i , ( cropped_start_col - 1 ) * 3 + j ) end do end do end select ! Update image dimensions and pixels call this % set_height ( cropped_height ) call this % set_width ( cropped_width ) deallocate ( this % pixels ) call this % allocate_pixels () call this % set_pixels ( cropped_pixels ) ! Deallocate temporary array deallocate ( cropped_pixels ) end subroutine crop !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Flips the image vertically. elemental pure subroutine flip_vertical ( this ) class ( format_pnm ), intent ( inout ) :: this this % pixels (:,:) = this % pixels ( size ( this % pixels , 1 ): 1 : - 1 , :) call this % check_pixel_range ( this % pixels ) call this % set_height ( size ( this % pixels , 1 )) select case ( this % file_format ) case ( 'pbm' , 'pgm' ) call this % set_width ( size ( this % pixels , 2 )) case ( 'ppm' ) call this % set_width ( size ( this % pixels , 2 ) / 3 ) end select end subroutine flip_vertical !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Flips the image horizontally. elemental pure subroutine flip_horizontal ( this ) class ( format_pnm ), intent ( inout ) :: this select case ( this % file_format ) case ( 'pbm' , 'pgm' ) this % pixels (:,:) = this % pixels (:, this % width : 1 : - 1 ) call this % check_pixel_range ( this % pixels ) case ( 'ppm' ) this % pixels (:, 1 : size ( this % pixels , 2 ): 3 ) = this % pixels (:, size ( this % pixels , 2 ) - 2 : 1 : - 3 ) this % pixels (:, 2 : size ( this % pixels , 2 ): 3 ) = this % pixels (:, size ( this % pixels , 2 ) - 1 : 2 : - 3 ) this % pixels (:, 3 : size ( this % pixels , 2 ): 3 ) = this % pixels (:, size ( this % pixels , 2 ) : 3 : - 3 ) call this % check_pixel_range ( this % pixels ) end select call this % set_height ( size ( this % pixels , 1 )) select case ( this % file_format ) case ( 'pbm' , 'pgm' ) call this % set_width ( size ( this % pixels , 2 )) case ( 'ppm' ) call this % set_width ( size ( this % pixels , 2 ) / 3 ) end select end subroutine flip_horizontal !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Rotates the image by a specified angle. Supported angles are 90, 180, 270, -90, -180, -270. elemental pure subroutine rotate ( this , angle ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: angle integer ( ik ), dimension (:,:), allocatable :: rotated_pixels integer :: target_height , target_width integer :: i , j ! Determine the target height and width based on the rotation angle select case ( angle ) case ( 90 , - 90 , 270 , - 270 ) target_height = this % width target_width = this % height case ( 180 , - 180 ) target_height = this % height target_width = this % width case default error stop \"Invalid rotation angle. Valid angles are 90, 180, 270, -90, -180, -270.\" end select select case ( this % file_format ) case ( 'pbm' , 'pgm' ) ! Allocate memory for rotated_pixels array allocate ( rotated_pixels ( target_height , target_width )) ! Rotate pixels based on the specified angle select case ( angle ) case ( 90 , - 270 ) do i = 1 , this % height do j = 1 , this % width rotated_pixels ( j , this % height - i + 1 ) = this % pixels ( i , j ) end do end do case ( 180 , - 180 ) do i = 1 , this % height do j = 1 , this % width rotated_pixels ( this % height - i + 1 , this % width - j + 1 ) = this % pixels ( i , j ) end do end do case ( 270 , - 90 ) do i = 1 , this % height do j = 1 , this % width rotated_pixels ( this % width - j + 1 , i ) = this % pixels ( i , j ) end do end do end select case ( 'ppm' ) ! Allocate memory for rotated_pixels array allocate ( rotated_pixels ( target_height , 3 * target_width )) ! Rotate pixels based on the specified angle select case ( angle ) case ( 90 , - 270 ) do i = 1 , this % height do j = 1 , this % width rotated_pixels ( j , 3 * ( this % height - i + 1 ) - 2 : 3 * ( this % height - i + 1 )) = this % pixels ( i , 3 * j - 2 : 3 * j ) end do end do case ( 180 , - 180 ) do i = 1 , this % height do j = 1 , this % width rotated_pixels ( this % height - i + 1 , 3 * ( this % width - j + 1 ) - 2 : 3 * ( this % width - j + 1 )) = this % pixels ( i , 3 * j - 2 : 3 * j ) end do end do case ( 270 , - 90 ) do i = 1 , this % height do j = 1 , this % width rotated_pixels ( this % width - j + 1 , 3 * i - 2 : 3 * i ) = this % pixels ( i , 3 * j - 2 : 3 * j ) end do end do end select end select ! Update height and width of the image call this % set_height ( target_height ) call this % set_width ( target_width ) deallocate ( this % pixels ) call this % allocate_pixels () ! Update the original pixels with rotated pixels call this % set_pixels ( rotated_pixels ) ! Deallocate rotated_pixels array deallocate ( rotated_pixels ) end subroutine rotate !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Converts a color image to greyscale. Only supported for PPM images. elemental pure subroutine greyscale ( this ) class ( format_pnm ), intent ( inout ) :: this integer :: i , j ! Check if the file is ppm if ( this % file_format /= 'ppm' ) error stop 'greyscale: This function is only for ppm files.' do i = 1 , this % height do j = 1 , this % width ! Calculate the ITU Rec.709 weighted average of RGB channels to derive a greyscale value and assign it as an integer to all RGB channels. this % pixels ( i , 3 * j - 2 : 3 * j ) = int ( 0.2126_rk * real ( this % pixels ( i , 3 * j - 2 ), kind = rk ) + & 0.7152_rk * real ( this % pixels ( i , 3 * j - 1 ), kind = rk ) + & 0.0722_rk * real ( this % pixels ( i , 3 * j - 0 ), kind = rk ), kind = ik ) end do end do call this % check_pixel_range ( this % pixels ) end subroutine greyscale !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Removes one or more RGB channels from the image. Only supported for PPM images. elemental pure subroutine remove_channels ( this , remove_r , remove_g , remove_b ) class ( format_pnm ), intent ( inout ) :: this logical , optional , intent ( in ) :: remove_r , remove_g , remove_b ! Check if the file is ppm if ( this % file_format /= 'ppm' ) error stop 'remove_channels: This function is only for ppm files.' ! Remove R channel if ( present ( remove_r )) then if ( remove_r ) then this % pixels (:, 1 : size ( this % pixels , 2 ): 3 ) = 0_ik end if end if ! Remove G channel if ( present ( remove_g )) then if ( remove_g ) then this % pixels (:, 2 : size ( this % pixels , 2 ): 3 ) = 0_ik end if end if ! Remove B channel if ( present ( remove_b )) then if ( remove_b ) then this % pixels (:, 3 : size ( this % pixels , 2 ): 3 ) = 0_ik end if end if call this % check_pixel_range ( this % pixels ) end subroutine remove_channels !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Swaps the RGB channels of the image. Only supported for PPM images. elemental pure subroutine swap_channels ( this , swap ) class ( format_pnm ), intent ( inout ) :: this character ( * ), intent ( in ) :: swap integer ( ik ) :: temp integer :: i , j ! Check if the file is ppm if ( this % file_format /= 'ppm' ) error stop 'swap_channels: This function is only for ppm files.' ! Swap R and G channels if ( swap == 'rg' . or . swap == 'gr' . or . swap == 'RG' . or . swap == 'GR' ) then do i = 1 , this % height do j = 1 , this % width temp = this % pixels ( i , 3 * j - 2 ) this % pixels ( i , 3 * j - 2 ) = this % pixels ( i , 3 * j - 1 ) this % pixels ( i , 3 * j - 1 ) = temp end do end do end if ! Swap G and B channels if ( swap == 'gb' . or . swap == 'bg' . or . swap == 'GB' . or . swap == 'BG' ) then do i = 1 , this % height do j = 1 , this % width temp = this % pixels ( i , 3 * j - 1 ) this % pixels ( i , 3 * j - 1 ) = this % pixels ( i , 3 * j - 0 ) this % pixels ( i , 3 * j - 0 ) = temp end do end do end if ! Swap R and B channels if ( swap == 'rb' . or . swap == 'br' . or . swap == 'RB' . or . swap == 'BR' ) then do i = 1 , this % height do j = 1 , this % width temp = this % pixels ( i , 3 * j - 2 ) this % pixels ( i , 3 * j - 2 ) = this % pixels ( i , 3 * j - 0 ) this % pixels ( i , 3 * j - 0 ) = temp end do end do end if call this % check_pixel_range ( this % pixels ) end subroutine swap_channels !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Brightens or darkens the image. Only supported for PGM and PPM images. elemental pure subroutine brighten ( this , factor ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: factor select case ( this % file_format ) case ( 'pbm' ) error stop 'brighten: This function is not supported for pbm files.' case ( 'pgm' , 'ppm' ) call this % set_pixels ( min ( this % max_color , max ( 0 , this % pixels + factor ))) end select end subroutine brighten !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Inverts the colors of the image. elemental pure subroutine negative ( this ) class ( format_pnm ), intent ( inout ) :: this call this % set_pixels ( this % max_color - this % pixels ) end subroutine negative !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Sets the file format of the PNM image. Supported values are `pbm`, `pgm`, and `ppm`. elemental pure subroutine set_file_format ( this , file_format ) class ( format_pnm ), intent ( inout ) :: this character ( 3 ), intent ( in ) :: file_format this % file_format = file_format end subroutine set_file_format !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Sets the encoding of the PNM image. Supported values are `ascii` or `plain` and `binary` or `raw`. elemental pure subroutine set_format ( this , encoding ) class ( format_pnm ), intent ( inout ) :: this character ( * ), intent ( in ) :: encoding this % encoding = trim ( encoding ) end subroutine set_format !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Gets the encoding of the PNM image. pure function get_format ( this ) result ( encoding ) class ( format_pnm ), intent ( in ) :: this character (:), allocatable :: encoding encoding = trim ( this % encoding ) end function get_format !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Deallocates memory for the pixels of the PNM image. elemental pure subroutine deallocate_pnm ( this ) class ( format_pnm ), intent ( inout ) :: this if ( allocated ( this % pixels )) deallocate ( this % pixels ) end subroutine deallocate_pnm !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Reads a PNM image from a file. impure subroutine import_pnm ( this , file_name , file_format , encoding ) class ( format_pnm ), intent ( inout ) :: this character ( * ), intent ( in ) :: file_name , encoding character ( 3 ), intent ( in ) :: file_format integer :: nunit , iostat character , dimension (:), allocatable :: buffer_ch integer ( ik ), dimension (:), allocatable :: buffer_int logical :: file_exists integer :: pos inquire ( file = file_name // '.' // file_format , exist = file_exists ) if ( file_exists ) then call this % set_file_format ( file_format ) call this % set_format ( encoding ) select case ( this % encoding ) case ( 'binary' , 'raw' ) select case ( file_format ) case ( 'pbm' ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , form = 'formatted' , access = 'stream' , action = 'read' , status = 'old' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call read_header ( this , nunit , pos ) close ( nunit ) allocate ( buffer_ch ( this % height * this % width )) buffer_ch = achar ( 0_ik ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , access = 'stream' , form = 'unformatted' , action = 'read' , status = 'old' , position = 'append' ) if ( iostat /= 0 ) error stop 'Error opening the file.' read ( nunit , iostat = iostat , pos = pos ) buffer_ch if ( iostat /= 0 ) error stop 'Error reading the file.' call this % allocate_pixels () this % pixels = iachar ( transpose ( reshape ( buffer_ch , [ this % width , this % height ])), kind = ik ) close ( nunit ) case ( 'pgm' ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , form = 'formatted' , access = 'stream' , action = 'read' , status = 'old' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call read_header ( this , nunit , pos ) close ( nunit ) allocate ( buffer_ch ( this % height * this % width )) buffer_ch = achar ( 0_ik ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , access = 'stream' , form = 'unformatted' , action = 'read' , status = 'old' , position = 'append' ) if ( iostat /= 0 ) error stop 'Error opening the file.' read ( nunit , iostat = iostat , pos = pos ) buffer_ch if ( iostat /= 0 ) error stop 'Error reading the file.' call this % allocate_pixels () this % pixels = iachar ( transpose ( reshape ( buffer_ch , [ this % width , this % height ])), kind = ik ) close ( nunit ) case ( 'ppm' ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , form = 'formatted' , access = 'stream' , action = 'read' , status = 'old' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call read_header ( this , nunit , pos ) close ( nunit ) allocate ( buffer_ch ( this % height * 3 * this % width )) buffer_ch = achar ( 0_ik ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , access = 'stream' , form = 'unformatted' , action = 'read' , status = 'old' , position = 'append' ) if ( iostat /= 0 ) error stop 'Error opening the file.' read ( nunit , iostat = iostat , pos = pos ) buffer_ch call this % allocate_pixels () this % pixels = iachar ( transpose ( reshape ( buffer_ch , [ this % width * 3 , this % height ])), kind = ik ) close ( nunit ) end select case ( 'ascii' , 'plain' ) select case ( file_format ) case ( 'pbm' ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , access = 'stream' , form = 'formatted' , action = 'read' , status = 'old' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call read_header ( this , nunit , pos ) allocate ( buffer_int ( this % height * this % width )) buffer_int = 0_ik read ( nunit , * ) buffer_int call this % allocate_pixels () this % pixels = transpose ( reshape ( buffer_int , [ this % width , this % height ])) close ( nunit ) call this % check_pixel_range ( this % pixels ) case ( 'pgm' ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , access = 'stream' , form = 'formatted' , action = 'read' , status = 'old' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call read_header ( this , nunit , pos ) allocate ( buffer_int ( this % height * this % width )) buffer_int = 0_ik read ( nunit , * ) buffer_int call this % allocate_pixels () this % pixels = transpose ( reshape ( buffer_int , [ this % width , this % height ])) call this % check_pixel_range ( this % pixels ) close ( nunit ) case ( 'ppm' ) open ( newunit = nunit , file = file_name // '.' // file_format ,& iostat = iostat , access = 'stream' , form = 'formatted' , action = 'read' , status = 'old' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call read_header ( this , nunit , pos ) allocate ( buffer_int ( this % height * 3 * this % width )) buffer_int = 0_ik read ( nunit , * ) buffer_int call this % allocate_pixels () this % pixels = transpose ( reshape ( buffer_int , [ this % width * 3 , this % height ])) call this % check_pixel_range ( this % pixels ) close ( nunit ) end select end select else error stop 'Error: File does not exist.' end if end subroutine import_pnm !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Sets the attributes of the PNM image. pure subroutine set_pnm ( this , encoding , file_format , width , height , max_color , comment , pixels ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: width integer , intent ( in ) :: height character ( * ), intent ( in ) :: comment integer , optional , intent ( in ) :: max_color integer ( ik ), dimension (:,:), intent ( in ) :: pixels character ( * ), intent ( in ) :: encoding character ( 3 ), intent ( in ) :: file_format character ( 2 ) :: magic_number call this % set_format ( encoding ) call this % set_file_format ( file_format ) select case ( this % encoding ) case ( 'ascii' , 'plain' ) select case ( this % file_format ) case ( 'pbm' ) magic_number = 'P1' case ( 'pgm' ) magic_number = 'P2' case ( 'ppm' ) magic_number = 'P3' end select case ( 'binary' , 'raw' ) select case ( this % file_format ) case ( 'pbm' ) magic_number = 'P4' case ( 'pgm' ) magic_number = 'P5' case ( 'ppm' ) magic_number = 'P6' end select end select call this % set_header ( magic_number , width , height , comment , max_color ) call this % allocate_pixels () call this % set_pixels ( pixels ) end subroutine set_pnm !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Allocates memory for the pixels of the PNM image. elemental pure subroutine allocate_pixels ( this ) class ( format_pnm ), intent ( inout ) :: this select case ( this % magic_number ) case ( 'P1' ) if (. not . allocated ( this % pixels )) allocate ( this % pixels ( this % height , this % width )) case ( 'P2' ) if (. not . allocated ( this % pixels )) allocate ( this % pixels ( this % height , this % width )) case ( 'P3' ) if (. not . allocated ( this % pixels )) allocate ( this % pixels ( this % height , 3 * this % width )) case ( 'P4' ) if (. not . allocated ( this % pixels )) allocate ( this % pixels ( this % height , this % width )) case ( 'P5' ) if (. not . allocated ( this % pixels )) allocate ( this % pixels ( this % height , this % width )) case ( 'P6' ) if (. not . allocated ( this % pixels )) allocate ( this % pixels ( this % height , 3 * this % width )) end select end subroutine allocate_pixels !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Sets the magic number of the PNM image. Supported values are `P1`, `P2`, `P3`, `P4`, `P5`, and `P6`. elemental pure subroutine set_magicnumber ( this , magic_number ) class ( format_pnm ), intent ( inout ) :: this character ( * ), intent ( in ) :: magic_number this % magic_number = magic_number end subroutine set_magicnumber !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Sets the width of the PNM image. elemental pure subroutine set_width ( this , width ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: width this % width = width end subroutine set_width !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Sets the height of the PNM image. elemental pure subroutine set_height ( this , height ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: height this % height = height end subroutine set_height !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Sets a comment for the PNM image. elemental pure subroutine set_comment ( this , comment ) class ( format_pnm ), intent ( inout ) :: this character ( * ), intent ( in ) :: comment this % comment = comment end subroutine set_comment !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Sets the maximum color value of the PNM image. Only required for PGM and PPM images elemental pure subroutine set_max_color ( this , max_color ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: max_color this % max_color = max_color end subroutine set_max_color !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Sets the header of the PNM image. The header includes the magic number, width, height, comment, and max_color. elemental pure subroutine set_header ( this , magic_number , width , height , comment , max_color ) class ( format_pnm ), intent ( inout ) :: this character ( * ), intent ( in ) :: magic_number integer , intent ( in ) :: width integer , intent ( in ) :: height character ( * ), intent ( in ) :: comment integer , optional , intent ( in ) :: max_color call this % set_magicnumber ( magic_number ) call this % set_width ( width ) call this % set_height ( height ) call this % set_comment ( comment ) if ( this % file_format /= 'pbm' ) call this % set_max_color ( max_color ) end subroutine set_header !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Checks if the pixel values are within the valid range. pure subroutine check_pixel_range ( this , pixels ) class ( format_pnm ), intent ( inout ) :: this integer ( ik ), dimension (:,:), intent ( in ) :: pixels ! Check if the pixel values are within the valid range select case ( this % file_format ) case ( 'pbm' ) if ( maxval ( pixels ) > 1 . or . minval ( pixels ) < 0 )& error stop 'set_pixels: Invalid pixel values. Valid values are 0 and 1.' case ( 'pgm' ) if ( maxval ( pixels ) > this % max_color . or . minval ( pixels ) < 0 )& error stop 'set_pixels: Invalid pixel values. Valid values are between 0 and max_color.' case ( 'ppm' ) if ( maxval ( pixels ) > this % max_color . or . minval ( pixels ) < 0 )& error stop 'set_pixels: Invalid pixel values. Valid values are between 0 and max_color.' end select end subroutine check_pixel_range !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Sets the pixel values of the PNM image. pure subroutine set_pixels ( this , pixels ) class ( format_pnm ), intent ( inout ) :: this integer ( ik ), dimension (:,:), intent ( in ) :: pixels call this % check_pixel_range ( pixels ) this % pixels = pixels end subroutine set_pixels !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Sets the pixel values of the PNM image. elemental pure subroutine set_pixel ( this , grey , r , g , b , i , j ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ), optional :: grey integer , intent ( in ), optional :: r , g , b integer , intent ( in ) :: i , j select case ( this % magic_number ) case ( 'P1' ) this % pixels ( i , j ) = grey case ( 'P2' ) this % pixels ( i , j ) = grey case ( 'P3' ) this % pixels ( i , 3 * j - 2 ) = r this % pixels ( i , 3 * j - 1 ) = g this % pixels ( i , 3 * j - 0 ) = b end select end subroutine set_pixel !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Writes the PNM image to a file. impure subroutine export_pnm ( this , file_name , encoding ) class ( format_pnm ), intent ( inout ) :: this character ( * ), intent ( in ) :: file_name character ( * ), intent ( in ), optional :: encoding integer :: nunit integer :: iostat if ( present ( encoding )) then call this % set_format ( encoding ) select case ( this % encoding ) case ( 'ascii' , 'plain' ) select case ( this % file_format ) case ( 'pbm' ) this % magic_number = 'P1' case ( 'pgm' ) this % magic_number = 'P2' case ( 'ppm' ) this % magic_number = 'P3' end select case ( 'binary' , 'raw' ) select case ( this % file_format ) case ( 'pbm' ) this % magic_number = 'P4' case ( 'pgm' ) this % magic_number = 'P5' case ( 'ppm' ) this % magic_number = 'P6' end select end select end if select case ( this % magic_number ) case ( 'P1' , 'P2' , 'P3' ) open ( newunit = nunit , file = file_name // '.' // this % file_format ,& status = 'replace' , iostat = iostat , form = 'formatted' , action = 'write' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call write_header ( this , nunit ) close ( nunit ) open ( newunit = nunit , file = file_name // '.' // this % file_format ,& status = 'old' , iostat = iostat , form = 'formatted' , action = 'write' , position = 'append' ) if ( iostat /= 0 ) error stop 'Error opening the file.' write ( nunit , '(*(g0,1x))' , advance = 'no' ) transpose ( this % pixels ) close ( nunit ) case ( 'P4' , 'P5' , 'P6' ) open ( newunit = nunit , file = file_name // '.' // this % file_format ,& status = 'replace' , iostat = iostat , form = 'formatted' , action = 'write' ) if ( iostat /= 0 ) error stop 'Error opening the file.' call write_header ( this , nunit ) close ( nunit ) open ( newunit = nunit , file = file_name // '.' // this % file_format ,& status = 'old' , iostat = iostat , access = 'stream' , form = 'unformatted' , action = 'write' , position = 'append' ) if ( iostat /= 0 ) error stop 'Error opening the file.' write ( nunit ) transpose ( achar ( this % pixels )) close ( nunit ) end select end subroutine export_pnm !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Writes the header of the PNM image to a file. Required before writing the pixels to the file. subroutine write_header ( this , nunit ) type ( format_pnm ), intent ( in ) :: this integer , intent ( in ) :: nunit integer :: i , k ! Write magic number write ( nunit , '(a)' ) this % magic_number ! Write comments k = ceiling ( real ( len ( adjustl ( this % comment ))) / 7 0.0 ) if ( len ( adjustl ( this % comment )) /= 0 . and . len ( adjustl ( this % comment )) <= 70 ) then write ( nunit , '(a,a)' ) '# ' , trim ( adjustl ( this % comment )) else if ( len ( adjustl ( this % comment )) /= 0 . and . len ( adjustl ( this % comment )) > 70 ) then do i = 1 , k - 1 write ( nunit , '(a,a)' ) '# ' , adjustl ( this % comment ( 70 * ( i - 1 ) + 1 : 70 * ( i - 1 ) + 70 )) end do write ( nunit , '(a,a)' ) '# ' , trim ( adjustl ( this % comment ( 70 * ( k - 1 ) + 1 :))) end if ! Write width, height and max_color write ( nunit , '(g0,1x,g0)' ) this % width , this % height if ( this % file_format /= 'pbm' ) write ( nunit , '(g0)' ) this % max_color end subroutine write_header !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> license: BSD 3-Clause !> Reads the header of the PNM image from a file. Required before reading the pixels from the file. subroutine read_header ( this , nunit , pos ) class ( format_pnm ), intent ( inout ) :: this integer , intent ( in ) :: nunit integer , intent ( out ) :: pos character ( len = 70 ) :: comment character :: temp integer :: i , k read ( nunit , * ) k = 0 do read ( nunit , '(a)' ) temp if ( temp /= '#' ) exit k = k + 1 end do inquire ( nunit , pos = pos ) rewind ( nunit ) read ( nunit , * ) this % magic_number this % comment = '' do i = 1 , k read ( nunit , '(a,a,a)' ) temp , temp , comment this % comment = this % comment // comment end do read ( nunit , * ) this % width , this % height inquire ( nunit , pos = pos ) if ( this % file_format == 'pgm' . or . this % file_format == 'ppm' ) then read ( nunit , * ) this % max_color inquire ( nunit , pos = pos ) end if end subroutine read_header !=============================================================================== end module pnm","tags":"","loc":"sourcefile/pnm.f90.html"},{"title":"test14.f90 – ForImage","text":"This file depends on sourcefile~~test14.f90~~EfferentGraph sourcefile~test14.f90 test14.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test14.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test14 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 14' call image % import_pnm ( 'pnm_files/img3_ascii' , 'ppm' , 'ascii' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img3_ascii_to_binary_ex' , 'binary' ) call image % finalize () end program test14","tags":"","loc":"sourcefile/test14.f90.html"},{"title":"test20.f90 – ForImage","text":"This file depends on sourcefile~~test20.f90~~EfferentGraph sourcefile~test20.f90 test20.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test20.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test20 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image integer ( ik ), dimension ( 4 , 12 ) :: px print * , ' ' print '(a)' , 'Test 20' px ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px ) call image % remove_channels ( remove_r = . true ., remove_b = . true .) call image % export_pnm ( 'pnm_files/img3_binary_remove' ) call image % export_pnm ( 'pnm_files/img3_ascii_remove' , 'ascii' ) call image % print_info () call image % finalize () end program test20","tags":"","loc":"sourcefile/test20.f90.html"},{"title":"test16.f90 – ForImage","text":"This file depends on sourcefile~~test16.f90~~EfferentGraph sourcefile~test16.f90 test16.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test16.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test16 use forimage , only : format_lut implicit none type ( format_lut ) :: image print * , ' ' print '(a)' , 'Test 16' call image % import ( file_name = 'lut_files/test15' , dim_colors = 3 ) call image % export ( file_name = 'lut_files/test16' ) call image % finalize () end program test16","tags":"","loc":"sourcefile/test16.f90.html"},{"title":"demo_ppm.f90 – ForImage","text":"This file depends on sourcefile~~demo_ppm.f90~~EfferentGraph sourcefile~demo_ppm.f90 demo_ppm.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~demo_ppm.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Description: This program showcases different operations on PPM (Portable Pixmap) images. ! It generates a Mandelbrot fractal, performs manipulations, and exports images in PPM format. program demo_ppm use forimage , only : format_pnm , rk , ik implicit none ! Declare format_pnm object and parameters for image dimensions type ( format_pnm ) :: image , copy_image integer , parameter :: height = 400 integer , parameter :: width = 400 integer ( ik ) :: px ( height , 3 * width ) ! Generate Mandelbrot fractal and assign pixel values px = mandelbrot ( height , width ) ! Set the properties of the format_pnm object (encoding, file format, width, height, max_color, comment and pixels) call image % set_pnm (& encoding = 'binary' , & file_format = 'ppm' , & width = width , & height = height , & max_color = 255 , & comment = 'demo: mandelbrot' , & pixels = px & ) ! Print information about the image call image % print_info () ! Export the image to a PPM file call image % export_pnm ( 'pnm_files/mandelbrot_binary' ) ! Export the image to a PPM file with ascii encoding call image % export_pnm ( 'pnm_files/mandelbrot_ascii' , 'ascii' ) ! Export the image to a PPM file with a different encoding copy_image = image ! Copy the format_pnm object call copy_image % negative () call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_negative' , 'binary' ) call copy_image % finalize () ! Brighten the image copy_image = image ! Copy the format_pnm object call copy_image % brighten ( 100 ) call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_brighten' , 'binary' ) call copy_image % finalize () ! Swap the red and blue channels copy_image = image ! Copy the format_pnm object call copy_image % swap_channels ( 'rb' ) call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_swap' , 'binary' ) call copy_image % finalize () ! Remove the blue channel copy_image = image ! Copy the format_pnm object call copy_image % remove_channels ( remove_b = . true .) call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_remove' , 'binary' ) call copy_image % finalize () ! Convert the image to greyscale copy_image = image ! Copy the format_pnm object call copy_image % greyscale () call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_greyscale' , 'binary' ) call copy_image % finalize () ! Rotate the image 90 degrees clockwise copy_image = image ! Copy the format_pnm object call copy_image % rotate ( - 90 ) call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_rotate' , 'binary' ) call copy_image % finalize () ! Flip the image horizontally copy_image = image ! Copy the format_pnm object call copy_image % flip_horizontal () call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_flip_horizontal' , 'binary' ) call copy_image % finalize () ! Flip the image vertically copy_image = image ! Copy the format_pnm object call copy_image % flip_vertical () call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_flip_vertical' , 'binary' ) call copy_image % finalize () ! Crop the image copy_image = image ! Copy the format_pnm object call copy_image % crop ( 100 , 200 , 50 , 300 ) call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_crop' , 'binary' ) call copy_image % finalize () ! Resize the image copy_image = image ! Copy the format_pnm object call copy_image % resize ( 800 , 200 ) call copy_image % export_pnm ( 'pnm_files/mandelbrot_binary_resize' , 'binary' ) call copy_image % finalize () ! Finalize the format_pnm object to release resources call image % finalize () ! Import a PPM file with binary encoding and export it with ascii encoding call image % import_pnm ( 'pnm_files/mandelbrot_binary' , 'ppm' , 'binary' ) call image % export_pnm ( 'pnm_files/mandelbrot_ascii_ex' , 'ascii' ) call image % finalize () ! Import a PPM file with ascii encoding and export it with binary encoding call image % import_pnm ( 'pnm_files/mandelbrot_ascii' , 'ppm' , 'ascii' ) call image % export_pnm ( 'pnm_files/mandelbrot_binary_ex' , 'binary' ) call image % finalize () contains ! Function to generate Mandelbrot fractal pure function mandelbrot ( h , w ) result ( pixels ) integer , intent ( in ) :: w , h integer ( ik ) :: pixels ( h , 3 * w ) integer ( ik ), parameter :: max_iter = 256_ik real ( rk ), parameter :: x_min = - 2.0_rk real ( rk ), parameter :: x_max = 1.0_rk real ( rk ), parameter :: y_min = - 1.5_rk real ( rk ), parameter :: y_max = 1.5_rk real ( rk ) :: x , y , x_temp , zx , zy , scale_x , scale_y integer ( ik ) :: iter integer :: i , j ! Calculate scale factors for mapping pixel coordinates to Mandelbrot coordinates scale_x = ( x_max - x_min ) / real ( w , kind = rk ) scale_y = ( y_max - y_min ) / real ( h , kind = rk ) ! Generate Mandelbrot fractal do i = 1 , h do j = 1 , w x = x_min + real ( j - 1 , kind = rk ) * scale_x y = y_max - real ( i - 1 , kind = rk ) * scale_y zx = 0.0_rk zy = 0.0_rk iter = 0_ik do while ( iter < max_iter . and . zx * zx + zy * zy < 4.0_rk ) x_temp = zx * zx - zy * zy + x zy = 2.0_rk * zx * zy + y zx = x_temp iter = iter + 1_ik end do ! Assign colors pixels ( i , 3 * j - 2 ) = int ( mod ( iter * 7_ik , 256_ik ), kind = ik ) ! Red channel pixels ( i , 3 * j - 1 ) = int ( mod ( iter * 4_ik , 256_ik ), kind = ik ) ! Green channel pixels ( i , 3 * j ) = int ( mod ( iter * 10_ik , 256_ik ), kind = ik ) ! Blue channel end do end do end function end program demo_ppm","tags":"","loc":"sourcefile/demo_ppm.f90.html"},{"title":"test23.f90 – ForImage","text":"This file depends on sourcefile~~test23.f90~~EfferentGraph sourcefile~test23.f90 test23.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test23.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test23 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image1 , image2 , image3 integer ( ik ), dimension ( 10 , 6 ) :: px1 integer ( ik ), dimension ( 60 , 60 ) :: px2 integer ( ik ), dimension ( 4 , 12 ) :: px3 print * , ' ' print '(a)' , 'Test 23' px1 ( 1 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 4 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 5 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 6 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px1 ( 7 ,:) = [ 1 , 0 , 0 , 0 , 1 , 0 ] px1 ( 8 ,:) = [ 0 , 1 , 1 , 1 , 0 , 0 ] px1 ( 9 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] px1 ( 10 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] call image1 % set_pnm ( encoding = 'binary' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px1 ) call image1 % flip_horizontal () call image1 % export_pnm ( 'pnm_files/img1_binary_flip_horizontal' ) call image1 % export_pnm ( 'pnm_files/img1_ascii_flip_horizontal' , 'ascii' ) call image1 % print_info () call image1 % finalize () call image1 % set_pnm ( encoding = 'binary' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px1 ) call image1 % flip_vertical () call image1 % export_pnm ( 'pnm_files/img1_binary_flip_vertical' ) call image1 % export_pnm ( 'pnm_files/img1_ascii_flip_vertical' , 'ascii' ) call image1 % print_info () call image1 % finalize () px2 = transpose ( reshapeshape = shape ( px2 ))) call image2 % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px2 ) call image2 % flip_horizontal () call image2 % export_pnm ( 'pnm_files/img2_binary_flip_horizontal' ) call image2 % export_pnm ( 'pnm_files/img2_ascii_flip_horizontal' , 'ascii' ) call image2 % print_info () call image2 % finalize () call image2 % set_pnm ( encoding = 'binary' , file_format = 'pgm' , width = 60 , height = 60 , max_color = 255 , comment = 'test 2' , pixels = px2 ) call image2 % flip_vertical () call image2 % export_pnm ( 'pnm_files/img2_binary_flip_vertical' ) call image2 % export_pnm ( 'pnm_files/img2_ascii_flip_vertical' , 'ascii' ) call image2 % print_info () call image2 % finalize () px3 ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px3 ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px3 ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px3 ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image3 % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px3 ) call image3 % flip_horizontal () call image3 % export_pnm ( 'pnm_files/img3_binary_flip_horizontal' ) call image3 % export_pnm ( 'pnm_files/img3_ascii_flip_horizontal' , 'ascii' ) call image3 % print_info () call image3 % finalize () call image3 % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px3 ) call image3 % flip_vertical () call image3 % export_pnm ( 'pnm_files/img3_binary_flip_vertical' ) call image3 % export_pnm ( 'pnm_files/img3_ascii_flip_vertical' , 'ascii' ) call image3 % print_info () call image3 % finalize () end program test23","tags":"","loc":"sourcefile/test23.f90.html"},{"title":"test8.f90 – ForImage","text":"This file depends on sourcefile~~test8.f90~~EfferentGraph sourcefile~test8.f90 test8.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test8.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test8 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 8' call image % import_pnm ( 'pnm_files/img2_ascii' , 'pgm' , 'ascii' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img2_ascii_ex' ) call image % finalize () end program test8","tags":"","loc":"sourcefile/test8.f90.html"},{"title":"test15.f90 – ForImage","text":"This file depends on sourcefile~~test15.f90~~EfferentGraph sourcefile~test15.f90 test15.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test15.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test15 use forimage , only : format_lut implicit none type ( format_lut ) :: image integer , dimension ( 1 : 8 , 3 ) :: colors = reshape ( [ & 0 , 0 , 0 , & 255 , 0 , 0 , & 0 , 255 , 0 , & 0 , 0 , 255 , & 255 , 255 , 0 , & 0 , 255 , 255 , & 255 , 0 , 255 , & 255 , 255 , 255 ], & shape ( colors ), order = [ 2 , 1 ] ) print * , ' ' print '(a)' , 'Test 15' call image % set ( num_colors = 8 , dim_colors = 3 , colors = colors ) call image % export ( 'lut_files/test15' ) call image % finalize () end program test15","tags":"","loc":"sourcefile/test15.f90.html"},{"title":"test12.f90 – ForImage","text":"This file depends on sourcefile~~test12.f90~~EfferentGraph sourcefile~test12.f90 test12.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test12.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test12 use forimage , only : format_pnm implicit none type ( format_pnm ) :: image print * , ' ' print '(a)' , 'Test 12' call image % import_pnm ( 'pnm_files/img3_binary' , 'ppm' , 'binary' ) ! Print the image information to the screen call image % print_info () call image % export_pnm ( 'pnm_files/img3_binary_ex' ) call image % finalize () end program test12","tags":"","loc":"sourcefile/test12.f90.html"},{"title":"test19.f90 – ForImage","text":"This file depends on sourcefile~~test19.f90~~EfferentGraph sourcefile~test19.f90 test19.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test19.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test19 use forimage , only : format_pnm , ik implicit none type ( format_pnm ) :: image integer ( ik ), dimension ( 4 , 12 ) :: px print * , ' ' print '(a)' , 'Test 19' px ( 1 ,:) = [ 14 , 12 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 0 , 15 ] px ( 2 ,:) = [ 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 , 0 , 0 , 0 ] px ( 3 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 15 , 7 , 0 , 0 , 0 ] px ( 4 ,:) = [ 15 , 0 , 15 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] call image % set_pnm ( encoding = 'binary' , file_format = 'ppm' , width = 4 , height = 4 , max_color = 15 , comment = 'test 2' , pixels = px ) call image % swap_channels ( swap = 'bg' ) call image % export_pnm ( 'pnm_files/img3_binary_swap' ) call image % export_pnm ( 'pnm_files/img3_ascii_swap' , 'ascii' ) call image % print_info () call image % finalize () end program test19","tags":"","loc":"sourcefile/test19.f90.html"},{"title":"demo_color.f90 – ForImage","text":"This file depends on sourcefile~~demo_color.f90~~EfferentGraph sourcefile~demo_color.f90 demo_color.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~demo_color.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Description: Demonstrates the manipulation of color spaces and their conversions. ! This program sets a custom color using various methods, converts it to different color spaces, ! retrieves color values, finds the nearest color, and prints color details. program demo_color use forimage , only : rk , ik , color implicit none type ( color ) :: custom_color , nearest_color integer ( ik ) :: r , g , b character ( len = 7 ) :: hex integer ( ik ) :: decimal integer ( ik ) :: c , m , y , k real ( rk ) :: h , s , v real ( rk ) :: hl , sl , vl real ( rk ) :: xyz_x , xyz_y , xyz_z ! Set the color using RGB values call custom_color % set ( name = 'custom_color' , r = 245_ik , g = 127_ik , b = 64_ik ) ! Convert the color to other color spaces call custom_color % convert ( 'rgb2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! Print the name and color values call custom_color % print () ! Set the color using a hex value call custom_color % set ( name = 'custom_color' , hex = '#F57F40' ) ! Convert the color to other color spaces call custom_color % convert ( 'hex2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! Print the name and color values call custom_color % print () ! Set the color using a decimal value call custom_color % set ( name = 'custom_color' , decimal = 16088896_ik ) ! Convert the color to other color spaces call custom_color % convert ( 'decimal2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! Print the name and color values call custom_color % print () ! Set the color using a decimal value call custom_color % set ( name = 'custom_color' , c = 0_ik , m = 48_ik , y = 74_ik , k = 4_ik ) ! Convert the color to other color spaces call custom_color % convert ( 'cmyk2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! Print the name and color values call custom_color % print () ! Set the color using a hsv value call custom_color % set ( name = 'custom_color' , h = 2 0.8840_rk , s = 7 3.8776_rk , v = 9 6.0784_rk ) ! Convert the color to other color spaces call custom_color % convert ( 'hsv2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! Print the name and color values call custom_color % print () ! Set the color using a hsv value call custom_color % set ( name = 'custom_color' , hl = 2 0.8840_rk , sl = 9 0.0498_rk , vl = 6 0.5882_rk ) ! Convert the color to other color spaces call custom_color % convert ( 'hsl2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! Print the name and color values call custom_color % print () ! Set the color using a hsv value call custom_color % set ( name = 'custom_color' , xyz_x = 4 6.1753_rk , xyz_y = 3 4.9669_rk , xyz_z = 9.1672_rk ) ! Convert the color to other color spaces call custom_color % convert ( 'xyz2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! Print the name and color values call custom_color % print () ! Print and save the available colors call custom_color % print_available_colors () call custom_color % save_available_colors () ! Set a color using the name of a color from the available colors call custom_color % set ( 'red' , use_library = . true .) call custom_color % print () ! Set the color using specific RGB values call custom_color % set ( name = 'custom_color' , r = 100_ik , g = 30_ik , b = 30_ik ) print '(a)' , 'Find the nearest color to the custom color' call custom_color % find_nearest ( nearest_color ) ! Print the name and values of the nearest color call nearest_color % print () end program demo_color","tags":"","loc":"sourcefile/demo_color.f90.html"},{"title":"test1.f90 – ForImage","text":"This file depends on sourcefile~~test1.f90~~EfferentGraph sourcefile~test1.f90 test1.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test1.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! Description: Creates and exports a 6x10 PBM image in ascii format. program test1 use forimage , only : format_pnm , ik implicit none ! Declare an object of type format_pnm type ( format_pnm ) :: image ! Define a 2D array representing pixel values (0 and 1) for the image integer ( ik ), dimension ( 10 , 6 ) :: px print * , ' ' print '(a)' , 'Test 1' px ( 1 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 2 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 3 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 4 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 5 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 6 ,:) = [ 0 , 0 , 0 , 0 , 1 , 0 ] px ( 7 ,:) = [ 1 , 0 , 0 , 0 , 1 , 0 ] px ( 8 ,:) = [ 0 , 1 , 1 , 1 , 0 , 0 ] px ( 9 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] px ( 10 ,:) = [ 0 , 0 , 0 , 0 , 0 , 0 ] ! Set the properties of the format_pnm object (encoding, file format, width, height, comment and pixels) call image % set_pnm ( encoding = 'ascii' , file_format = 'pbm' , width = 6 , height = 10 , comment = 'test 1' , pixels = px ) ! Export the PNM image to a file named 'img1_ascii' in the specified format call image % export_pnm ( 'pnm_files/img1_ascii' ) ! Print the image information to the screen call image % print_info () ! Finalize the format_pnm object to release resources call image % finalize () end program test1","tags":"","loc":"sourcefile/test1.f90.html"},{"title":"test26.f90 – ForImage","text":"This file depends on sourcefile~~test26.f90~~EfferentGraph sourcefile~test26.f90 test26.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test26.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program example26 use forimage , only : rk , ik , color implicit none type ( color ) :: custom_color integer ( ik ) :: r , g , b character ( len = 7 ) :: hex integer ( ik ) :: decimal integer ( ik ) :: c , m , y , k real ( rk ) :: h , s , v real ( rk ) :: hl , sl , vl real ( rk ) :: xyz_x , xyz_y , xyz_z character ( len = 30 ) :: name real ( rk ), parameter :: tol = 1e-4_rk ! Set the color using RGB values call custom_color % set ( name = 'custom_color' , r = 245_ik , g = 127_ik , b = 64_ik ) ! Convert the color to other color spaces call custom_color % convert ( 'rgb2all' ) ! Get the name of the color call custom_color % get ( name ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! call custom_color % print () ! Check the values call check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) ! Set the color using a hex value call custom_color % set ( name = 'custom_color' , hex = '#F57F40' ) ! Convert the color to other color spaces call custom_color % convert ( 'hex2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! call custom_color % print () ! Check the values call check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) ! Set the color using a decimal value call custom_color % set ( name = 'custom_color' , decimal = 16088896_ik ) ! Convert the color to other color spaces call custom_color % convert ( 'decimal2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! call custom_color % print () ! Check the values call check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) ! Set the color using a decimal value call custom_color % set ( name = 'custom_color' , c = 0_ik , m = 48_ik , y = 74_ik , k = 4_ik ) ! Convert the color to other color spaces call custom_color % convert ( 'cmyk2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! call custom_color % print () ! Check the values call check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) ! Set the color using a hsv value call custom_color % set ( name = 'custom_color' , h = 2 0.8840_rk , s = 7 3.8776_rk , v = 9 6.0784_rk ) ! Convert the color to other color spaces call custom_color % convert ( 'hsv2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! call custom_color % print () ! Check the values call check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) ! Set the color using a hsv value call custom_color % set ( name = 'custom_color' , hl = 2 0.8840_rk , sl = 9 0.0498_rk , vl = 6 0.5882_rk ) ! Convert the color to other color spaces call custom_color % convert ( 'hsl2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! call custom_color % print () ! Check the values call check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) ! Set the color using a hsv value call custom_color % set ( name = 'custom_color' , xyz_x = 4 6.1753_rk , xyz_y = 3 4.9669_rk , xyz_z = 9.1672_rk ) ! Convert the color to other color spaces call custom_color % convert ( 'xyz2all' ) ! Get the values of the color in other color spaces call custom_color % get ( r = r , g = g , b = b ) call custom_color % get ( hex = hex ) call custom_color % get ( decimal = decimal ) call custom_color % get ( c = c , m = m , y = y , k = k ) call custom_color % get ( h = h , s = s , v = v ) call custom_color % get ( hl = hl , sl = sl , vl = vl ) call custom_color % get ( xyz_x = xyz_x , xyz_y = xyz_y , xyz_z = xyz_z ) ! call custom_color % print () ! Check the values call check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) contains subroutine check ( tol , name , r , g , b , hex , decimal , c , m , y , k , h , s , v , hl , sl , vl , xyz_x , xyz_y , xyz_z ) character ( len =* ), intent ( in ) :: name integer ( ik ), intent ( in ) :: r , g , b character ( len =* ), intent ( in ) :: hex integer ( ik ), intent ( in ) :: decimal integer ( ik ), intent ( in ) :: c , m , y , k real ( rk ), intent ( in ) :: h , s , v real ( rk ), intent ( in ) :: hl , sl , vl real ( rk ), intent ( in ) :: xyz_x , xyz_y , xyz_z real ( rk ), intent ( in ) :: tol ! check output: if ( name /= 'custom_color' ) print * , 'ERROR: name /= ''custom_color''' if ( r /= 245_ik ) print * , 'ERROR: r /= 245' if ( g /= 127_ik ) print * , 'ERROR: g /= 127' if ( b /= 64_ik ) print * , 'ERROR: b /= 64' if ( hex /= '#F57F40' ) print * , 'ERROR: hex /= ''#F57F40''' if ( decimal /= 16088896_ik ) print * , 'ERROR: decimal /= 16088896' if ( c /= 0_ik ) print * , 'ERROR: c /= 0' if ( m /= 48_ik ) print * , 'ERROR: m /= 48' if ( y /= 74_ik ) print * , 'ERROR: y /= 74' if ( k /= 4_ik ) print * , 'ERROR: k /= 4' if ( abs ( h - 2 0.883977900552487_rk ) > tol ) print * , 'ERROR: h /= 20.8840' if ( abs ( s - 7 3.877551020408163_rk ) > tol ) print * , 'ERROR: s /= 73.8776' if ( abs ( v - 9 6.078431372549019_rk ) > tol ) print * , 'ERROR: v /= 96.0784' if ( abs ( hl - 2 0.883977900552487_rk ) > tol ) print * , 'ERROR: hl /= 20.8840' if ( abs ( sl - 9 0.049751243781117_rk ) > tol ) print * , 'ERROR: sl /= 90.0498' if ( abs ( vl - 6 0.588235294117652_rk ) > tol ) print * , 'ERROR: vl /= 60.5882' if ( abs ( xyz_x - 4 6.175296219509761_rk ) > tol ) print * , 'ERROR: xyz_x /= 46.1753' if ( abs ( xyz_y - 3 4.966900449347115_rk ) > tol ) print * , 'ERROR: xyz_y /= 34.9669' if ( abs ( xyz_z - 9.1671542959237478_rk ) > tol ) print * , 'ERROR: xyz_z /= 9.1672' end subroutine check end program example26","tags":"","loc":"sourcefile/test26.f90.html"},{"title":"test27.f90 – ForImage","text":"This file depends on sourcefile~~test27.f90~~EfferentGraph sourcefile~test27.f90 test27.f90 sourcefile~forimage.f90 forimage.f90 sourcefile~test27.f90->sourcefile~forimage.f90 sourcefile~forcolor.f90 forcolor.f90 sourcefile~forimage.f90->sourcefile~forcolor.f90 sourcefile~forimage_parameters.f90 forimage_parameters.f90 sourcefile~forimage.f90->sourcefile~forimage_parameters.f90 sourcefile~lut.f90 lut.f90 sourcefile~forimage.f90->sourcefile~lut.f90 sourcefile~pnm.f90 pnm.f90 sourcefile~forimage.f90->sourcefile~pnm.f90 sourcefile~forcolor.f90->sourcefile~forimage_parameters.f90 sourcefile~forcolor.f90->sourcefile~pnm.f90 sourcefile~pnm.f90->sourcefile~forimage_parameters.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program example27 use forimage , only : ik , color implicit none type ( color ) :: custom_color , nearest_color call custom_color % set ( name = 'custom_color' , decimal = 16711680_ik ) print '(a)' , 'Find the nearest color to the custom color' call custom_color % convert ( 'decimal2rgb' ) call custom_color % find_nearest ( nearest_color ) call nearest_color % print () end program example27","tags":"","loc":"sourcefile/test27.f90.html"}]}